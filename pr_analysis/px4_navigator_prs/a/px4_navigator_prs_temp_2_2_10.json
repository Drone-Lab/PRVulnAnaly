[
  {
    "title": "Make DO_SET_SERVO work",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10320",
    "number": 10320,
    "created_at": "2018-08-24T15:26:45Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "kpetrykin",
      "body": "Hello!\n\nMy goal was to make the mission command DO_SET_SERVO working with the possibility of triggering the servo with RC switch.\n\nFirst, I have found that \"vmount\" module (when enabled) publishes its values to actuator_controls_2 topic all the time. This overwrites all other publications to this topic. That is why DO_SET_SERVO is not working.\n\nI modified \"vmount\" module so that it would publish only if one of the actuator values were changed by RC. In other cases it stays silent.\n\nSecond, I have found that the formula, which translates PWM value from DO_SET_SERVO command parameters to -1..1 range for uORB, does not match the one which translates it back.\n[Original formula:](https://github.com/PX4/Firmware/blob/c997159e32f3870c7fd3202877324b76a62ea610/src/modules/navigator/mission_block.cpp#L433) `actuators.control[(int)item.params[0]] = 1.0f / 2000 * -item.params[1];`\n[Formula, which translates value back](https://github.com/4ert/Firmware/blob/397522d3813924380c209984b47b05bf743c3037/src/lib/pwm_limit/pwm_limit.cpp#L211): `effective_pwm[i] = control_value * (max_pwm[i] - min_pwm[i]) / 2 + (max_pwm[i] + min_pwm[i]) / 2;`\n[New formula](https://github.com/4ert/Firmware/blob/397522d3813924380c209984b47b05bf743c3037/src/modules/navigator/mission_block.cpp#L440): `actuators.control[(int)item.params[0]] = (float)(((float)item.params[1] - (PWM_DEFAULT_MAX + PWM_DEFAULT_MIN) / 2)/((PWM_DEFAULT_MAX - PWM_DEFAULT_MIN) / 2));`\n\nI need to discuss two questions about the formula: \n- to make it work properly we need to get actual \"max_pwm[i]\" and \"min_pwm[i]\" into navigator module. I have found a [way to get them](https://github.com/PX4/Firmware/blob/c997159e32f3870c7fd3202877324b76a62ea610/src/drivers/px4fmu/fmu.cpp#L1678), but I don't understand how to use it correctly\n- when I tested mission with DO_SET_SERVO command, servo works nice only with 1, 3 and 4 aux outputs. The second one for some reason outputs into first. I think there is something wrong with casting here: `(int)item.params[0]`\n\nI have tested everything with 1.7.3 Firmvare (px4fmu-v2_default), but did not save the flight log.\nI will test the last master in a few days.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-24T23:00:07Z",
          "body": "There are a few problems with this PR, but let's take a step back first.\r\n\r\nHow do people want/expect DO_SET_SERVO to even work?\r\n![screen shot 2018-08-24 at 18 55 07](https://user-images.githubusercontent.com/84712/44611459-43a8b980-a7cf-11e8-9266-6aad77f5252a.png)\r\n\r\nWhich servo does it correspond to? What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?\r\n\r\nWhat's the real use case for DO_SET_SERVO? Would we be better implementing a couple higher level commands? payload, gripper, etc\r\n\r\nIf the answer is still DO_SET_SERVO then the right place to implement that command is in the px4io (MAIN pwm) and/or px4fmu (AUX pwm) drivers. Those drivers are the consumers of actuator_controls_{0, 1, 2, 3} and work directly with PWM values.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-26T18:52:17Z",
          "body": "@4ert We need to separate the different actuator groups for good to make this easier. Could you join the PX4 dev call this week?\r\nhttps://dev.px4.io/en/contribute/#dev_call",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T12:16:37Z",
          "body": "- **How do people want/expect DO_SET_SERVO to even work?**\r\nIn our case we want to release a cargo by the mission command. The cargo is locked by the servo which is connected to one of the AUX outputs. We want to use DO_SET_SERVO command to send a PWM signal (parameter 2) to the AUX output from paramter 1.\r\n- **Which servo does it correspond to?**\r\n[As we can see now](https://github.com/PX4/Firmware/blob/bbc0c28c2c07743e489a338677e449a28ab5fd74/src/modules/navigator/mission_block.cpp#L436) the Navigator publish DO_SET_SERVO values to actuator_controls_2 topic. This control group is used to rule gimbal:\r\n![image](https://user-images.githubusercontent.com/161284/44657760-b18af600-aa06-11e8-9fd8-8a5971d51ffe.png)\r\n- **What's the real use case for DO_SET_SERVO? Would we be better implementing a couple higher level commands? payload, gripper, etc**\r\nI think when you use DO_SET_SERVO command - you just want to send an exactly PWM to external servo connected to your controller. If you want to rule gimbal - you will use DO_MOUNT_CONTROL, if you have any flight control mechanizm connected to the AUX - you will want to use some more convenient commands for this.\r\n- **If the answer is still DO_SET_SERVO then the right place to implement that command is in the px4io (MAIN pwm) and/or px4fmu (AUX pwm) drivers. Those drivers are the consumers of actuator_controls_{0, 1, 2, 3} and work directly with PWM values.**\r\nSo, I just made a little repair into an existing WORKING mechanizm. For now, Navigator module publishes into an \"actuator_controls_2\" topic and the px4fmu driver gets values from it and sends to the servos. There's just two things which discourage the process: the vmount driver spamming with its own values to the topic and the formula which translates data wrong. If you switch vmount off (\"vmount stop\" command into a console) and correct the formula - DO_SET_SERVO will work as expected. And don't forget to load a mixer for AUX outputs.\r\n\r\n- **What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?**\r\nI think, this question is up to the one who builds and sets up the specific device. If you connects some critical stuff to the AUX - edit mixers or just don't use DO_SET_SERVO.",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T16:01:36Z",
          "body": "Made a flight, the log is here: https://logs.px4.io/plot_app?log=8fb644ab-1fe4-449a-9b0f-c4656fdae029#Nav-Actuator-Outputs-AUX\r\nThe mission was: \r\n- takeoff to 10 meters \r\n- DO_SET_SERVO on AUX1 1000 PWM \r\n- go to waypoint \r\n- DO_SET_SERVO on AUX1 2000 PWM\r\n- land \r\n- DO_SET_SERVO on AUX1 1000 PWM (example releasing cargo)\r\n- takeoff to 10 meters\r\n- RTL",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T18:57:12Z",
          "body": "@LorenzMeier my speaking english is not very good but I could try to join the devcall",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-05T14:11:09Z",
          "body": "@kpetrykin  I'm currently trying to get this to work I've used your commit. So I have my Pixhawk connected to a servo and I'm trying to get the servo to move within the mavproxy shell by running servo set 1 1000. However the message I keep getting back is that the command was acknowledged but is unrecognised (result:3) . I can get the servo moving using nuttx shell, but I really want to be able to send a mavlink command to set the servo pwm is there any way of doing this? ",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-09-05T23:19:26Z",
          "body": "@maitham1 It looks like the  MAV_CMD_DO_SET_SERVO is **set in missions** and handled here: \r\nhttps://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L424\r\n(FYI @bkueng  this is related to https://github.com/Dronecode/DronecodeSDK/issues/533)\r\n\r\nI can't find the message being handled outside of missions. While that does not mean it isn't, the fact that you're getting \"unrecognised\" is indicative. \r\n\r\nThere is quite a bit of discussion above about this. @dagar did the devcall come to any conclusions? Is there a short term recommendation on how people should approach this?\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-09-06T00:04:36Z",
          "body": "@dagar regarding https://github.com/PX4/Firmware/pull/10320#issuecomment-415903772 (your questions) there are some good points there. Below are \"in my opinion\". \r\n\r\n> Which servo does it correspond to? \r\n\r\nShouldn't this be defined at the MAVLink/message level by a convention? How about 1-n are the MAIN outputs as labeled on board, and n upwards are the AUX ports, if present? \r\n\r\n> What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?\r\n\r\nIMO things screw up - it is up to the user of this tool to manage contention. See real use case below. \r\n\r\nDo we actually manage contention otherwise? ie does the system check that we don't have multiple control group inputs assigned to the same output?\r\n\r\n> What's the real use case for DO_SET_SERVO? \r\n\r\nThe real use case is probably the hardware we haven't thought about. Someone has some magic hardware that they want to drive, and a free port. They just want to be able to plug in that hardware and send it a command via MAVLink. They don't want to care about mixers. They are happy to manage contention themselves -  ie they know that nothing else is connected to the port, and if they screw up they screw up.\r\n\r\n> Would we be better implementing a couple higher level commands? payload, gripper, etc\r\n\r\nWe currently have [First Payload](http://dev.px4.io/en/concept/mixing.html#control-group-6-first-payload) which is just a parachute. Yes we should probably define something for a gripper. Not sure it will address the above use case.\r\n\r\nI've read http://dev.px4.io/en/concept/mixing.html and I am not 100% confident that my understanding of how these work is complete. I think that control groups are implemented as UORB topics that something can set (ie a controller). A mixer defines what actuators are set and their values based on these inputs. \r\n\r\nSo essentially you create a control group so that you can arbitrarily map a specific **type** of command to a physical output. For example to use a parachute you write a handler for it in MAVLink that sets the appropriate control group UORB topic. \"Something\" in the architecture then takes the mapping in the mixer file and based on that topic input sets the appropriate PWM output. Is that about right?\r\n\r\nThis is good because your system does not need to know what plugs into the output to implement a parachute or gripper (say). But it does mean that you need a mixer.\r\n\r\nQuestion: Are mixer's additive? Ie I have an airframe which uses the main outputs. I add a parachute. Do I need a completely new mixer file, or can I add my mixer just for my parachute?\r\n\r\nYou could implement this as a servo control group(s). But would be better if the mapping was transparent (ie no specific mixer required). \r\n",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-06T10:16:30Z",
          "body": "@maitham1 this PR is generally about mission's DO_SET_SERVO command.\r\nIt looks like if you want to pass it through mavlink it would not be handled.\r\nYou may experiment with writing your own handler somewhere here: https://github.com/PX4/Firmware/blob/039221fa93303a6840a45c3f8a72580aaaf2d74c/src/modules/mavlink/mavlink_receiver.cpp#L527\r\nOr you may assign an rc trigger for your servo and try to override it with mavlink message, but it is not a good way.\r\nAnd what do you want to do? What is your case?",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-06T10:43:34Z",
          "body": "@kpetrykin Thanks for getting back to me. I want to simply change pwm output from a script. \r\nCurrently I thought this would be possible via sending the MV_CMD_DO_SET_SERVO using pymavlink, \r\nit doesn't seem to be implemented, unless i'm missing something (which is highly likely as this is all new to me) but I'm open to other ways? ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-06T10:59:22Z",
          "body": "@maitham1 so what is your goal of using servo? What you try to do with this?\r\nAnd from what you send MAV_CMD_DO_SET_SERVO using pymavlink? Onboard computer?",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-06T11:32:51Z",
          "body": "@kpetrykin I would like run certain tests to change servo positions, its a static test so nothings flying. I just want the ability to set servos to specific angles and motors to specific speeds within a python script. I don't intend to use it for flying. Its just for testing.\r\n\r\nSending MAV_CMD_DO_SET_SERVO using pymavlink! ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-25T11:07:11Z",
          "body": "So, @dagar, @LorenzMeier - what's with this PR? What could i do to improve it?",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2018-10-24T03:53:21Z",
          "body": "Hey @kpetrykin Can you share your mixer that you are using for the AUX channel? I'm trying to follow yur route but cannot make the mixer properly maybe. ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-10-24T09:28:11Z",
          "body": "@tubeme, sure, it's simple:\r\n\r\n```\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 0  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 1  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 2  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 3  10000  10000      0 -10000  10000\r\n```\r\nTo make it work:\r\n\r\n- Place a mixer into a /etc/mixers/pass.aux.mix on your pixhawk's SD card\r\n- Create /etc/extras.txt with the folowing command: `mixer load /dev/pwm_output1 /fs/microsd/etc/mixers/pass.aux.mix`",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-11-07T09:27:43Z",
          "body": "So, @tubeme, did you get the mixer to work?",
          "type": "issue_comment"
        },
        {
          "author": "GaoGeolone",
          "created_at": "2018-12-01T02:17:34Z",
          "body": "@kpetrykin How to make it work, bro?",
          "type": "issue_comment"
        },
        {
          "author": "bys1123",
          "created_at": "2018-12-01T05:59:52Z",
          "body": "Is there any new update?",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-12-03T10:29:35Z",
          "body": "@GaoGeolone what have you done already?\r\n@bys1123 no, it's still as it is",
          "type": "issue_comment"
        },
        {
          "author": "GaoGeolone",
          "created_at": "2018-12-04T03:20:49Z",
          "body": "@kpetrykin I think I have already make it work, thank you~I just want to trigger my servo at a certain position. And by making a change to the AUXMIXER pass file , as well as modifying the Formula in Mission_block.cpp.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-04T04:15:20Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-06T13:03:51Z",
          "body": "Hi @kpetrykin , I want to follow what you have done the flight for example takeoff, go to a waypoint and drop a cargo. Now, I am trying to follow and write a same mixer that you provide. But there are some questions that I want to ask:\r\n\r\nQ1) Why do we create a \"extrats.txt\" file  with a command line \"mixer load /dev/pwm_output1 /fs/microsd/etc/mixers/pass.aux.mix\" ?\r\nQ2) Where do we place this \"extrats.txt\" file ? same folder as our mixer file?\r\nQ3) How can we upload the mixer and this \"extrats.txt\" file into our Pixhawk's SDcard? via QGC?\r\nQ4) If QGC is needed, do we need to place these two file into our Firmware before uploading it? \r\n\r\nSorry for asking these silly questions. Thanks. \r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-06T21:25:14Z",
          "body": "@JamesChooWK The Extras.txt is documented here: https://dev.px4.io/master/en/concept/system_startup.html#customizing-the-system-startup\r\n\r\nIt is used for system startup customisations - basically you're adding the mixer at runtime rather than as part of the firmware build. This is much easier for examples, testing,  and when you're doing something that only applies to your setup. \r\n\r\nYou can copy the files onto the card using whatever mechanism you like - ie File explorer on windows. The files need to be present on the SD card before booting PX4. Again, they are not part of firmware, but are loaded as though they were.",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-07T19:36:25Z",
          "body": "@hamishwillee Thanks for answering my questions.  I manage to upload the mixer and Extras.txt file into MicroSD card. \r\n\r\nBut when I tried to push a DO_SET_SERVO command to pixhawk using mavros services(\"mavros/mission/push\") by assigning \"command=183\", it return this error (\" WP: upload failed: command is not supported\")\r\n\r\nI am not sure whether I use the DO_SET_SERVO in (\"mavros/mission/push\") correctly or I have to do it in (\"mavros/cmd/command\") or I have to use mavlink ?\r\n\r\nI am using MAVROS and PX4 native flight stack.\r\n\r\nMany thanks.",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-07T21:16:16Z",
          "body": "@JamesChooWK Did you incorporate this PR? It has the code that is supposed to support  DO_SET_SERVO",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-07T21:45:40Z",
          "body": "@hamishwillee  I am sorry I do not incorporate this PR, but I will do it. If I uses the new code, does it means that I have to build the firmware and load to pixhawk or I can copy the files and paste it into the SDcard like the mixer?\r\nI'm sorry to ask so many questions, I'm a newbie to these sort of things.",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-07T22:05:01Z",
          "body": "@JamesChooWK So the point of the PR is that the message doesn't work on PX4 right now (as far as I know - I'm guessing based on what I see here).\r\nSo yes, you will have to build PX4 firmware with the changes in this code and upload it as \"custom firmware\". There are conflicts between the changes and master branch, so you might need to do some coding to integrate them.\r\n\r\nAlso note this PR did not get accepted yet - so there is no guarantee that even if you do this it will work. ",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-08T09:14:52Z",
          "body": "@hamishwillee  I will try to amend the code and build the firmware, Thanks for the time answering my questions. Cheers. ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2019-03-11T08:31:46Z",
          "body": "@JamesChooWK this PR does not contain code to accept DO_SET_SERVO from external sourses, it's about command from mission.\r\nIf you want to use external call of this command, you need to add a code to process a corresponding mavlink message.",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-11T09:54:30Z",
          "body": "@hamishwillee  I will try to amend the code and build the firmware, Thanks for the time answering my questions. Cheers. ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "fix loiter yaw error for multirotor(#10262)",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10297",
    "number": 10297,
    "created_at": "2018-08-22T04:26:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "KeyneZzz",
      "body": "**Test data / coverage**\nbefore fix\nhttps://logs.px4.io/plot_app?log=58f3d121-cc66-4b11-9436-3ec3136b23c3\nafter fix\nhttps://logs.px4.io/plot_app?log=8a210ac9-fd87-4f63-8421-03a710e24153\n\nfixes #10262",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-09-16T23:00:53Z",
          "body": "@KeyneZzz could you explain why this is needed? I think the multicopter position controller should be handling yaw setpoints properly.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-09-17T07:07:44Z",
          "body": "In principle it should be possible to set `yaw` to NAN and then the vehicle should keep its heading (https://github.com/PX4/Firmware/blob/master/msg/position_setpoint.msg#L36). \r\nIn the case of loiter, I think that is what's happening:\r\n- yaw-setpoint is set to NAN (https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L604) with the intention that yaw is hold\r\n- in FlightTaskAuto, the heading is mapped as follow: \r\n  - Triplet yaw-flag is valid (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L201): the `yaw_setpoint` will be set to whatever triplet is, even if it is NAN. If the triplet has a finite yaw, then everything willl be handled as expected. If the triplet yaw is NAN (despite the valid yaw-flag), the the position-controller will set the yaw-setpoint to the current yaw (https://github.com/PX4/Firmware/blob/master/src/modules/mc_pos_control/PositionControl.cpp#L195)\r\n  - Triplet yaw-flag is not valid: the heading will be set according to `MPC_YAW_MODE`: https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L223-L277 where a yaw-lock is applied if the vehicle is within the acceptance radius\r\n\r\nBased on the above logic, I think one of the problems here is similar to https://github.com/PX4/Firmware/pull/10294, that  the yaw-valid-flag might be true, but the actual setpoint might still be infinite. \r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "KeyneZzz",
          "created_at": "2018-09-19T03:47:05Z",
          "body": "In my case, i'm not giving any yaw setpoint, but giving a yawspeed setpoint as 0.\r\nI'm not sure if the yaw-valid-flag stuff can solve the problem I met. But the changes I commited can be one of the valid ways to solve it.\r\n\r\nIn fact, my upper FC is always controlling the yaw by sending yawspeed setpoint.\r\nIs it better to use yaw_sp than to ues yawspeed_sp?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-10-30T14:52:03Z",
          "body": "@KeyneZzz Is this an extended fixed wing/vtol fix for https://github.com/PX4/Firmware/pull/10291?\r\n\r\n> better to use yaw_sp than to ues yawspeed_sp?\r\n\r\nFor holding the heading it's better to have a constant yaw setpoint because a yawspeed setpoint can in principle drift.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-16T16:09:13Z",
          "body": "Has this been resolved?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2019-01-29T09:49:18Z",
          "body": "Let's track if the issue was resolved in #10262. I don't think this pr would fix the root cause of the issue because of the same reasons that were already explained in https://github.com/PX4/Firmware/pull/10297#issuecomment-421909966",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "navigator: set yaw_valid flag in reposition triplet",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10294",
    "number": 10294,
    "created_at": "2018-08-21T21:00:11Z",
    "merged": true,
    "merged_at": "2018-09-16T23:29:39Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "@dagar @MaEtUgR @Stifael I'm wondering if we need these flags. On one hand we allow the yaw setpoint to be set to NAN on the other hand we still require a valid flag to be set.\nAnd sometimes one means the other like here\nhttps://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L507\n\n@DonLakeFlyer @LorenzMeier FYI\n\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-22T06:38:40Z",
          "body": "@RomanBapst The fixed wing mission test failed.",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-22T06:48:52Z",
          "body": "> On one hand we allow the yaw setpoint to be set to NAN on the other hand we still require a valid flag to be set.\r\n\r\nI think what is missing is clear definition. In addition to NAN and the valid flags, Infinity is also used. ",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-08-26T09:58:29Z",
          "body": "@dagar Any idea what went wrong here? Is it one of those cases where you just need to restart it?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-08-26T09:59:51Z",
          "body": "@dagar From what I see it lost datalink connection. Are these simulations actually using the reposition commands?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-09-12T06:26:05Z",
          "body": "@dagar How do it get the ulog file from a CI run?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-09-16T23:02:28Z",
          "body": "Rebased on master.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Navigator: RC loss yaw mission item",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10291",
    "number": 10291,
    "created_at": "2018-08-21T16:17:09Z",
    "merged": true,
    "merged_at": "2018-08-21T19:05:56Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "Added yaw mission item to `rcloss` state in `navigator`. This fixes the issue mentioned #10262 where the vehicle yaws in a seemingly random direction when RC is lost.\n\n**Test data / coverage**\nCurrent behavior:\n![selection_001](https://user-images.githubusercontent.com/37091262/44412682-c3f8c180-a526-11e8-9941-05af1f521a36.png)\nProposed behavior with this PR:\n![selection_002](https://user-images.githubusercontent.com/37091262/44414401-ed1b5100-a52a-11e8-837a-d81ea6349acb.png)\nhttps://review.px4.io/plot_app?log=2e96b2de-f511-49c0-a51a-a34ba7cabc13",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:05:05Z",
          "body": "I didn't know anyone was actually using RC Auto Recovery.",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-08-21T22:52:01Z",
          "body": "Hmm I thought this fixed our problem... but it seems our problem does not happen every time. We are seeing the quad yaw to a random heading when we lose RC  (most of the time). I know this is not the intended behavior in the code, and I've tracked it down to this line. Seems flight_tasks.update() is failing when we lose RC. The vehicle does not actually descend though.\r\n`line 607 in mc_pos_controller_main.cpp`\r\n```\r\n// update task\r\nif (!_flight_tasks.update()) {\r\n\t// FAILSAFE\r\n\t// Task was not able to update correctly. Do Failsafe.\r\n\tfailsafe(setpoint, _states);\r\n\r\n} \r\n```",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-22T06:50:52Z",
          "body": "@MaEtUgR Yaw = NaN is used to signal \"do not change yaw\". Is this maybe not correctly handled in flight tasks?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-10-30T14:03:25Z",
          "body": "@LorenzMeier For the vehicle_local_position_setpoints which are outputs of the flight task and input to the position control class NAN is defined as a state that has no setpoint and is therefore not controlled: https://github.com/PX4/Firmware/blob/master/msg/vehicle_local_position_setpoint.msg#L2\r\n\r\nIt seems that the navigator sets NAN to hold wherever that is documented and the FlightTaskAuto which handles the hold mode does not translate this correctly. This translation would need to happen here: https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L200\r\n\r\n**EDIT:** Or the meaning of a setpoint being NAN is handeled consistently and the fix is the one from this pr.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "mission:reset mission after finished",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10288",
    "number": 10288,
    "created_at": "2018-08-21T13:24:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "jinchengde",
      "body": "vehicle could reset mission after mission finished, change the flight mode to others and back to mission mode, no need disarm, the mission will reset.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:42:34Z",
          "body": "Great! This looks like a safe and simple way to do it.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-01T13:40:17Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-15T13:54:37Z",
          "body": "Closing as stale.\n",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2020-01-13T20:22:26Z",
          "body": "I realize this is old and closed, but after a recent conversation with @jinchengde and after thinking about this a lot, I think this proposed change makes a lot of sense.  @jinchengde I recommend you rebase and reopen this PR.  I can't comment intelligently on the code, but the functionality makes sense.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:46:59Z",
          "body": "We have to be a little careful here because other parts of navigator set the mission result as well.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-08-22T06:04:38Z",
          "body": "could you help to give some prompt which we need to protect, do we need to confirm vehicle in loiter mode before we reset the mission?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:51:49Z",
          "body": "@jinchengde we need to make sure that the next state after the mission ends does not crash the vehicle. Example: make sure the vehicle changes to HOLD or to LAND.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-11-26T09:52:37Z",
          "body": "OK，I will test for that, and I wish to have another PR for more modify",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-12-01T12:48:20Z",
          "body": "@TSC21 I had test in SITL as below\r\n1. automatic takeoff and mission\r\n2. mission end, the vehicle start to circle around the last waypoint\r\n3. change the mode to hold, the vehicle stay current altitude and circle around\r\n4. change the mode to mission, the vehicle fly to the first waypoint\r\nso there is no crash after we change the mode after the mission ends",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    }
  },
  {
    "title": "Add mission reset",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10287",
    "number": 10287,
    "created_at": "2018-08-21T12:06:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "jinchengde",
      "body": "after the vehicle finish mission, change the flight mode to others and back to mission mode, the vehicle will reset the mission, no need to disarm vehicle",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "Removed condition to move straight to RTL_LAND state.",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10252",
    "number": 10252,
    "created_at": "2018-08-16T21:24:54Z",
    "merged": true,
    "merged_at": "2018-08-16T22:08:47Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "Essentially this not only doesn't work after adding the `_navigator->get_position_setpoint_triplet()->current.valid` check (setpoints are invalidated when navigator changes nav state) but sometimes it DOES work and instead of landing where it is AT (i.e `gpos.lat` and `gpos.lon`) the lat/lon setpoints are `home.lat` and `home.lon`. This is extremely bad, the vehicle just beelines towards `home.lat`, `home.lon`, and `home.alt`.\n\nThis wasn't a problem previously when we were using the `mc_pos_controller` for all the control, as previously the logic for `SETPOINT_TYPE_LAND` within `mc_pos_controller` would just set the lat/lon setpoints to NaN, which then caused the controller to default those setpoints to the current gpos.lat/gpos.lon and just land where it is at. \n\nI hope this didn't impact anyone other than ourselves. We've seen it maybe 5 times total over the course of the last few weeks of consistent flying. I don't know why it sometimes \"works\" and sometimes does not. Either way it needs to be removed!",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-16T22:08:15Z",
          "body": "Thanks for following up and fixing it. We can find another way to accomplish the same (intended) result.",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-08-16T22:17:25Z",
          "body": "Of course. And yes, I think the logic belongs `commander` itself though.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Avoidance Feedback Rebased",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10240",
    "number": 10240,
    "created_at": "2018-08-15T15:21:26Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": " Based on #10037 \n\n- if the vehicle projected position on the line previous-current triplet is past the current triplet, acceptance radius is enlarged such that navigator updates the triplets\n- if the vehicle is within the xy acceptance radius but not inside the z one, enlarge the altitude acceptance radius such that navigator updates the triplets set the feedback yaw acceptance to NAN such that it is ignored by navigator\n\nMissions shouldn't get stuck anymore because a waypoint is not reachable or a waypoint is reached with a heading different from what navigator expects",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T07:49:38Z",
          "body": "@mrivi Could you please rebase one more time and check CI? Flash space is now resolved, so any remaining failures should be real.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T15:29:48Z",
          "body": "Why is this code here just commented out?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-17T15:12:10Z",
          "body": "@dagar how can we bring this in? Could we use this new message only for avoidance and then in a new PR use it for VTOL as well?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-19T09:34:16Z",
          "body": "@mrivi You are not filling the payload of the message but still publishing it below - is this intended?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-19T14:52:02Z",
          "body": "This was from the original PR https://github.com/PX4/Firmware/pull/10037 where fw_pos_ctrl_status was being generalized. Some of these fields are straight copies of what also goes out in vehicle_attitude_setpoint, so I was going to drop them.\r\n\r\n\r\nLet's finish https://github.com/PX4/Firmware/pull/10037 and rebase.",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-20T13:57:51Z",
          "body": "@dagar I have rebased. ",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    }
  },
  {
    "title": "Accept onboard computer heartbeats as telemetry",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10194",
    "number": 10194,
    "created_at": "2018-08-08T15:37:33Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "okalachev",
      "body": "This PR solves #10042 problem, that `STATUSTEXT` messages are not passed, when there is no GCS.\nAlso, this is a partial implementation of #7985.\n\nI pass `telemetry_status`, when OBC heartbeats received, but I changed the commander logic, for not considering OBC as a datalink.\n\nSo `NAV_DLL_ACT`, `COM_DL_LOSS_T`, `COM_DL_REG_T` are only about GCS link, not OBC (not renaming for backwards compatibility).\n\nThe OBC failsafe params, like `NAV_OBC_DLL_ACT`, `COM_OBC_DL_LOSS_T`, `COM_OBC_DL_REG_T` can be added later.\n\n@LorenzMeier , @TSC21 .",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-08-08T15:42:07Z",
          "body": "This looks reasonable and can be extended for an OBC datalink failsafe after. Can you please rebase?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-08T16:02:03Z",
          "body": "@okalachev: http://ci.px4.io:8080/blue/organizations/jenkins/PX4%2FFirmware/detail/PR-10194/2/pipeline#step-205-log-1111",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T16:22:55Z",
          "body": "@TSC21 , thanks, I'll look.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:20:06Z",
          "body": "A few minor comments, but overall looks good.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:20:56Z",
          "body": "@TSC21 , I found the bug.\r\n\r\nThe problem starts, when multiple telemetry \"sources\" are on the same Mavlink instance, so this is the same `telemetry_status` topic instance, and the same \"telemetry\" in commander's `telemetry_data` array.\r\n\r\nSo, I don's see an easy solution yet, looks like a lot of telemetry logic should be changed.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T14:24:24Z",
          "body": "@okalachev that probably means we need a different `telemetry_status` topic instance for each of the telemetry sources. Probably multitopic is required.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:36:01Z",
          "body": "I guess the maximum number of topic instances are `ORB_MULTI_MAX_INSTANCES`, which is 4. But the number of telemetry \"sources\" that way would be something like 255 (systems) * 255 (systems' components).\r\n\r\nSo, maybe not to use multitopic for that. Instead, to add system and component ids to `telemetry_status`? ",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T14:39:52Z",
          "body": "> I guess the maximum number of topic instances are `ORB_MULTI_MAX_INSTANCES`, which is 4. But the number of telemetry \"sources\" that way would be something like 255 (systems) * 255 (systems' components).\r\n\r\nWell I was thinking on limit the telemetry sources based on type and not on sys+comp id. But I guess that would make more sense yes. Can you propose that in a new issue as a RFC? Probably better to have a discussion about it first before one commits to it.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:58:37Z",
          "body": "You mean to write an RFC for adding sys and comp ids to `telemetry_status`?\r\n\r\nI'm not sure this is so large change to make an RFC.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T15:00:39Z",
          "body": "> I'm not sure this is so large change to make an RFC.\r\n\r\nIt's a conceptual/structural change/feature that needs to be discussed.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T16:35:59Z",
          "body": "Could you please rebase? Thanks!",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-16T16:45:27Z",
          "body": "Unfortunately, it doesn't make sense for now, because this change introduces a new bug, that I described in previous messages.\r\n\r\nI don't see an easy solution yet, without rewriting `telemetry_status` logic.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:07:19Z",
          "body": "@okalachev what's the status of this? Have you thought of a way of bringing this into a state that does work?",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-11-25T21:18:52Z",
          "body": "@TSC21, sorry, unfortunately I haven't worked at this yet. The easy workaround is to send fake GCS heartbeats from ROS code. The conversation can be continued at https://github.com/PX4/Firmware/issues/10042.\r\n\r\nThis PR can be closed I guess, as the implementation is incorrect.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:25:52Z",
          "body": "The PR is not totally incorrect. It's rather incomplete. But I accept that we can bring a more complete solution in a new PR. Please fill free to close it or maybe we can iterate from here.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T14:53:20Z",
          "body": "Revisiting this idea - https://github.com/PX4/Firmware/pull/10933",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-02-26T15:27:57Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-12T16:13:01Z",
          "body": "Closing as stale.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:18:31Z",
          "body": "Is there any reason we can't drop this check entirely now?",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 8,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:19:25Z",
          "body": "How about ground control instead of GCS?",
          "path": "src/modules/commander/state_machine_helper.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T21:15:23Z",
          "body": "What if there is a heartbeat from another drone (in a swarm network), charging station, or any other device? Should it be considered as a telemetry link?\r\nI don't think so.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 8,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T21:15:59Z",
          "body": "I don't see a huge difference, but I can change it.",
          "path": "src/modules/commander/state_machine_helper.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    }
  },
  {
    "title": "Smooth auto desired vel",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10193",
    "number": 10193,
    "created_at": "2018-08-08T12:02:53Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "Stifael",
      "body": "Please use [PX4 Discuss](http://discuss.px4.io/) or [Slack](http://slack.px4.io/) to align on pull requests if necessary.\r\n\r\n**Test data / coverage**\r\nLogs uploaded to http://logs.px4.io or screenshots.\r\n\r\n**Describe problem solved by the proposed pull request**\r\nA clear and concise description of the problem, if any, this feature will solve. E.g. I'm always frustrated when ...\r\n\r\n**Describe your preferred solution**\r\nA clear and concise description of what you have implemented.\r\n\r\n**Describe possible alternatives**\r\nA clear and concise description of alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots for the feature request here.\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "[WIP] Avoidance feedback",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10180",
    "number": 10180,
    "created_at": "2018-08-07T12:37:54Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": "Branch based on #10013 plus #10037 cherry-picked on top. \n- if the vehicle projected position on the line previous-current triplet is past the current triplet, the acceptance radius is enlarged such that navigator updates the triplets\n- if the vehicle is within the xy acceptance radius but not inside the z one, enlarge the altitude acceptance radius such that navigator updates the triplets\n- set the feedback yaw acceptance to NAN such that it is ignored by navigator\n\nMissions shouldn't get stuck anymore because a waypoint is not reachable or a waypoint is reached with a heading different from what navigator expects",
      "issue_comments": [
        {
          "author": "mrivi",
          "created_at": "2018-08-15T15:22:11Z",
          "body": "Closing this in favor of #10240 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "uORB: update msgs fields from camelCase to snake_case",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10077",
    "number": 10077,
    "created_at": "2018-07-29T20:41:28Z",
    "merged": true,
    "merged_at": "2018-07-30T19:40:29Z",
    "state": "closed",
    "conversation": {
      "author": "TSC21",
      "body": "**Describe problem solved by the proposed pull request**\nIn the process of developing a ROS2 package that will be interfacing PX4 with ROS2 through fast-RTPS, I found out that while trying to building the package with the respective ROS msg generation, `rosidl_generate_interfaces()` does not process msg fields which have uppercase letters.\n\n**Describe your preferred solution**\nThis is an harmless PR which changes some message fields that have uppercase letters (or present a camelCase naming convention) so `rosidl_generate_interfaces()` is able to generate code for ROS IDL files. It basically replaces the uppercase with lowercase, and where required, change the naming convention to snake_case.\n\n**Describe possible alternatives**\nNot really much more we can do about it, unless one changes the copied file online during the build process, which is not really efficient.",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-07-29T20:46:10Z",
          "body": "Also, after this gets merged, I think it will make sense to actually have something like a schema validator for uORB msgs, so that we can make sure every new fields that is added follows the same convention (does make much sense to have fields following different naming conventions). This validator would run on CI as a new job, parallel to the style check job for example.\r\n@dagar any thoughts?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:02:42Z",
          "body": "Anything from the ROS world that already solves this problem?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:07:03Z",
          "body": "> Anything from the ROS world that already solves this problem?\r\n\r\nNo. This is actually a requirement for the message generation through ROS IDL generator python scripts.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:16:55Z",
          "body": "Will be issuing a PR against Flight Review so to address these changes as well.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:49:17Z",
          "body": "Changes on Flight Review addressed in https://github.com/PX4/flight_review/pull/123.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-29T21:50:33Z",
          "body": "@TSC21 Can you add a change that breaks the build if someone re-introduces this? Like a check in the Python generator for PX4 uORB messages?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:53:24Z",
          "body": ">@TSC21 Can you add a change that breaks the build if someone re-introduces this? Like a check in the Python generator for PX4 uORB messages?\r\n\r\n@LorenzMeier that's what I was actually referencing here https://github.com/PX4/Firmware/pull/10077#issuecomment-408704710. @dagar believes that clang-tidy could possibly handle this if we actually generate the headers and then do the check against those. Would that be a better alternative to a check in the Python generator?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-30T08:25:45Z",
          "body": "@TSC21 Let's keep it simple so we can merge this: Extend our message generator and throw an error please. I don't want this to start depending on something else and we drag it out weeks.\r\n\r\nThanks!",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-30T14:54:08Z",
          "body": "@LorenzMeier done",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-30T20:25:34Z",
          "body": "@LorenzMeier thanks for merging. This does unblock the package development.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:10:41Z",
          "body": "@CarlOlsson did you have opinions about the naming of these fields? If so we might as well tackle that here quickly.",
          "path": "msg/tecs_status.msg",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:11:27Z",
          "body": "@bresch, @RomanBapst, @tstastny, @philipoe, @acfloria - anyone feel strongly about the naming of these fields?",
          "path": "msg/tecs_status.msg",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Land: fix on_active() so mission finishes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10046",
    "number": 10046,
    "created_at": "2018-07-26T00:29:25Z",
    "merged": true,
    "merged_at": "2018-07-26T05:45:01Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nVerified that the mission can actually finish using a print statement and running a test in gazebo.\n\n**Describe problem solved by the proposed pull request**\nNot a problem per se, but it is indeed a bug with `land` from the perspective of a mission. \n\n**Describe your preferred solution**\nUse the function available to us `_navigator->get_land_detected()` to verify that we have indeed landed. The previous implementation was looking for  `is_mission_item_reached()`, which was unreachable because during land the mission item altitude set point was being set to absolute zero.",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "RTL: If already landing, go straight to RTL_LAND",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10044",
    "number": 10044,
    "created_at": "2018-07-25T20:59:44Z",
    "merged": true,
    "merged_at": "2018-07-26T05:46:26Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nTested issuing a `land` command followed by an `rtl` command in gazebo. Vehicle continues to descend as expected.\n\n**Describe problem solved by the proposed pull request**\nRTL interrupts a land. This is an issue if an operator is trying to land the vehicle and a critically low battery triggers an RTL. We have seen many times the vehicle takeoff back into the air (RTL) when it is about to touch down for landing.\n\n**Describe your preferred solution**\nDo not allow RTL to `CLIMB` if already `position_setpoint_s::SETPOINT_TYPE_LAND`\n\n_I also cleaned up the comments, removed unnecessary includes, and got rid of namepacing_",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-25T22:07:54Z",
          "body": "We actually have to be a little careful here that the current position setpoint is still valid. The other option which might be safer overall is to go straight into RTL land if transitioning from the LAND navigation state.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-26T05:46:21Z",
          "body": "Thanks, perfect!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-25T22:05:47Z",
          "body": "This should be okay if you also check `current.valid`.",
          "path": "src/modules/navigator/rtl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Takeoff: Arm occasionally triggers `maybe_landed`",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10043",
    "number": 10043,
    "created_at": "2018-07-25T20:02:09Z",
    "merged": true,
    "merged_at": "2018-07-26T05:49:15Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nhttps://review.px4.io/plot_app?log=42ef1074-1762-4a6d-9861-bb0ec3a9ec38\n![takeoff](https://user-images.githubusercontent.com/37091262/43223873-b4b6c390-9011-11e8-9402-eb6985511e7b.png)\n\n\n**Describe problem solved by the proposed pull request**\nVery rarely (1 out of 20) an `arm` command will kick the **`land_detector`** into the  _`maybe_landed`_ state due to the torque from the props. This will cause the vehicle to fail to takeoff. I added the log statement (RESETTING TAKEOFF TO POSITION) at line 524 in `mission_block.cpp` which confirms that land detector thinks we are no longer `landed`.\n\n**Describe your preferred solution**\nCheck that  the vehicle is not  _`maybe_landed`_ as well as not _`landed`_ upon takeoff.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-26T05:49:10Z",
          "body": "Thanks! I believe I have experienced these as well with vehicles with longer legs.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "generic position controller status/feedback message",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10037",
    "number": 10037,
    "created_at": "2018-07-25T14:34:37Z",
    "merged": true,
    "merged_at": "2018-08-31T18:43:53Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Not done, but should give you an idea.\n\nTODO\n - yaw acceptance (+ error threshold?)\n - z acceptance could come from the position controller\n - eliminate as much vehicle specific code from navigator as possible\n - consider vtol usage for back transition\n - stopping distance (loiter/rtl/geofence braking)",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-26T12:53:34Z",
          "body": "TODO: vtol implications (multi topic).",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-19T16:51:14Z",
          "body": "Ok I think this is everything we need right now. Needs testing and review.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-23T18:15:41Z",
          "body": "@dagar can we get this PR tested?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-25T14:46:21Z",
          "body": "@PX4/testflights could you test this branch on FW or VTOL (must transition to FW)? The test should include at least a couple waypoints. ",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-08-28T23:00:38Z",
          "body": "pr tested on v3 fw\r\nhttps://review.px4.io/plot_app?log=851676a3-f71a-419f-b253-2d5aa822c350\r\nhttps://review.px4.io/plot_app?log=54f1fa1b-25c3-405d-b673-3ea058310f2a\r\nhttps://review.px4.io/plot_app?log=9586fcb4-e87a-4d51-860d-6ca7b709ef45\r\nhttps://review.px4.io/plot_app?log=aa094d9e-68d5-4c01-bf55-22f6a790d1a0",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-29T03:39:52Z",
          "body": "Thanks @dannyfpv \r\n\r\nI did a little more testing in SITL and everything looks good except for a small regression in FW landing abort behaviour that I'll have fixed shortly.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-30T18:03:41Z",
          "body": "@dagar have you made any progress?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-30T19:39:53Z",
          "body": "@mrivi good to go.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-31T08:53:39Z",
          "body": "@dagar do we need more tests or can we merge directly?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-31T13:24:22Z",
          "body": "We can merge, but let's wait for master to be unbroken (https://github.com/PX4/Firmware/pull/10379). ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "mrivi",
          "created_at": "2018-08-21T07:14:55Z",
          "body": "`yaw_acceptance` should be feedback into navigator, right? From #10240,  dc99bb088ad9c1a1b28a0db22e00a896bc9355d6",
          "path": "msg/position_controller_status.msg",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-25T14:43:37Z",
          "body": "Yes.",
          "path": "msg/position_controller_status.msg",
          "position": 14,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "Looks fine in general. I'd like comments what the items in the message mean and what their units are.",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Yaw remove slewrate",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10003",
    "number": 10003,
    "created_at": "2018-07-23T13:37:17Z",
    "merged": true,
    "merged_at": "2018-08-03T06:24:35Z",
    "state": "closed",
    "conversation": {
      "author": "Stifael",
      "body": "Similar to this [PR](https://github.com/PX4/Firmware/pull/9146) but without manual changes. \nThis PR moves the heading computation from navigator to FlightTaskAuto, which will also remove\nthe continuous triplet update due to heading computation.",
      "issue_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-07-23T13:48:18Z",
          "body": "it is to note that during any ROI mission without gimbal control/rotation, the heading will still continuously be updated by the navigator",
          "type": "issue_comment"
        },
        {
          "author": "ChristophTobler",
          "created_at": "2018-07-24T06:49:45Z",
          "body": "@Stifael Should we wait for https://github.com/PX4/Firmware/pull/10006 first?",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-07-24T06:52:45Z",
          "body": "> @Stifael Should we wait for #10006 first?\r\n\r\nyep, that makes sense. #10006 wasn't there when I created this PR",
          "type": "issue_comment"
        },
        {
          "author": "ChristophTobler",
          "created_at": "2018-08-02T09:11:19Z",
          "body": "@Stifael Do we need additional flight tests?",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-02T09:21:23Z",
          "body": "@PX4/testflights can you please test this PR with different heading settings? \r\nIt would be great to test this branch with a vtol / fixedwing as well.\r\n\r\nHeading settings are controller with: MPC_YAW_MODE",
          "type": "issue_comment"
        },
        {
          "author": "Tony3dr",
          "created_at": "2018-08-02T14:54:19Z",
          "body": "@Stifael did you mean MIS_YAWMODE to control heading during a mission?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T15:01:09Z",
          "body": "flashed the pr, i see MPC_YAW_MODE appears in 'other' parameters\r\nwould the value be similar to MIS_YAWMODE?\r\nValues:\r\n0: Heading as set by waypoint\r\n1: Heading towards waypoint\r\n2: Heading towards home\r\n3: Heading away from home",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-02T15:21:58Z",
          "body": "similar: \r\n 0 towards waypoint\r\n 1 towards home\r\n 2 away from home\r\n 3 along trajectory\r\n\r\nSet by waypoint  got removed because if will take precedence over MPC_YAW_MODE. Basically if the mission sends a valid yaw waypoint, then the vehicle will obey that yaw waypoint independent of MPC_YAW_MODE/. ",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T15:26:40Z",
          "body": "thanks for the info, will test shortly",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-08-02T17:57:09Z",
          "body": "**Some flights with pixhawk 4 (V5). Good flights, heading towards waypoint**\r\n\r\nhttps://review.px4.io/plot_app?log=3b1aaa4c-e1df-4a54-811d-1ec7de1270d1\r\nhttps://review.px4.io/plot_app?log=3b1aaa4c-e1df-4a54-811d-1ec7de1270d1\r\nhttps://review.px4.io/plot_app?log=a448d8cb-8654-4596-9d0a-4dae924b78f1\r\n\r\n**Some flights with pixhawk 2.1 (V3). Good flights, heading towards waypoint**\r\nhttps://review.px4.io/plot_app?log=83616e27-9612-4a71-a2a1-f732edf072cb\r\nhttps://review.px4.io/plot_app?log=ea02ff15-43e9-4733-8ff9-f1c92b383257\r\nhttps://review.px4.io/plot_app?log=ea02ff15-43e9-4733-8ff9-f1c92b383257\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-08-02T18:12:35Z",
          "body": "couple flights on a Pixhawk pro (v4):\r\nhttps://review.px4.io/plot_app?log=97f18520-5fd9-4b17-a425-1118e0e051f9\r\nhttps://review.px4.io/plot_app?log=b70f9c01-9a71-4098-943c-98b2862ac486\r\n\r\npixhawk mini:\r\nhttps://review.px4.io/plot_app?log=ef395dc6-785b-4295-97cf-423577d80b74\r\nhttps://review.px4.io/plot_app?log=bafc63ea-e1c2-4b5b-8aa2-e22b7272809b\r\n\r\npixhawk v2\r\nhttps://review.px4.io/plot_app?log=d73899c2-2087-4f62-98fe-0ced68ca7c38\r\nhttps://review.px4.io/plot_app?log=d73899c2-2087-4f62-98fe-0ced68ca7c38\r\nland and rtl working properly\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T19:48:02Z",
          "body": "Few flights on a pixracer (v4)\r\nmcp_yaw_mode set to 0,1,2,3 respectively per flight\r\n\r\nhttps://logs.px4.io/plot_app?log=aec9e42c-94e9-4b3d-ac34-53113de5a712\r\nhttps://logs.px4.io/plot_app?log=a062494e-114c-4024-b42e-0b006afabc1f\r\nhttps://logs.px4.io/plot_app?log=80fd9e14-0219-47ea-8f0d-ae9f97535b0a\r\nhttps://logs.px4.io/plot_app?log=d14d154f-22b3-442e-b06c-b1dbf8290c1f\r\n\r\neverything looks to be working as expected",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-03T06:24:30Z",
          "body": "great thanks",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "ChristophTobler",
          "created_at": "2018-08-02T09:08:12Z",
          "body": "typo: points",
          "path": "src/lib/FlightTasks/tasks/FlightTaskAuto.cpp",
          "position": 56,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "ChristophTobler",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Missions: ignore waypoint yaw when avoidance is active",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9880",
    "number": 9880,
    "created_at": "2018-07-11T17:12:51Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": "@dagar  @LorenzMeier @thomasgubler \n\nThis is a sketch of  what we discussed in the dev call. If the avoidance is active and healthy the flag `_waypoint_yaw_reached ` is always set to true.",
      "issue_comments": [
        {
          "author": "mhkabir",
          "created_at": "2018-07-12T03:56:07Z",
          "body": "General question - why should we disregard yaw when in avoidance mode? ",
          "type": "issue_comment"
        },
        {
          "author": "nicovanduijn",
          "created_at": "2018-07-12T05:54:56Z",
          "body": "@mhkabir The navigator usually checks whether the aircraft arrives in the direction from the previous mission item. When in avoidance mode, this is not necessarily true, because there may have been a detour that causes it to fly along a path other than the straight line connecting the two mission items",
          "type": "issue_comment"
        },
        {
          "author": "thomasgubler",
          "created_at": "2018-07-12T07:22:00Z",
          "body": "@nicovanduijn Can you test this? I think you were the one that could reproduce the error symptoms most consistently.",
          "type": "issue_comment"
        },
        {
          "author": "nicovanduijn",
          "created_at": "2018-07-12T08:07:22Z",
          "body": "I'll test this, but cherry-picked onto #9270, since anything else doesn't make sense (If you're not flying OA in mission mode, this has no effect)\r\n\r\nEdit: @thomasgubler I've been running it a few times and it looks good so far. Never seen the problem of mission items not getting checked off so far. This is by no means exhaustive testing though",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-12T08:25:54Z",
          "body": "I didn't put it on top of the avoidance PR because I thought that's going to be merged soon. So it doesn't makes sense to add things and void all the testing done so far.\r\nThe goal was to show what can be achieved easily and discuss the architecture more concretely. I am quite aware that this PR alone doesn't do anything (it doesn't even compile)",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-13T07:01:00Z",
          "body": "Since #9270 got merged, I have rebased this PR on top of master",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-24T11:41:13Z",
          "body": "I have added he proposal from last week dev call:\r\nIf the vehicle projected position on the vector previous-current triplet is past the current triplet or if no progress towards the goal is made for 10 seconds, `_waypoint_position_reached` is set to true which forces the triplet update.\r\n\r\nThis is a proposal to start the the discussion.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-26T11:59:20Z",
          "body": "Closing this PR, because the final solution will be based on #10037 . The decision to update the triplet will be take in the position controller and feed it back to navigator thorough uORB. ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "thomasgubler",
          "created_at": "2018-07-12T07:20:34Z",
          "body": "is it a good pattern to return pointers to private members? I see the same on lines below and above so it might not be something that should be fixed in this PR",
          "path": "src/modules/navigator/navigator.h",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-12T15:49:16Z",
          "body": "I believe almost all of these can be changed to return const references fairly easily.",
          "path": "src/modules/navigator/navigator.h",
          "position": 13,
          "type": "review_comment"
        }
      ],
      "reviews": []
    }
  },
  {
    "title": "Navigator: Fix fixed-wing first order altitude hold",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9850",
    "number": 9850,
    "created_at": "2018-07-06T15:52:20Z",
    "merged": true,
    "merged_at": "2018-07-16T03:54:09Z",
    "state": "closed",
    "conversation": {
      "author": "philipoe",
      "body": "**Issue**\r\nNavigator's fixed-wing first-order altitude hold (FOH) is currently causing altitude reference oscillations when in any LOITER mode. See screenshot below. Not only altitude, but also pitch and throttle can thus oscillate significantly. We observed this during a recent test flight.\r\n\r\n![image](https://user-images.githubusercontent.com/2565608/42387985-53c6343e-8144-11e8-86d2-a42aecc4c5c0.png)\r\n\r\n\r\nLog file from SITL where this can be seen: https://review.px4.io/plot_app?log=f18c45ab-622e-4b1d-9819-03cfb06af2b5 . Here, after t=3:20 the true altitude setpoint is still the same as before t=2:20 (i.e. 630m AMSL) but the FOH logic just wrongly sets it to 660m and adds slight oscillations on top. The exact amount of oscillations depends on waypoint distance, altitude difference etc, but i have seen altitude ref oscillations of up to 30m, resulting in full pitch up/down of the aircraft.\r\n\r\n**Analysis**\r\nSee the commit for the location of the code where this is happening. Essentially, every time that the loiter radius of any loiter WP is larger than the acceptance radius calculated from the L1 turn distance, then the Navigator FOH would _not_ consider the waypoint reached and would thus not stop modifying the current altitude setpoint. This leads to the oscillations or offsets in the altitude reference. \r\n\r\n**Solution**\r\nIf in any loiter mode, consider the loiter radius times a factor of 1.2 (same as for the waypoint_reached logic [here](https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L217) as the acceptance radius. Tested in SITL, which should be sufficient for this case.\r\n\r\n@acfloria @ryanjAA @antiheavy FYI\r\n@dagar Made this PR as a quick hotfix independently of your PR at https://github.com/PX4/Firmware/pull/8883/files which supposedly also fixes this but is much larger and where it is more uncertain when this would be merged.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-06T15:55:52Z",
          "body": "This actually needs a little thought to review. There are a few situations where the position setpoint type and mission_item type are not the same. ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T16:12:36Z",
          "body": "I can of course also check for `(_mission_item.nav_cmd == NAV_CMD_LOITER_UNLIMITED ||\r\n\t\t\t    _mission_item.nav_cmd == NAV_CMD_LOITER_TIME_LIMIT))` if you prefer that... just let me know.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T16:53:41Z",
          "body": "If you can do it entirely from the position setpoint (ignoring mission_item) it should effectively avoid the edge cases (LOITER_TO_ALT, mission work items, etc).",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T17:09:20Z",
          "body": "So you'd also want to use `acc_rad = _navigator->get_acceptance_radius(fabsf(pos_sp_triplet->current.loiter_radius) * 1.2f);` instead of using the mission item loiter radius?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T17:29:28Z",
          "body": "Yes, but drop the mission_item entirely and do a quick skim of the entire altitude_sp_foh_update() to make sure nothing is dependant on the mission item. This is one of the reasons I wanted to move it to the position controller. Multicopter skips this thing entirely.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T21:19:54Z",
          "body": "> Yes, but drop the mission_item entirely and do a quick skim of the entire altitude_sp_foh_update() to make sure nothing is dependant on the mission item. This is one of the reasons I wanted to move it to the position controller. Multicopter skips this thing entirely.\r\n\r\nI'll can do this tomorrow if you can't get to it.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T21:58:12Z",
          "body": "> I'll can do this tomorrow if you can't get to it.\r\n\r\nSure, I guess you know exactly how you'd like to do it. Let me know if i should retest it afterwards then.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-16T01:29:51Z",
          "body": "> Sure, I guess you know exactly how you'd like to do it.\r\n\r\nNot really, I just see a number of subtle edge cases that make me uncomfortable.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-16T03:52:19Z",
          "body": "I played around with this a bit, but there's still another (small) possible hole when the mission item nav_cmd is out of sync with the current position setpoint type.\r\n\r\nLet's merge this now, but work on moving it to the position controller soon. From there it's much easier to safely handle the altitude ramp or hand off between loiter <-> position without fighting to plug numerous holes.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "Possibly not 100% correct in all situations to mix _mission_item and position_setpoints here.",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "ROI bugfix and improved precision",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9781",
    "number": 9781,
    "created_at": "2018-06-27T15:00:22Z",
    "merged": true,
    "merged_at": "2018-08-06T14:17:12Z",
    "state": "closed",
    "conversation": {
      "author": "potaito",
      "body": "## The ROI all-zeros bug\r\n\r\nWhen transmitting a mission with QGC, occasionally the ROI waypoints are broken in the sense that the ROI lat/lon is set to `(0.0, 0.0)`. Some digging showed that this only happens when the `MAV_CMD` used to send the mission is in INT mode. The reason is the conversion  from `mavlink_mission` to `mission_item`. In INT mode the latitude and longitude need scaling:\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/mavlink/mavlink_mission.cpp#L1282-L1294\r\n\r\nHowever, further down when setting the ROI parameters for LAT/LONG/ALT, the conversion is missing and the values are simply copied (cast) regardless of `_int_mode`:\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/mavlink/mavlink_mission.cpp#L1355-L1363\r\n\r\nA proposed fix is in the first commit.\r\n\r\n### Reproducing the issue:\r\nThe bug occurs only when the vehicle already has a mission loaded, with is removed in QGC, and then a new mission is sent containing the ROI. I am not sure why in one case INT mode is used, and in another case it's not...\r\n\r\n## ROI waypoint floating-point precision\r\nLooking at the situation with @MaEtUgR and @julianoes, we noticed that some precision is lost when using the parameter fields (float) of the vehicle message to store/access the ROI latitude and longitude (param 5 and param6):\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/navigator/mission_block.cpp#L445-L463\r\n\r\nInstead, we can just as well use the mission item's latitude and longitude, which are `double`s instead of `float`s:\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/navigator/navigation.h#L135-L153\r\n\r\nThe proposed fix is in the second commit, making the other commit redundant. \r\n\r\n------\r\n\r\n@julianoes Please take a look :)",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2018-07-26T07:32:29Z",
          "body": "@julianoes Could you review the changes? :)",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-07-26T16:06:18Z",
          "body": "Now there are conflicts :cry: \r\nI'll take care of it. ",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-08-06T09:28:29Z",
          "body": "@julianoes Conflicts resolved. They were caused by this commit: https://github.com/PX4/Firmware/commit/cf741668018f17cae47180064ebe2cfd2c9de214#diff-7a824e3d1e9a5420071c8c9bbe27b8e7R455\r\n\r\nWith the changes in this PR there is no conversion required, since the `lat` and `lon` fields are already `double` types:\r\nhttps://github.com/PX4/PX4-Autopilot/blob/e989c80205e22d11e5346bda3d11f90cdf294dfc/src/modules/navigator/navigation.h#L135-L137",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-08-06T09:54:06Z",
          "body": "```\r\n/usr/local/opt/ccache/libexec/c++  -DCONFIG_ARCH_BOARD_SITL -DMODULE_NAME=\\\"navigator\\\" -DPX4_MAIN=navigator_app_main -D__DF_DARWIN -D__PX4_DARWIN -D__PX4_POSIX -D__STDC_FORMAT_MACROS -Dnoreturn_function=\"__attribute__((noreturn))\" -I. -Isrc -Isrc/lib -Isrc/modules -I../../src -I../../src/drivers/boards/sitl -I../../src/include -I../../src/lib -I../../src/lib/DriverFramework/framework/include -I../../src/lib/matrix -I../../src/modules -I../../src/platforms -I../../platforms/posix/include -Iexternal/Install/include -I../../src/lib/ecl -g -fno-exceptions -fno-rtti -std=gnu++11 -fno-threadsafe-statics -DCONFIG_WCHAR_BUILTIN -D__CUSTOM_FILE_IO__ -Wall -Wextra -Werror -Warray-bounds -Wdisabled-optimization -Wdouble-promotion -Wfatal-errors -Wfloat-equal -Wformat-security -Winit-self -Wlogical-op -Wmissing-declarations -Wpointer-arith -Wshadow -Wuninitialized -Wunknown-pragmas -Wunused-variable -Wno-implicit-fallthrough -Wno-missing-field-initializers -Wno-missing-include-dirs -Wno-unused-parameter -Qunused-arguments -Wno-unused-const-variable -Wno-varargs -Wno-address-of-packed-member -Wno-unknown-warning-option -Wunused-but-set-variable -Wno-overloaded-virtual -Wreorder -fvisibility=hidden -include visibility.h -fno-strict-aliasing -fomit-frame-pointer -fno-math-errno -funsafe-math-optimizations -ffunction-sections -fdata-sections -fcolor-diagnostics -O2 -g -DNDEBUG   -fno-strict-aliasing -fomit-frame-pointer -fno-math-errno -funsafe-math-optimizations -ffunction-sections -fdata-sections -fcolor-diagnostics -std=gnu++11 -MD -MT src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o -MF src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o.d -o src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o -c ../../src/modules/navigator/mission_block.cpp\r\n\r\n../../src/modules/navigator/mission_block.cpp:462:18: fatal error: implicit conversion increases floating-point precision: 'const float' to 'double' [-Wdouble-promotion]\r\n\r\n                        vcmd.param5 = item.params[4];\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-08-06T12:43:19Z",
          "body": "fixed",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2018-06-28T06:38:34Z",
          "body": "I thought here we lose the accuracy yet again but I was wrong.\r\nhttps://github.com/PX4/Firmware/blob/18abeb1118f3db8e4012d290e1b8dc5d0883333a/msg/vehicle_command.msg#L105-L106",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T06:41:34Z",
          "body": "So here we might as well use `item.alt` to be consistent, right?",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T06:51:54Z",
          "body": "True, didn't realize that thanks to the `union` the two fields actually occupy the same bytes. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T06:52:05Z",
          "body": "Right, those two params are the exception. Apparently they are meant for LAT/LON storage :)",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T07:51:37Z",
          "body": "Oh funny.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T07:51:46Z",
          "body": "Yep.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T08:09:29Z",
          "body": ":heavy_check_mark: ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "julianoes",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "julianoes",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Land enhancement",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9772",
    "number": 9772,
    "created_at": "2018-06-26T19:07:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "This PR fixes two problems with _Land_. See #9691 & #9768\n\n**Problems**\n1. _Land_ can cause vehicle to flip upon land if the command was issued while the vehicle was moving quickly. \n\n2. _Land_ descent velocity was only **MPC_LAND_SPEED**. \n\n\n**Solutions**\n1. Vehicle will return to LAT/LON location where the _Land_ command was issued and begin descending from there. In the future, I want to implement a **_BRAKE_** setpoint type, but this is a good fix until that work is done.\n\n2. The vehicle now respects MPC_LAND_ALT1 and MPC_LAND_ALT2 to control descent velocities.\n\nI have simulation tested and physically flight tested this on our quadcopter and have seen no problems. I would love if someone could please test this with a fixed wing aircraft to verify. \n\nPlease let me know if you have any questions, thanks!\nJake",
      "issue_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-06-27T15:27:06Z",
          "body": "Have you checked that `land` still works during failsafe and no local position available?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T16:47:03Z",
          "body": "@Stifael Behavior in **_mc_pos_control_main.cpp_** remains the same if there is no local position.\r\n```\r\n\t\tif (abs(_local_pos.z) > _slow_land_alt1.get()) {\r\n\t\t\t_vel_sp(2) = _vel_max_down.get();\r\n\r\n\t\t} else if (abs(_local_pos.z) > _slow_land_alt2.get()) {\r\n\t\t\tfloat velocity_scaling = (abs(_local_pos.z) - _slow_land_alt2.get()) / (_slow_land_alt1.get() - _slow_land_alt2.get());\r\n\t\t\t_vel_sp(2) = _land_speed.get() + velocity_scaling * (_vel_max_down.get() - _land_speed.get());\r\n\r\n\t\t} else {\r\n\t\t\t_vel_sp(2) = _land_speed.get();\r\n\t\t}\r\n```\r\n\r\nDoes a failsafe event override navigator modes?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T16:50:53Z",
          "body": "Actually, the way the code is _currently_ it seems like if local position was lost it would never make it into the first `if` statement for `land`\r\n\r\n```\r\n\tif (_pos_sp_triplet.current.valid\r\n\t    && _pos_sp_triplet.current.type == position_setpoint_s::SETPOINT_TYPE_LAND) {\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T22:43:57Z",
          "body": "@dagar ",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-06-28T05:53:06Z",
          "body": "@dakejahl with your changes, the first stages are not of type `SETPOINT_TYPE_LAND`, they are of type `SETPOINT_TYPE_POSITION` (https://github.com/PX4/Firmware/pull/9772/files#diff-7a824e3d1e9a5420071c8c9bbe27b8e7R643). \r\nHave you tried in SITL to do fast forward flight and then turn of GPS?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-28T17:26:43Z",
          "body": "@Stifael _\"Have you tried in SITL to do fast forward flight and then turn of GPS?\"_\r\n\r\nJust tested this, does not work. Thanks for the advice! Let me see what I can do. I am going to try to implement the braking feature in `mc_pos_control`. If I can't get this to work I will try to make it work from `navigator`. I'll report back once I have something. :grin:\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-06-29T05:54:18Z",
          "body": "a break would also be helpful for this \"feature\" request: https://github.com/PX4/Firmware/issues/9741#issuecomment-399912835",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-29T18:10:29Z",
          "body": "Please see #9804",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "MaEtUgR",
          "created_at": "2018-06-27T11:52:06Z",
          "body": "This whole block is duplicating the existing functionality: https://github.com/PX4/Firmware/blob/master/src/modules/mc_pos_control/mc_pos_control_main.cpp#L2439-L2443\r\nDid it not work correctly for you?",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 6,
          "type": "review_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T14:57:02Z",
          "body": "Look at the one liner that I removed.\r\n\r\n _vel_sp(2) = _land_speed.get();\r\n\r\nClearly this is overriding the current Z vel setpoint when the setpoint type is LAND.\r\n\r\nAlso, always limiting veritial velocity based upon height does not seem right. Those parameters are specified with the word 'LAND' and thus should only affect flight characteristics while in the LAND mode (this is my opinion).",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 6,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "The position controller changes are in my eyes duplicate.",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "mission feasibility: add small tolerance to fw landing slope alt",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9753",
    "number": 9753,
    "created_at": "2018-06-24T09:14:25Z",
    "merged": true,
    "merged_at": "2018-06-29T12:10:54Z",
    "state": "closed",
    "conversation": {
      "author": "tstastny",
      "body": "Once sent from QGC to pixhawk, the fixed-wing landing pattern coordinates are again converted to local distances for feasibility checks, where small floating point errors can cause a rejection -- and the need to modify and resend the waypoints (somewhat tedious on the field). This PR simply adds a small tolerance to the check condition to avoid this.\n\n(also open to recommendations on the value of this tolerance, I just put 1m for now)\n\nPartially addresses #9472.",
      "issue_comments": [
        {
          "author": "tstastny",
          "created_at": "2018-06-26T07:20:48Z",
          "body": "@dagar @LorenzMeier ok to merge? or any other thoughts?",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-29T10:50:40Z",
          "body": "@dagar @LorenzMeier LGTM given that all checks have passed?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "[WIP] mission_result split into mission_status and navigator_status",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9747",
    "number": 9747,
    "created_at": "2018-06-23T03:03:24Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "The navigator message `mission_result` has become overloaded to contain both general navigator status, mission feasibility, and mission status. This has resulted in some confusion in both logs and usage from commander.\n\nThis PR splits mission_result into a general navigator_status message, and a mission_status that's specific to the planned dataman stored mission.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-23T12:51:56Z",
          "body": " - fixes https://github.com/PX4/Firmware/issues/9746\r\n - possibly fixes https://github.com/PX4/Firmware/issues/9515 (TBD)",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-01-20T04:33:43Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2019-01-20T15:29:39Z",
          "body": "this PR is still valid, or at least the part the tries to fix this current bug:  https://github.com/PX4/Firmware/issues/9746",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-05T21:08:38Z",
          "body": "Needs to be rebased badly.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-10-13T17:18:05Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-10T17:51:22Z",
          "body": "Closing as stale.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "Mission feasibility checker remove 2/3rds distance warnings that don't reject a mission",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9743",
    "number": 9743,
    "created_at": "2018-06-22T15:04:55Z",
    "merged": true,
    "merged_at": "2018-06-23T14:39:23Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Could we review the need for these mission feasibility distance warnings? In practice they can be problematic.\n\n![image](https://user-images.githubusercontent.com/84712/41783807-cf8db7c0-760b-11e8-9718-e162f3b479e1.png)\n\nDo we even need these warnings PX4 side? I think of the mission feasibility checker as the last line of defence for loading something bogus. If we also want it to return helpful warnings it needs a better interface.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-23T13:12:35Z",
          "body": "Yes, we need them. Mostly because people are stupid and produce fly-aways by “fat finger planning”.\r\n\r\nTime again for the events interface discussion.\r\n\r\nIn the meantime I would just increase the distance considerably. Most of the times people hit a completely wrong location many miles away, not something close. That is what we want to prevent.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-23T13:39:34Z",
          "body": "Actually I'm only talking specifically about the warnings that are 2/3rds of the error. I don't have a problem with the feasibility checker rejecting a mission that actually exceeds the parameter value. What I don't see is the value in a mavlink critical warning when the mission is still going to be accepted.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-23T14:21:26Z",
          "body": "Fair!",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-23T14:39:29Z",
          "body": "Thanks for the review.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Fixed-wing autoland improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9698",
    "number": 9698,
    "created_at": "2018-06-16T11:02:49Z",
    "merged": true,
    "merged_at": "2018-08-24T14:13:08Z",
    "state": "closed",
    "conversation": {
      "author": "philipoe",
      "body": "Fixed-wing autoland seems quite suboptimal at the moment. We have had very mixed results during flight tests so far, i.e. while on small foamy-like platforms or when landing on huge runways you may not have any issues, on short-field landings with larger and more complex (e.g. different flap configurations, wide airspeed range) platforms in challenging environments you will definitely see the shortcomings of the current autoland. This PR therefore introduces some improvements:\n\n### Improvements\n\n1. **Airplane landing configuration activated during loiter down (commit 2448863)**\n_Issue_: The landing configuration (i.e. setting the flaps and changing the airspeed from nominal to landing speed) was previously performed only when entering the final approach, i.e. at relatively low altitude above ground (15m is a good rule). In our flight tests, the flap and airspeed changes caused huge altitude errors (+5m), and the aircraft corrected by pitching down significantly and nearly slamming into the ground (alos because the integrators can wind up). This is extremely unsafe. _Solution_: The mode change (flaps, airspeed) is now performed when approaching the loiter-down WP, i.e. usually at much higher altitude of 50m+. The discontinuity is of course still there, but it happens at an altitude where it is safe and the controller (especially the integrators) still have plenty of time to adapt to this new configuration.\n\n2. **Separate and tigther gains for landing (commit 2448863)**\n_Issue_: To avoid motor wear and to allow a good flight efficiency, one usually wants to somewhat relax the TECS throttle time constant (FW_T_THRO_CONST). However, the alt/airspeed control may then not accurate enough for landings anymore. _Solution_: Introduced a throttle time constant scaling factor which is ONLY activated during landings (and loiter-down-to-landing) and is 100% by default such that it doesnt make a difference by default. Note that I am still debating a bit whether we should introduce even more landing-specific parameters (for example, the pitch setpoint offset FW_PSP_OFF changes quite a lot with flaps on our platform), but tried to reduce the amount of additional parameters in this PR. Any thoughts on that?\n\n3. **Tighter altitude acceptance radius for landings (commit https://github.com/PX4/Firmware/commit/d8cc40c67c521ef35cf74d41ee28b7adb8fe0c11)**\n_Issue_: Currently, the final decision on whether to enter the landing approch or not uses the standard altitude acceptance radius parameter for fixed wings (see [here](https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L255). This parameter is 10m by default, and we often set it to 20m because at higher altitudes it just does not matter. This is however not accurate enough for autolandings: Imagine you want to enter the landing approach at hAGL=15m, then the plane would still initiate the autoland at hAGL=5m...25m. Very unsafe and potentially not even feasible for the plane due to sink/climb rate constraints! _Solution_: A \"relative\" altitude acceptance radius, i.e. we assume a 30% error w.r.t. the remaining altitude difference to the landing waypoint can still be handled by the plane. Assuming hLandingApproach=15m, this means 4.5m of altitude acceptance radius. We of course constrain the altitude acceptance radius (see code).\n\n4. **ALWAYS flare when close to the ground (commit https://github.com/PX4/Firmware/commit/02e380af538ea8ef80a433da8fa63f63ed7601fb)**\n_Issue_: During previous flight testing, we were surprised to _sometimes_ see nice flares from the aircraft and sometimes not (i.e. the aircraft just impacted the ground with nominal sink speed of 0.5-0.8m/s). We always thought it is a tuning issue, but turns out it is also because the airplane _only_ flares when it is horizontally close enough to the landing waypoint. This can a) mean that the aircraft (e.g. simply due to errors in the altitude control) never really flares or b) that it will always flare at different altitudes AGL, so the impact velocity is always different. _Solution_: ALWAYS flare when close to the ground, thus guaranteeing a smooth landing in all cases. Note that the motor still _only_ shuts off when we are close to the land WP such that, e.g. if a downdraft pushed the aircraft too close to the ground, the aircraft still continues to fight that downdraft using the motor.\n\n### Notes\n - These are simple effective fixes that make autoland better without changing its overall structure. I know it can be improved a lot, but I think implementing these improvements as a first-shot solution is very important.\n - This was discussed with @dagar already. @priseborough @tstastny @LorenzMeier I am looking for feedback on why the changes I propose would NOT be suitable/better than the current implementation (or what could be improved quickly and effectively without changing the overall code too much)\n - Tested extensively in HIL already, i.e. that all mode changes and parameter changes work. The final tests (both HIL + flight testing) will be performed after feedback from you guys and the respective code changes.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:52:38Z",
          "body": "@antiheavy FYI",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:14:49Z",
          "body": "Some great ideas here.  We do a lot of fixed wing landings with our 2kg class flying wing and would be excited to test some of this.  Here are some initial comments:\r\n\r\n\r\n\r\n> Airplane landing configuration activated during loiter down\r\n\r\nI couldn't tell how this works from your code link.  My concern is how are you handling generic landing pattern use cases beyond the QGC built in landing pattern?  For example, people often manually plan a box-type landing pattern with traditional downwind, base, and final approach segments, they might place additional waypoints along the way to control the altitude, and place a DoLandStart command and the front of this to define it as the landing pattern in the mission. \r\n\r\nAlternate approaches to the \"integrators fighting flaps problem\" might include:\r\n- a slew rate parameter to slow down flap deployment allowing time for the integrators to adjust, this has the added benefit of allowing the roll integrator time to adjust to inadvertent differential flap deployment rates too.\r\n- a feed-forward type parameter for the pitch offset similar to what you mentioned.\r\n\r\n\r\n\r\n> Separate and tigther gains for landing\r\n\r\nYes!  I think something along these lines would be of great benefit to manage landing energy.  Might also consider some soft of pitch gain and maybe roll gain scaling. \r\n\r\n\r\n\r\n\r\n> Tighter altitude acceptance radius for landings\r\n\r\nI like the goal here, but I have concerns on the implementation.\r\n\r\nDo I correctly understand that the hard coded 30% value will be constrained to not exceed NAV_FW_ALT_RAD?  I think it is important that the hard coded 30% value doesn't inadvertently exceed the normal waypoint acceptance distances.\r\n\r\nMy bigger concern here is what is the behavior if the altitude is missed?  does the vehicle do a turn-around to try to get back to the waypoint? This could be very bad in the case where someone has placed a waypoint to start the final descent at low altitude very close to the Land waypoint (below trees, etc).  I see that you hard coded a 3m minimum, but even that is very difficult for most fixed wings to actually achieve.  I'm not sure the right answer here, but maybe instead of hard coding 30% there should be a separate parameter for landing approach WP vertical error, different from NAV_FW_ALT_RAD?\r\n\r\n\r\n\r\n> ALWAYS flare when close to the ground\r\n\r\nI agree we should get rid of the distance from land waypoint thing for Flare.  However, I'm unsure about the throttle piece you've added.  There is already a FW_LND_TLALT parameter which I feel should be respected no matter what (e.g. we don't want throttle kicking in when very close to the ground in case of propeller strike, etc).",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-17T00:06:45Z",
          "body": "@dagar @antiheavy thanks for your feedback! I adapted the code, see the comments. Answers to some remaining questions below.\r\n\r\n>>Airplane landing configuration activated during loiter down\r\n\r\n>I couldn't tell how this works from your code link. My concern is how are you handling generic landing pattern use cases beyond the QGC built in landing pattern? For example, people often manually plan a box-type landing pattern with traditional downwind, base, and final approach segments, they might place additional waypoints along the way to control the altitude, and place a DoLandStart command and the front of this to define it as the landing pattern in the mission.\r\n\r\nGeneric landing patterns which do NOT involve a LOITER_TO_ALT waypoint before the final approach are handled exactly as before. So they still work, but do not profit from improvement 1 (like activating flaps + different airspeed earlier) in this PR. Two potential solutions:\r\n\r\n1. Just check whether the next_wp is a NAV_LAND WP independently of whether the curr_wp is a LOITER_TO_ALT WP. I am a bit concerned about cases like curr_wp=takeoff and next_wp=land however. So one would need to really carefully look for potentially dangerous corner cases.\r\n2. Alternatively, one could use the DO_LAND_START mission item to trigger the landing configuration. However, this is a mission item that is only known to NAVIGATOR (as far as i know), so we cannot handle this in the FixedWingPositionControl. And even _if_ we had the DO_LAND_START information where we need it, the question is still: What happens if a user forgets to set a DO_LAND_START mission item -> The same as if he does not use the LOITER_TO_ALT waypoint, i.e. the landing is still going to work but is not going to benefit from the improvements above.\r\n\r\n_General note:_ I really feel like a loiter-to-alt is _the_ waypoint type to use before an approach because it guarantees that _both_ your altitude _and_ heading are perfectly (within the acceptance tolerances of course) aligned with the landing approach. We also used the \"downwind, base...\" approaches before but always placed a loiter-to-alt (just a semi-circle, which does not even need to involve altitude changes btw.) directly before the landing approach because of the advantages mentioned above. \r\n\r\n>Alternate approaches to the \"integrators fighting flaps problem\" might include: a slew rate parameter to slow down flap deployment allowing time for the integrators to adjust, this has the added benefit of allowing the roll integrator time to adjust to inadvertent differential flap deployment rates too.\r\n\r\nDepends. If you start flap deployment at the same time as before (i.e. when entering the landing approach) but just deploy the flaps slower, then this is actually worse because you are shifting the time when the flaps are fully deployed even closer to the ground. So doing these configuration changes as early as possible is the way to go (unless you have a model-predictive controller or similar feed forwards).\r\n\r\n\r\n>>Tighter altitude acceptance radius for landings\r\n\r\n>I like the goal here, but I have concerns on the implementation. Do I correctly understand that the hard coded 30% value will be constrained to not exceed NAV_FW_ALT_RAD? I think it is important that the hard coded 30% value doesn't inadvertently exceed the normal waypoint acceptance distances.\r\n\r\nCorrect.\r\n\r\n> My bigger concern here is what is the behavior if the altitude is missed? does the vehicle do a turn-around to try to get back to the waypoint? This could be very bad in the case where someone has placed a waypoint to start the final descent at low altitude very close to the Land waypoint (below trees, etc). I see that you hard coded a 3m minimum, but even that is very difficult for most fixed wings to actually achieve. I'm not sure the right answer here, but maybe instead of hard coding 30% there should be a separate parameter for landing approach WP vertical error, different from NAV_FW_ALT_RAD?\r\n\r\nWith the QGC fixed-wing landing pattern (or a manually-set loiter-to-alt WP) the vehicle just does one other turn in the loiter circle. This is perfectly safe. For a standard waypoint, the airplane may turn back to track that WP, yes. But again, standard WPs don't seem optimal for me there: If you don't hit the altitude acceptance, then the airplane will do crazy stuff, so you have to set a large NAV_FW_ALT_RAD to avoid this -> This then however means that the landing approach altitude is potentially very inaccurate, which is again unsafe. So it's _only_ a tradeoff between two potentially dangerous situations! The much cleaner way is to use loiter-to-alt WPs. Still, i could of course also live with using an additional landing-altitude-acceptance-radius parameter (the disadvantage there concerns the _scale_ of your problem: So say for a landing approach from 15m AGL a 5m altitude acceptance radius might be fine, but if you then land from 100m AGL then 5m altitude acceptance radius is overly tight because your vehicle could easily compensate for say up to 30m altitude error during the landing approach -> This is exactly the reason for using the 30% relative acceptance altitude). Maybe @dagar can comment on what general Pixhawk fixed-wing users would prefer?\r\n\r\n>>ALWAYS flare when close to the ground\r\n\r\n> I agree we should get rid of the distance from land waypoint thing for Flare. However, I'm unsure about the throttle piece you've added. There is already a FW_LND_TLALT parameter which I feel should be respected no matter what (e.g. we don't want throttle kicking in when very close to the ground in case of propeller strike, etc).\r\n\r\nI did not change the throttle behavior at all! The limitation that throttle is NOT being cut off by the autoland logic when we are too far way from the waypoint was already there before, and i somewhat understand the reason for having it there: Of course, there is a certain risk of a propeller strike close to the ground, but if you deactivate that throttle too early you might not only loose your propeller but your whole plane. There is the tradeoff again ;) Note that the land-detector will shut down the throttle _after_ landing, so at least that is somewhat safe.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T17:37:45Z",
          "body": "@philipoe A couple more questions:\r\n\r\n1) what happens if the vehicle flies very high/long past the Land waypoint, but has not yet begun to flare?  Will the flare still happen?  How will throttle behave in this scenario?\r\n\r\n2) Do I understand the following statement correctly? \r\n - \"A tighter exit criteria tolerance of 30% of the landing height applies only in the case when there is a Loiter-to-Alt waypoint followed by a Land waypoint?  This is limited between 3 meters and NAV_FW_ALT_RAD\"\r\nIf so, I think that is okay as long as that special case gets documented appropriately.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T19:51:22Z",
          "body": "> what happens if the vehicle flies very high/long past the Land waypoint, but has not yet begun to flare? Will the flare still happen? How will throttle behave in this scenario?\r\n\r\nIf you pass the landing waypoint at an altitude that is much higher than FW_LND_FLALT, then, just as before, it is not going flare above the landing WP but only later should it descend to FW_LND_FLALT. Of course externally there might be some go-around logic that triggers, i'd need to check that later.\r\n\r\n> \"A tighter exit criteria tolerance of 30% of the landing height applies only in the case when there is a Loiter-to-Alt waypoint followed by a Land waypoint? This is limited between 3 meters and NAV_FW_ALT_RAD\"\r\nIf so, I think that is okay as long as that special case gets documented appropriately.\r\n\r\nNo, as it is implemented right now this tighter acceptance radius applies for _every_ waypoint type which is followed by a NAV_LAND waypoint type. This can of course be changed. But where do you see the advantage of using standard WPs instead of loiter-to-alt WPs (or: The QGC standard fixed-wing landing pattern)? I guess the question we had before, i.e. whether to use either the relative \"30% of the remaining descent altitude\" rule or introducing a separate parameter is another question for @dagar .",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T20:56:23Z",
          "body": "> as it is implemented right now this tighter acceptance radius applies for every waypoint type which is followed by a NAV_LAND waypoint\r\n\r\nAh, well my concern here is exactly what you said previously: \"...If you don't hit the altitude acceptance, then the airplane will do crazy stuff...\".   I like your tighter criteria when using loiter-to-alt waypoints prior to NAV_LAND because, as you pointed out, it we behave predictably and safely.  I'm concerned about the use case when a normal waypoint is used prior to NAV_LAND and the vehicle may not behave predictably and safely.\r\n\r\n\r\n\r\n> where do you see the advantage of using standard WPs instead of loiter-to-alt WPs\r\n\r\nWhen landing in areas that have rows of trees, power lines, or other challenges that do not allow good use of the standard QGC Landing Pattern.  We use the standard QGC landing pattern 95% of the time, but we also need safe and predictable landing behavior for the cases when we need to use Box patterns or custom patterns to avoid trees, etc.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T21:01:25Z",
          "body": "> When landing in areas that have rows of trees, power lines, or other challenges that do not allow good use of the standard QGC Landing Pattern. We use the standard QGC landing pattern 95% of the time, but we also need safe and predictable landing behavior for the cases when we need to use Box patterns or custom patterns to avoid trees, etc.\r\n\r\nWhich means that you define safe as \"do not do crazy maneuvers in the horizontal direction\", but you do not care as much (or have a platform that has a lot of robustness) about the vertical direction, right?",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T21:05:25Z",
          "body": "> Which means that you define safe as \"do not do crazy maneuvers in the horizontal direction\", but you do not care as much (or have a platform that has a lot of robustness) about the vertical direction, right?\r\n\r\ncorrect.  I mean, of course I would want both, but horizontal/lateral variability is worse than vertical/longitudinal variability.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T21:26:06Z",
          "body": "> correct. I mean, of course I would want both, but horizontal/lateral variability is worse than vertical/longitudinal variability.\r\n\r\nOK, i feel like handling all waypoint types before a NAV_LAND wp the same is more important than saving one parameter and having this \"dynamic\" calculation ... so if @dagar has nothing against that I will introduce a separate land altitude acceptance parameter that is then going to apply to every single landing approach. ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-19T00:50:24Z",
          "body": "@philipoe is there a thought that maybe loiter-to-alt waypoints could have a tighter altitude acceptance than normal waypoints in general?  I mean they are special in the way that their altitude is a specific part of what they are.\r\n\r\nAlternately, what if you kept the dynamic calculation and improved the fixed wing behavior if the vehicle missed a normal waypoint?  e.g. auto-abort the landing?  I generally dislike auto-aborted landings, but that would be better than \"do crazy things\" in this case.\r\n\r\nI really like your goal here, and I would totally use a dynamic tighter acceptance criteria for our loiter-to-alt landings if the safe behavior problem with other waypoints could be solved.\r\n\r\nEven if you make a separate vertical tolerance parameter for the waypoint before the NAV_LAND, we will need to set that tolerance large because the behavior will still be bad if a normal waypoint is used and it misses.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-19T04:23:04Z",
          "body": "What happens in instances where the setup is for flaps trigger airbrakes (ailerons)? That’s how we have it set up and my concern would be if you are not able segregate only the flaps (which I believe is currently the case), you’d inadvertently end up with crow being deployed which would be a problem at any altitude given the added drag. Ran into this on full wing flaps (which also could be something great for landing very slowly [or heavy]). \r\n\r\nReally like what you’ve done here. We have planes flying autoland flights daily and while it works well as is, more granularity to tune further or even more so having something more robust is great. We’ll get testing on this soon and we definitely see the pitch up when flaps are deployed. ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T17:50:52Z",
          "body": "> Alternately, what if you kept the dynamic calculation and improved the fixed wing behavior if the vehicle missed a normal waypoint? e.g. auto-abort the landing? I generally dislike auto-aborted landings, but that would be better than \"do crazy things\" in this case. I really like your goal here, and I would totally use a dynamic tighter acceptance criteria for our loiter-to-alt landings if the safe behavior problem with other waypoints could be solved.\r\n\r\nOptimizing the behavior after the waypoint was reached can be quite involved. I therefore disabled the dynamic acceptance radius calculation again and introduced a separate altitude-acceptance-before-landing parameter (NAV_FW_ALTL_RAD). This should solve your issues as it gives you full configurability for your autolands.\r\n\r\n>What happens in instances where the setup is for flaps trigger airbrakes (ailerons)? That’s how we have it set up and my concern would be if you are not able segregate only the flaps (which I believe is currently the case), you’d inadvertently end up with crow being deployed which would be a problem at any altitude given the added drag. Ran into this on full wing flaps (which also could be something great for landing very slowly [or heavy]).\r\n\r\nThe flaps (and thus your drag-producing airbrakes) will _only_ trigger earlier with this PR _if_ you use a loiter-to-alt WP before the landing. Given that loiter-to-alt is effectively used to burn your excess altitude the additional drag should not matter. Standard WPs before a landing will not trigger your airbrakes, so you won't have a problem.\r\n\r\n@Antiheavy @ryanjAA @dagar Is this OK with the last fixes/commits that I made or is there any concerns left on your side? If so, then i will do extensive testing tomorrow, you guys could then also test if you like and we can then merge afterwards.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T18:17:10Z",
          "body": "@philipoe just so i'm clear, loiter to alt would also include (or basically also is) fixed wing landing pattern? We have to enable airbrakes and keep them quite highly engaged (lots of drag) to simply slow down so we cant fly with them on, full throttle I suppose might keep it there in calm conditions but it really is like throwing a drag chute out the back when they activate. Maybe we are an edge case scenario but any high aspect ratio wing that inherently will tip stall makes me worry about inducing that much drag while banking. I am worried about either that or having tecs have to near full throttle it to keep it in the air to then shut it back down quickly (ramp up and down). Again, might work in calm conditions but we'd essentially be eliminating the available power overhead budget for windy situations if near full throttle due to airbrakes out. Yesterday comes to mind, we were flying in 12-15 m/s winds and on the landing pattern, there was plenty of overhead to speed up in a hurry during pattern land but remove that ability and now we're close to the ground and going to have a much higher probability of not being able to avoid a stall.\r\n\r\nDon't get me wrong, i really like this since we spend the vast majority of the time setting and testing autolanding up under different scenarios, I'm just trying to highlight some issues I can see. I think we need to simply segregate the _att_sp.apply_flaps = true flag from putting on the airbrakes which will also take some thought on the mixer side of things but overall, if people are always stuck with flaps and airbrakes then more creative things like you're doing are going to have potential unforeseen flaws.\r\n\r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T19:43:56Z",
          "body": "> @philipoe just so i'm clear, loiter to alt would also include (or basically also is) fixed wing landing pattern? \r\n\r\nWhen we talk about QGC, then fixed-wing landing pattern = 1) loiter-to-alt + 2)landing waypoint.\r\n\r\n> We have to enable airbrakes and keep them quite highly engaged (lots of drag) to simply slow down so we cant fly with them on, full throttle I suppose might keep it there in calm conditions but it really is like throwing a drag chute out the back when they activate. Maybe we are an edge case scenario but any high aspect ratio wing that inherently will tip stall makes me worry about inducing that much drag while banking.\r\n\r\nI am not sure i completely understand what the problem is: You are saying that in straight level flight (i.e. during the landing approach) you are not afraid of stalling, right? But then you are saying that you are afraid to bank. You are aware that the fixed-wing controller automatically increases the airspeed reference depending on your bank angle, see [this code](https://github.com/PX4/Firmware/blob/master/src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp#L853) ? You are also saying you would need throttle to keep your airspeed when the airbrakes are out due to the drag, but the great thing in the loiter-to-alt (=down) mode is that you don't even need throttle but will keep your airspeed because you are descending anyways (and the sink rate can be configured of course). With all that said, maybe a video from your exact landing sequence would better help me to understand your approach/issues?\r\n\r\n> Don't get me wrong, i really like this since we spend the vast majority of the time setting and testing autolanding up under different scenarios, I'm just trying to highlight some issues I can see. I think we need to simply segregate the _att_sp.apply_flaps = true flag from putting on the airbrakes which will also take some thought on the mixer side of things but overall, if people are always stuck with flaps and airbrakes then more creative things like you're doing are going to have potential unforeseen flaws.\r\n\r\nOf course we can talk about separating flaps and airbrakes, but i personally wouldnt do this in this PR. Still, i dont fully understand _why_ you'd like to separate them right now, given that until now (i.e. during the landing approach) you have also always used them together, right? And as mentioned, flaps+airbrakes would then _only_ deploy in a loiter-to-alt waypoint, but in no other type of waypoint (apart from NAV_LAND as before).\r\n\r\nIf it helps, feel free to write me on slack...",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:16:31Z",
          "body": "I can write you on slack but essentially we have a high aspect ratio wing and the characteristics of any high aspect ratio wing are that they are prone to tip stalling (as you probably know) so during bank at reduced speeds (near stall/landing speed) that concern or even issue becomes very pronounced, ie less room for error. Slowing down in a straight line with even the hint of a stall is easily managed by tecs and pitch but the concern is not the code to increase speed, that works great, it's that when you're creating so much more drag, the true ability to quickly increase speed is diminished and you are close to the ground. Recovering is potentially not an option at that point. As for why to separate the flaps, because anything that forces on flaps and in many cases airbrakes as well is not ideal. I wouldn't deploy airbrakes ever until I have exited my loiter tangent to the landing waypoint. \r\n\r\nLanding sequence is pretty standard, fixed wing pattern then once exited flaps and airbrakes come on and we see nose up for a moment if pitch correction isnt set and then glide down. This is more about forcing one action actually forces two (flaps and airbrakes) and anything to hinder the ability to stay in the air is a concern and when that limit is power overhead which we are reduced due to increased drag essentially just limits what can be flown in safely or in edge cases if can even be used at all. The more I think about it the more it makes me think that the power system needs to be able to easily overcome drag forces but also raises the questions of what do having airbrakes out do aerodynamically when trying to bank which would be a concern since ailerons will already be deployed. Airbrakes really shouldn't come on until we are in a straight line.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-20T20:22:27Z",
          "body": "Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:23:53Z",
          "body": "Sounds good!",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T20:25:44Z",
          "body": "> Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?\r\n\r\nI honestly think this is too much of a corner case to be of concern for the PX4 dev call. Also, this is in one week, right? I think we should solve this faster than that. Or am i misunderstanding anything? Skype or slack would be an alternative...",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:38:29Z",
          "body": "I think maybe my comment regarding high aspect ratio wings limits the scope and pushes things more specific to wings of that type but realistically even in the case of non high aspect ratio wings I wouldnt deploy airbrakes until lined up with the landing waypoint which I believe is the same in most full size planes (not all). I suppose the best fix is to either to be able to turn off the functionality or separate the flaps and airbrake call.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-21T14:09:31Z",
          "body": "> Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?\r\n\r\nRyan and myself discussed on slack yesterday, and we concluded that fixed-wing landings are so heavily aircraft configuration dependend that we basically need parameters to let the (pro-)user configure the landing process. \r\n\r\n@ryanjAA @Antiheavy I have included the parameter FW_LND_EARLYCFG which enables/disables the early use of the landing configuration (flaps+airspeed change) during the loiter down. Does anyone of you want to test this? Another testing feedback i'd be extremely interested in is whether choosing a different FW_PSP_OFF increases altitude tracking accuracy for your platforms during landing! Could you try to test this too? Of course the FW_INTEG_GAIN needs to be zero such that one can see the differences. For me, in our HIL model, having a different FW_PSP_OFF helps a lot during loiter down and landing (reduction of steady-state altitude tracking error by >50%, i.e. from 6m to <2m). I will also test this on our planes in the next days.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-22T16:41:18Z",
          "body": "Yep - sounds great. Cool feature, will definitely try it out. We keep FW_PSP_OFF at 1 as knowing the true offset does help quite a lot (we could probably calculate for people/airframes that don't know it if set to 0, fly level and see if we are pitching up/down at cruise). FW_T_INTEG_GAIN is at 0.1 but will try at 0 and see.  ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-27T13:30:01Z",
          "body": "Tested in flight, no issues. Also tested in HIL. GTM from my side.\r\n\r\n@ryanjAA @Antiheavy Tested on your side too and/or are you OK with merging this?",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-28T03:37:08Z",
          "body": "Good to know no issues on your end. I haven’t tested yet. Enabled crow the other day and couldn’t climb with full power so still a bit reluctant to rely on TECS stall code with our crow setting deployed. I know we wouldn’t be ascending but still concerned some. I’ll try as soon as possible though. Will do it when we have some lower winds. ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-28T08:18:01Z",
          "body": "I’m interested in testing either in SITL or flight test or both. Unfortunately I probably cannot get to it until after the 4th of July holiday as I’m out of the office until then.   The flare always and setting a slightly tighter altitude tolerance for the landing pattern are both of interest to us.  I also want to verify no change to landings speeds or other vehicle settings since we don’t use flaps.  ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-28T08:18:53Z",
          "body": "FYI @kjkinney",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-08T20:45:06Z",
          "body": "@Antiheavy Tested? We should merge relatively quickly if this is OK because other PRs relating to flap configuration are coming up (e.g. https://github.com/PX4/Firmware/pull/9858/files).",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-09T15:40:20Z",
          "body": "@philipoe I just returned from vacation today.  I will see if we can make a firmware build with this pulled in to flight test tomorrow.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-11T13:38:55Z",
          "body": "@philipoe We test flew a build with this PR on our fixed wing (elevons+rudder) and didn't notice any negative effects.  I'll post logs later today once we've had a chance to review them in detail.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-11T19:32:40Z",
          "body": "Here is our flight testing log.  It is a short flight with two landing approaches with an abort in-between.  Everything looks nominal as far as I can tell.  We didn't excercise any of the new parameters.  Mostly just wanted to ensure the default settings didn't negatively impact our use case.  Take a look at let me know what you think.  Thanks!\r\n\r\nhttps://review.px4.io/plot_app?log=cb831133-4e76-4be7-806f-facac345cdb9",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-11T22:28:36Z",
          "body": "Looks good/nominal! Thanks for testing! Seems like your airspeed sensor is still a bit off, and i also did not see any \"[Landing] Flaring\" and \"[Landing]: Killing throttle\" messages in your logged messages, but it might be that this is fine (did you see a flare+truttle cut off?) and these are only transmitted via telemetry... So overall good to merge @dagar  ?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:46:30Z",
          "body": "Maybe we should be doing this within TECS entirely? TECS internally already has modes which could be expanded as needed for LANDING. We shouldn't have to be continuously setting TECS parameters outside of normal parameter changes.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:51:26Z",
          "body": "Keep in mind that you might be outside of an actual loiter while still in the SETPOINT_TYPE_LOITER handling. \r\n\r\nWhat do you think about waiting to enter the actual loiter (requiring `_l1_control.circle_mode()` here).",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:54:21Z",
          "body": "Fine for debugging, but can you drop these messages before merge? PX4_INFO isn't even logged.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:58:24Z",
          "body": "This is a copy (extra work), use a const reference instead. In c++ you also don't need the \"struct\".\r\n`struct position_setpoint_s next_sp` -> `const position_setpoint_s& next_sp`",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T15:05:26Z",
          "body": "Looking at how navigator overall works it would be cleaner to move this into a new `MissionBlock::get_altitude_acceptance()` that checks the vehicle type and setpoint triplet. All callers except for one (feasibility) are MissionBlocks.\r\n\r\n`Navigator::get_altitude_acceptance_radius()` could become `Navigator::get_default_altitude_acceptance_radius()` for grabbing the param values.\r\n\r\nThat would also give us a good mechanism for tightening the altitude acceptance during takeoff.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:15:41Z",
          "body": "> Maybe we should be doing this within TECS entirely?\r\n\r\nThat was my thought as well.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:18:06Z",
          "body": "I don't think it is valid to assume that all FW landings are preceded by a loiter.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:18:43Z",
          "body": "With \"modes\" you mean these guys https://github.com/PX4/ecl/blob/1a1106878d6ab1cc48565bef9b25b07d626c5d0b/tecs/tecs.h#L94 ? Yes, this does not contain any LANDING state yet, so that would need to be extended, and i did not want to change @priseborough 's TECS too much here. I agree that if one changes multiple parameters for the landing then TECS should handle this, but i think for a single parameter the current solution would work. ",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:18:56Z",
          "body": "Changed.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:09Z",
          "body": "Changed, must have slipped through somehow...",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:14Z",
          "body": "Changed.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:43Z",
          "body": "Changed, but a bit differently than you proposed: I put everything into the respective `Navigator::get_altitude_acceptance_radius()` and `Navigator::get_default_altitude_acceptance_radius()` functions because the \"sister\" functions (`get_acceptance_radius()` and `get_default_acceptance_radius()` ) are also located in Navigator, and i don't think we should have one of them in MissionBlock and one in Navigator. But you could now easily integrate all take-off altitude acceptance radius related checks into `Navigator::get_altitude_acceptance_radius()`.\r\n\r\nBtw: This current implementation means that for _every_ waypoint type (not only loiter-to-alt) we enter the function that checks whether the next WP is a land WP. I quickly looked through the whole code and think this is fine however. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T09:02:52Z",
          "body": "See reply in my big comment.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "ecl: update submodule",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9685",
    "number": 9685,
    "created_at": "2018-06-15T09:24:54Z",
    "merged": true,
    "merged_at": "2018-06-15T13:53:29Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "contains:\n- https://github.com/PX4/ecl/pull/460\n- https://github.com/PX4/ecl/pull/462\n\nAlso changes a critical RTL message that does not need to be critical to an info.\n\nFixes  #9527",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Precland fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9668",
    "number": 9668,
    "created_at": "2018-06-13T21:36:33Z",
    "merged": true,
    "merged_at": "2018-06-14T03:32:52Z",
    "state": "closed",
    "conversation": {
      "author": "okalachev",
      "body": "This PR addresses two precland-related isses:\n\n1. When the copter switches to the horizontal approach state, the check of landing target pose validity is not fully correct: an old message (when the landing target is seen the last time) can switch the state.\n\n2. When downloading mission with a precision landing waypoint from the copter, the precision land parameter is lost.\n\n@ndepal",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "ndepal",
          "created_at": "2018-06-14T07:53:01Z",
          "body": "Why is this necessary? `_target_pose_updated` is only true if we got a new message in this `on_active()` call. In this case, the timestamp of the message is recent, so `_target_pose_valid` is always true if `_target_pose_updated` is true.\r\n\r\nIt's only possible for `_target_pose_valid` to be true and `_target_pose_updated` false (due to `_param_timeout`), but not the other way around.",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-06-14T12:01:29Z",
          "body": "Unfortunately, no. When testing we have met situations, when the copter sees the landing marker, when not in Precland mode (so Precland's `on_active` is not called). Then, for example, the copter flies from another point to the landing point. And then, \"sees\" the marker (actually just gets and old message).",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "ndepal",
          "created_at": "2018-06-14T12:08:31Z",
          "body": "Ah I see. Thanks for the fix!",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "mhkabir",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Do not set the closest mission item in normal mission mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9646",
    "number": 9646,
    "created_at": "2018-06-12T08:34:45Z",
    "merged": true,
    "merged_at": "2018-06-12T16:11:14Z",
    "state": "closed",
    "conversation": {
      "author": "acfloria",
      "body": "As requested in [#9606](https://github.com/PX4/Firmware/issues/9606).\n\nTested in SITL for normal mission flight and RTL.\n\n@potaito can you confirm that now it works as you expect?",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2018-06-12T09:33:54Z",
          "body": "Tested in HITL and it works as expected:\r\n\r\n![1](https://user-images.githubusercontent.com/3762382/41282367-2ec80694-6e34-11e8-8ed0-8c1ea1e87f1c.png)\r\nTakeoff performed and then created mission.\r\n\r\n----\r\n\r\n![2](https://user-images.githubusercontent.com/3762382/41282359-266e6af6-6e34-11e8-85d3-ea1f04a04698.png)\r\nStarted the mission, flying towards the first waypoint.\r\n\r\n----\r\n\r\n![3](https://user-images.githubusercontent.com/3762382/41282374-30f090a8-6e34-11e8-9d45-73d275d789be.png)\r\nAll waypoints passed in correct order :+1: ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-12T14:55:30Z",
          "body": " - fixes https://github.com/PX4/Firmware/issues/9606",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-12T16:11:20Z",
          "body": "Thanks!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "potaito",
          "created_at": "",
          "body": "LGTM, thanks @acfloria ",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "replace geo _wrap_pi with matrix::wrap_pi",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9630",
    "number": 9630,
    "created_at": "2018-06-09T21:24:21Z",
    "merged": true,
    "merged_at": "2018-06-12T07:00:54Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Requires https://github.com/PX4/Matrix/pull/68 and https://github.com/PX4/ecl/pull/456 to be merged first.",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-10T21:12:37Z",
          "body": "This looks wrong.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-11T00:52:14Z",
          "body": "Good catch, fixed.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Looked good except for the one line. Given how critical these are I would like to have another review pass tomorrow.",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "WIP: HEARTBEAT and commander failsafe handling cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10933",
    "number": 10933,
    "created_at": "2018-11-28T14:51:09Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "For discussion of expanded failsafe handling WRT mavlink HEARTBEAT (https://github.com/PX4/Firmware/pull/10841).\n\n - mavlink update telemetry_status with all HEARTBEAT timestamps\n - let commander decide which HEARTBEATs to use\n - optimizations to avoid unnecessary state and subscribing to all telemetry_status and iridiumsbd instances (saves ~1.5kB of RAM)\n - simplifies convoluted commander data link handling\n\n Related\n - https://github.com/PX4/Firmware/pull/10841\n - https://github.com/PX4/Firmware/pull/10194\n - https://github.com/PX4/Firmware/pull/9473\n - https://github.com/PX4/Firmware/pull/7985",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-11-29T13:02:22Z",
          "body": "@baumanta your commit looks really good. But it's failing for a specific target: http://ci.px4.io:8080/blue/organizations/jenkins/PX4_misc%2FFirmware-compile/detail/pr-heartbeat_failsafes/5/pipeline#step-533-log-407",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-04T10:52:02Z",
          "body": "@dagar I quickly checked, so far no conflict with #10907 😅 ",
          "type": "issue_comment"
        },
        {
          "author": "baumanta",
          "created_at": "2018-12-05T12:51:45Z",
          "body": "@dagar are there any updates on this?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:30:13Z",
          "body": "TODO: double check the iridium behavior  ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-13T14:40:10Z",
          "body": "I'll try to resurrect this and get it in incrementally. \r\nPart 1 - https://github.com/PX4/Firmware/pull/11454",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2019-06-04T11:50:07Z",
          "body": "I guess this is all in now and can be closed?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-06-04T14:16:18Z",
          "body": "Yes, thanks everyone!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:06:24Z",
          "body": "If this came to the commander param list, why not change the suffix to `COM`?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:06:33Z",
          "body": "Same thing here",
          "path": "src/modules/commander/Commander.hpp",
          "position": 12,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:08:57Z",
          "body": "so for an `_obc_datalink_loss`, we need to add new params right?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:12:14Z",
          "body": "@baumanta ",
          "path": "src/modules/commander/Commander.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:12:25Z",
          "body": "They've already effectively been commander params for several releases. The only reason I didn't do the rename is that users will lose existing settings. This is the type of thing we can do for a release with proper migration documentation.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:12:31Z",
          "body": "See previous comment.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 12,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:16:40Z",
          "body": "One more time for clarity, how would you like it to work?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:20:54Z",
          "body": "For example: I have a GCS link and a OBC link. I want the OBC link, if failing, to trigger a failsafe, but if the GCS link fails, I just want it to send a mavlink_log warning me, but not triggering a failsafe. Or, I may want them to both trigger a failsafe, or want that none trigger a failsafe but at least warn me this also applies to the high latency case.\r\n\r\nImagine we have 3 links. I would like to state which ones do trigger failsafes in the case of failure, but want to all of them to tell at least warn me in the case of a failsafe.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:30:01Z",
          "body": "It can make sense to be more atomic and say: OBC triggers a RTL failsafe, while GCS triggers a land failsafe",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:39:08Z",
          "body": "TODO: we need to be careful for the scenario where a single mavlink connection will have multiple HEARTBEATs (eg companion also routing to GCS). I'll make sure that each received HEARTBEAT results in a telemetry_status publication.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-30T15:51:57Z",
          "body": "I'm wondering if we can drop the sysid check entirely now.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:27:29Z",
          "body": "We need to preserve the ability to build px4 without the multicopter controllers. \r\n\r\nOne option is to use the older c param api for MPC_OBS_AVOID, but now that I'm looking at this again I'm wondering if it's needed at all. You could either have an independent set of commander parameters analogous to datalink loss, but specifically for avoidance loss (COM_OBS_LOSS_T), or perhaps have the position controller put something in `position_controller_status` (https://github.com/PX4/Firmware/blob/master/msg/position_controller_status.msg) indicating that an avoidance system is required.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:32:53Z",
          "body": "```suggestion\r\n\r\n```",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "baumanta",
          "created_at": "2018-12-19T12:29:54Z",
          "body": "@dagar I just switched the definition of the parameter from position controller to commander. Now the parameter is called COM_OBS_AVOID. As commander is build anyway for all the boards this should solve our problem. Anyway I think this is the better location for this parameter as the decision on whether to use obstacle avoidance is rather a commander matter then a position controller choice. What do you think, would that be ok for you?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    }
  },
  {
    "title": "[WIP] DO_CHANGE_SPEED work across LOITER, MISSION, RTL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10912",
    "number": 10912,
    "created_at": "2018-11-25T19:04:26Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Opening for further discussion and testing, please do not merge.\n\nTODO:\n - review behaviour wrt VTOL transitions\n - define mission behaviour\n   - debatably, the speed should be set as a property of the current mission\n   - example: setting mission speed, temporarily leaving leaving mission mode, then resuming",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-11-25T19:08:19Z",
          "body": "@sanderux do you have any input here? This might be a good time to review and document your requirements (current and desired).",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-25T19:16:08Z",
          "body": "@superware",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-25T22:50:26Z",
          "body": "A quick pass looks good to me.",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-11-26T16:44:12Z",
          "body": "does this work for setting cruise throttle? (disabled airspeed sensors)",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-11-26T16:47:33Z",
          "body": "our use case for changing speed would be \r\n- from an onboard computer monitoring vehicle behavior and detecting a requirement for more speed\r\n- custom behavior: change flight setting from efficient to performance and back\r\n- custom behavior: Quick RTL / Bird strike avoidance\r\n\r\nSo for us it is not so much a mission setting but a way for external systems (or perhaps in the future through QGC) of defining the vehicles speed.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-07-10T17:37:03Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-10-23T09:12:29Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "superware",
          "created_at": "2019-10-23T10:44:16Z",
          "body": "Hi @julianoes, can you please reopen?",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2019-10-25T11:57:22Z",
          "body": "> Hi @julianoes, can you please reopen?\r\n\r\nIt's still open.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2020-01-24T03:36:30Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-10T17:49:45Z",
          "body": "Closing as stale.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "Landing gear improvement",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10842",
    "number": 10842,
    "created_at": "2018-11-14T11:09:17Z",
    "merged": true,
    "merged_at": "2018-12-10T15:17:24Z",
    "state": "closed",
    "conversation": {
      "author": "MaEtUgR",
      "body": "**Test data / coverage**\nSITL/HITL and field tested ~20 flights in H520 Firmware before cherry-picking.\n\n**Describe problem solved by the proposed pull request**\nControlling the landing gear is tied to the attitude setpoint message which is just misusing an existing message that lead to a lot of problems when implementing landing gear behaviour according to product requirements.\n\n**Describe your preferred solution**\nWe took the time to solve these problems and make it more flexible and want to contribute this architecture.\n\n**Additional context**\nThere were conflicts with #10805. (FYI @bkueng)\n\n---\n\n**State:** I'm still porting commits.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-11-14T17:10:53Z",
          "body": "What do you think about getting landing gear out of control group 0?\r\n\r\n![image](https://user-images.githubusercontent.com/84712/48499335-33204200-e806-11e8-84a4-18b9ac9f231e.png)\r\n\r\nLater that could facilitate handling landing gear entirely outside of the position and attitude controllers.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-14T22:41:51Z",
          "body": "I recall having discussed that and I think that is necessary.",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-15T10:25:05Z",
          "body": "Sure, this is just a **first step** of detaching the landing gear out of the attitude setpoint because it really has nothing to do with the attitude and its controller. These changes were necessary to **solve our nasty dependency issues** because of product customization that lead to a severe maintenance effort to keep **up to date with PX4** and that's why we wanted to contribute. Any further work in this direction is appreciated. The only obstacle I see with removing it from the control group is messing with the IO which usually takes more time but that should not hinder us after all.",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T14:26:21Z",
          "body": "I rebased because there were conflicts in the position controller because of my own pr https://github.com/PX4/Firmware/pull/10831",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-10T14:02:07Z",
          "body": "Rebased without conflicts, any reason this is waiting?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-12-10T14:17:17Z",
          "body": "No, good to go.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-12-04T14:41:32Z",
          "body": "`_gear_switch_old = landing_gear_s::GEAR_KEEP `?",
          "path": "src/lib/FlightTasks/tasks/Manual/FlightTaskManual.hpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-12-04T14:44:03Z",
          "body": "Am I correct with the assumption that the publication of landing-gear is only required for logging?",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T13:18:51Z",
          "body": "No, to detect the transition of the RC **switch** controlling the landing gear (if there is any) like the word `switch` suggests.\r\nIt's states are defined according to: https://github.com/PX4/Firmware/blob/0c60fff6bd0e09db9b4fc716472849978a60516f/msg/manual_control_setpoint.msg#L3-L6",
          "path": "src/lib/FlightTasks/tasks/Manual/FlightTaskManual.hpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T13:24:13Z",
          "body": "~Your curiousity saves lives, good catch 👍 I'll fix this malicious publication.~",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T14:21:52Z",
          "body": "I recalled my changes which were done during the rebase because the attitude controller had conflicts caused by https://github.com/PX4/Firmware/pull/10805. The landing gear field is not in the attitude setpoint anymore and @bkueng 's pattern here https://github.com/PX4/Firmware/pull/10805/files#diff-6e842349b82ef0b37ba6161a6d0f85c3R167 is to publish the attitude setpoint out of the same loop that polls on it (I find that confusing and improvable as well). So to enable landing gear operation in stabilized mode I had to follow the same pattern.\r\n\r\nFor the landing gear this might actually make a lot of sense because in the future the execution of the landing gear message should not be in the attitude controller anymore. And for the attitude I discussed with @Stifael it would make sense that the position controller sends thrust and yaw while the attitude controller converts either the input from the position controller or from the sticks to an attitude setpoint (quaterion) executes and publishes it for logging.",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "Stifael",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "[DO NOT MERGE] introduce vehicle_thrust_setpoint",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10832",
    "number": 10832,
    "created_at": "2018-11-12T20:46:39Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "For discussion only at this point (not complete or tested).\n\nIf this is viable we might be able to drop the virtual attitude setpoints entirely. Then we can lean on thrust setpoints for coordination between position controllers. This should also lead to it being possible to drop virtual actuator controls.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-12T23:17:34Z",
          "body": "Nice! This is going in the right direction. We might want to do this in stages though (with the original PR going in first, then this on top of it).",
          "type": "issue_comment"
        },
        {
          "author": "bresch",
          "created_at": "2018-11-13T13:17:57Z",
          "body": "@dagar We won't be able to drop the virtual attitude setpoints because during the transition of a standard VTOL, since we want pitch and thrust_x from TECS, roll from L1 and thrust_z from the multicopter position controller. Besides that, splitting the thrust setpoints from the attitudes ones is the right way to go :)",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T14:32:06Z",
          "body": "@bresch yes, we'd still need a mechanism to combine orthogonal thrust setpoints (MPC altitude controller). This is one of the reasons I asked about the control allocation idea.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-05T21:06:48Z",
          "body": "Revisit for v1.10.0",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "VTOL rate control improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10819",
    "number": 10819,
    "created_at": "2018-11-08T09:59:50Z",
    "merged": true,
    "merged_at": "2018-11-22T01:32:41Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "Replaces #9190",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-08T10:06:17Z",
          "body": "Not merging just yet!",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T10:43:46Z",
          "body": "@LorenzMeier yes, please don't! It breaks Flight Review :)",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:50:23Z",
          "body": "Once this is good to go I'll squash the commits.",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T14:09:09Z",
          "body": "@PX4/testflights Any chance you can test fly this. It touches multirotor, vtol and fixed wing.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-14T16:34:49Z",
          "body": "@PX4/testflights please try this on all VTOLs, as well as regression testing on MC and FW platforms.",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-11-15T20:06:50Z",
          "body": "I tested this PR on convergence Vtol, it took off well in the mission but did not do the transition, when I aborted the mission the VTOL it fell and crashed. And did not save the log.\r\n\r\n![vtol1](https://user-images.githubusercontent.com/12182176/48578779-6f6ba500-e8cf-11e8-9cfb-3eb29464a8e2.jpg)\r\n![vtol4](https://user-images.githubusercontent.com/12182176/48578781-6f6ba500-e8cf-11e8-8957-ba55a8bcb41b.jpg)\r\n\r\n\r\n\r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-11-15T20:17:36Z",
          "body": "test on pixhawk 1 and crash on stabilize mode\r\nhttps://review.px4.io/plot_app?log=8f5cbf75-cb1f-4fd3-88ed-d18d425c7cfb\r\n\r\non pixhawk v4 pro crash on stabilize mode\r\nhttps://review.px4.io/plot_app?log=014173eb-4156-4828-a97d-492c417f3577",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-15T20:30:14Z",
          "body": "@dannyfpv Hi! Thanks for testing and sorry for the crash. I checked the log and I already found the bug. Unfortunately, there was sign error in throttle in stabilized mode that was introduced during the lasted rebase on master. SITL did not catch that bug because it does not use test stabilized mode.\r\nHowever, in future I suggest to bench test PRs which introduce massive changes like this one does before actually flying the vehicle. In this case you would have had no throttle in stabilized mode.\r\nAnyway, I hope the convergence is not broken too badly...",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2018-11-15T20:40:09Z",
          "body": "Thanks for the feedback @RomanBapst, don't worry about the convergence it fulfilled its duty! Now let's make sure we have tests for stabilized mode, should I open an issue for tracking @dagar or is this covered somewhere already?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-15T20:42:53Z",
          "body": "@mrpollo I was already thinking about this. I think it would not be too hard to use the dronecode SDK in the CI and actually 'simulate' a human flying with a radio controller. That would just be a sluggish controller outputting RC commands. ",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-11-21T22:19:01Z",
          "body": "tested on pixhawk v4 pro, good flights no noticeable issues.\r\nhttps://review.px4.io/plot_app?log=482daec6-d8b5-416f-bb3c-e57782fec3bd\r\nhttps://review.px4.io/plot_app?log=4fc131d3-e215-4188-895c-d59a7161747d",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-22T01:30:28Z",
          "body": "I took another pass and this looks good. Let's merge and keep going.",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2018-11-22T16:33:50Z",
          "body": "Great team work everyone 🎉 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:22:06Z",
          "body": "```suggestion\r\n\t\tif (orb_copy(ORB_ID(vehicle_attitude_setpoint), _att_sp_sub, &_att_sp) == 0) {\r\n```",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:25:57Z",
          "body": "```suggestion\r\n\treturn _parameters.airspeed_trim / math::max(airspeed,  _parameters.airspeed_min);\r\n```",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:32:28Z",
          "body": "Why is this removed?",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:37:38Z",
          "body": "Can you add a `using namespace matrix` on top? Should become more readable w/o `matrix::` everywhere.",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:43:06Z",
          "body": "Is x here correct? Further down it's using z.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T12:46:12Z",
          "body": "Note to myself: change to _thrust_sp",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:08:58Z",
          "body": "@bkueng Mistake during rebase",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:10:25Z",
          "body": "@bkueng Sure, good idea as it's not a header file.",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:44:51Z",
          "body": "Fixed",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:44:59Z",
          "body": "Done",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:45:25Z",
          "body": "Fixed, for now use thrust_z as offboard is used for multicopters",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:45:33Z",
          "body": "Fixed",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-08T16:01:21Z",
          "body": "It seems obvious that this is only done in fixed wing mode but where is that decision?",
          "path": "src/modules/navigator/gpsfailure.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-08T16:11:59Z",
          "body": "I strongly suggest that we use arrays to store vecotrs inside uORB messages like here:\r\nhttps://github.com/PX4/Firmware/blob/master/msg/vehicle_local_position_setpoint.msg#L20",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-10T15:53:04Z",
          "body": "@MaEtUgR The gpsfailure class is only used for fixed wing. It's executed if the navigation state is set to NAVIGATION_STATE_AUTO_LANDGPSFAIL. If you go look into the commander you'll see that it's only used for fixed wing.",
          "path": "src/modules/navigator/gpsfailure.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-10T16:16:02Z",
          "body": "@MaEtUgR Done!",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-10T18:21:22Z",
          "body": "@RomanBapst I believe this is the issue. Clang doesn't let you use static constexpr with these template functions.",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T01:32:30Z",
          "body": "@RomanBapst I believe this change was done intentionally ~~for flaps deployment~~ to fix rudder stuttering in manual mode with FW_RLL_TO_YAW_FF. I'll track down the original so we can make sure the intended fix is preserved.",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T01:33:25Z",
          "body": "https://github.com/PX4/Firmware/pull/9607",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-20T16:40:40Z",
          "body": "Perfect thanks!",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Looks good generally. Flight Review is fine too, it's using the thrust from actuator_controls.\r\n\r\nIs the uavcan submodule update on purpose?",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "The multicopter part looks good, the fw, vtol as well for the part that I can still follow.",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "This reverts https://github.com/PX4/Firmware/pull/9607",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Format strings",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10773",
    "number": 10773,
    "created_at": "2018-10-27T09:00:27Z",
    "merged": true,
    "merged_at": "2018-10-27T10:44:52Z",
    "state": "closed",
    "conversation": {
      "author": "m-ou-se",
      "body": "In #10766, I forgot a `%s` in a format string. Surprisingly to me, the compiler didn't warn me.\n\nThis PR enables GCC's `__attribute__((format))` which will make it validate the format strings, to prevent this kind of bugs.\n\nBy enabling it, I found (and fixed) many simliar bugs already in the code:\n\n- A `%d` for a pointer (replaced it by `%p`)\n- 2 cases of `%d` for a `ssize_t` (replaced it by `%zi`)\n- 18 cases of `%d`, `%u` or `%i` for a `size_t` (replaced it by `%zu`)\n- An unused formatting argument (removed it)\n- A missing `%d` (added it)\n- 2 cases of `%llu` for a `uint64_t` (replaced it by `\"%\" PRIu64`)\n- 6 cases of giving a string directly as format string, which would break if the string would contain any `%` signs. (replaced it by `(\"%s\", string)`)",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T09:11:24Z",
          "body": "One more required (uncovered by this PR): ```\r\nsrc/modules/uORB/CMakeFiles/modules__uORB.dir/uORBDeviceMaster.cpp.obj -c ../../src/modules/uORB/uORBDeviceMaster.cpp\r\nIn file included from ../../src/platforms/px4_defines.h:42:0,\r\n                 from ../../src/drivers/drv_orb_dev.h:43,\r\n                 from ../../src/modules/uORB/uORBCommon.hpp:37,\r\n                 from ../../src/modules/uORB/uORBDeviceMaster.hpp:38,\r\n                 from ../../src/modules/uORB/uORBDeviceMaster.cpp:34:\r\n../../src/modules/uORB/uORBDeviceMaster.cpp: In member function 'void uORB::DeviceMaster::showTop(char**, int)':\r\n../../src/platforms/px4_log.h:282:40: error: unknown conversion type character '-' in format [-Werror=format=]\r\n   px4_log_raw(level, fmt, ##__VA_ARGS__); \\\r\n                                        ^\r\n../../src/platforms/px4_log.h:429:33: note: in expansion of macro '__px4_log_raw'\r\n #define PX4_INFO_RAW(FMT, ...)  __px4_log_raw(_PX4_LOG_LEVEL_INFO, FMT, ##__VA_ARGS__)\r\n                                 ^~~~~~~~~~~~~\r\n../../src/modules/uORB/uORBDeviceMaster.cpp:371:4: note: in expansion of macro 'PX4_INFO_RAW'\r\n    PX4_INFO_RAW(CLEAR_LINE \"%*-s INST #SUB #MSG #LOST #QSIZE\\n\", (int)max_topic_name_length - 2, \"TOPIC NAME\");\r\n    ^~~~~~~~~~~~\r\ncompilation terminated due to -Wfatal-errors.\r\n```\r\n\r\nSee CI output for more. Thanks!",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:15:38Z",
          "body": "Interesting. That file uses `%*-s`, but `#ifdef`ed to only do that on NuttX. On other platforms, it uses `%*s`.\r\n\r\n`%*-s`, however, is invalid. I guess `%-*s` was meant? My best guess is that NuttX accepts this invalid specifier too, but other platforms don't, and that's why the `#ifdef` is there to begin with. If this is the case, we can just remove the `#ifdef`s completely, and use `%-*s`. I'm now trying to find the history of when those `#ifdef`s were added to check if there's another reason i'm missing.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:20:09Z",
          "body": "Found the commit: f601428e821bcc781e1ae3a858035fc804e2027a adds those `#ifdef __PX4_NUTTX`'s, but the commit is rather large, and the message doesn't say anything specific about the format specifier:\r\n\r\n> add ifdef's where necessary to mitigate diffs between nuttx & posix\r\n\r\nI'll just assume `%-*s` was meant, and remove the `#ifdef __PX4_NUTTX` there.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:28:17Z",
          "body": "Looks like there are many more of them, which are not found by a simple build on/for Linux.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T09:35:10Z",
          "body": "```make px4fmu-v5_default``` will likely uncover many of them. But I don't want to put that burden on you - we can distribute the effort. If you want to continue using that build command feel free to patch all of them.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:55:50Z",
          "body": "That target doesn't build on my computer right now, so I'll just stay on the Posix target. Do you want to fix it for all other platforms before merging this? Or should we merge the fixes, but not the `__attribute__` yet? Or should we only enable the attribute, or enable/disable the `-Wformat` warning, on some specific targets?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T10:30:03Z",
          "body": "The fmuv5 target is building successfully on my machine with your latest commit - I haven't checked out the attributes you set in detail, but you haven't disabled the checks, have you?",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T10:31:49Z",
          "body": "Nothing disabled. Just fixed a few more of them. Maybe those were the last?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T10:35:38Z",
          "body": "This is looking pretty good now.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Awesome, thanks for these fixes!",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "fix reposition: set acceptance radius",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10760",
    "number": 10760,
    "created_at": "2018-10-25T15:02:47Z",
    "merged": true,
    "merged_at": "2018-10-25T15:05:28Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "Previously the acceptance radius was 0, so the FlightTaskAutoLine was\r\nrandomly changing yaw and sometimes going into a random direction (see  #10757).\r\n\r\nThere is still something else wrong in there, but this patch avoids the reposition bug. I see 2 problems:\r\n- The FlightTaskAuto contains states and resets certain attributes when switching (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L468). In case of the reposition, the switches were random due to numerical inaccuracies. If possible we should avoid these states.\r\n- FlightTaskAutoLine uses _target and _prev_wp to determine the velocity direction (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/AutoLine/FlightTaskAutoLine.cpp#L79). However this might not reflect where the vehicle currently is (I guess the states are meant to prevent this, but it doesn't seem to work).\r\n\r\nThe combination of all these led to the unexpected behavior.\r\n\r\nFixes #10757\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "Mission Log",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10738",
    "number": 10738,
    "created_at": "2018-10-22T11:09:20Z",
    "merged": true,
    "merged_at": "2018-10-26T06:02:43Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "This adds a new log file to the SD card configurable via `SDLOG_MISSION` parameter.\n\n### Use-cases\nIt's also a ULog file, but only contains minimal information for the following use-cases:\n- geotagging/survey (more generally: extract data collected by the pixhawk during a mission and needed for post-processing)\n- cloud upload & statistics: keeping track of where and how long a vehicle has flown, and if there were problems.\n- regulation: keeping a small log to show where a drone was flown, what failures happened etc.\n\nIt is stored in another directory (`mission_log`) to keep the logs separate from the normal flight logs.\n\n@dogmaphobic This will need an interface update on the QGC side, and maybe changes/extensions to the log download. I have not looked into that yet.\n\n### Implementation\n- the general structure of the logger is the same, but the mission logs use a separate independent write buffer.\n- optimization to reduce the header size: now only the message formats are written for messages that are actually logged. Reduces the header size by about 13KB for a normal log.\n- due to other optimizations, RAM usage does not increase if the mission log is disabled.\n  If enabled, only the additional buffer of 300 bytes is required.\n\n### Testing\nI ran a stress-test on a low-quality SD card for 1h:30min with 90KB/s normal logging rate and enabled mission log with 5Hz camera capture publication. There were no drops for the mission log, and the maximum used buffer was 200 bytes, so 300 bytes buffer size will be enough.\nCPU load minimally increased from 5.6% + 1.7% to 5.7% + 1.8% for the main and writer threads.\n\nFixes https://github.com/PX4/Firmware/issues/10189.\n\nI enabled the mission log by default so that we get it field-tested. But it does not have to be enabled later on.",
      "issue_comments": [
        {
          "author": "hamishwillee",
          "created_at": "2018-10-23T01:19:35Z",
          "body": "Looks cool. I commented on the parameter doc.\r\n\r\nCan we also update the user guide with this and also cover the other SDLOG_ params? Proposal is that this should be added in user guide https://docs.px4.io/en/getting_started/flight_reporting.html\r\n- Add a section on \"Configuring logging\" covering all the params\r\n- Explain which logs can be used for what - for example, is Mission Log useful in Flight Reporting?\r\n\r\nI thought it would be good to add a link to the geotagging log in geotagging docs, but we don't have any. Do we need a page that covers what we offer in this area? If so, what would such a page offer?\r\n\r\nLast of all, I looked at the devguide logging topic https://dev.px4.io/en/log/logging.html\r\nMy guess is that the logger is set up with all the rates information etc when the board is set up - and the user guide people don't need to know about this?\r\nShould we perhaps just add a note in that logging topic about the SDLOG parameters. ",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-23T10:12:13Z",
          "body": "> Can we also update the user guide with this and also cover the other SDLOG_ params? Proposal is that this should be added in user guide https://docs.px4.io/en/getting_started/flight_reporting.html\r\n\r\nOk.\r\n\r\n> Explain which logs can be used for what - for example, is Mission Log useful in Flight Reporting?\r\n\r\nNo.\r\n\r\n> I thought it would be good to add a link to the geotagging log in geotagging docs, but we don't have any. Do we need a page that covers what we offer in this area? If so, what would such a page offer?\r\n\r\nYes we should have that. But I don't know of anything that exists already either.\r\n\r\n> My guess is that the logger is set up with all the rates information etc when the board is set up - and the user guide people don't need to know about this?\r\n\r\nYou generally don't have to change anything, since the defaults are good for general log analysis. Special use-cases that differ from that include:\r\n- ekf2 replay\r\n- enabling the high-rate logging profile for PID & filter tuning\r\n- if you want your own set of logged topics.\r\n- thermal temperature calibration",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-10-24T01:44:58Z",
          "body": "Thanks @bkueng . I'll look into updates to those docs once this is merged.",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-24T07:42:21Z",
          "body": "CI fails:\r\n> remote file operation failed: /tmp/jenkins/workspace/irmware-compile_mission_log-VMOKXZB2XWPNUMKC2VMXOFD4RIUCZ46BF3YVCQJRPP6QGICMO3JA@tmp/durable-cb023d6c at hudson.remoting.Channel@61b65624:ec2_docker_slave (i-0001bbab6136cffbf): java.nio.file.FileSystemException: /tmp/jenkins/workspace/irmware-compile_mission_log-VMOKXZB2XWPNUMKC2VMXOFD4RIUCZ46BF3YVCQJRPP6QGICMO3JA@tmp/durable-cb023d6c: No space left on device\r\n\r\n@dagar can you look into it?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T14:30:12Z",
          "body": "@bkueng we had a zombie ec2 slave. I'll restart these jobs now.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:36:02Z",
          "body": "~~Some may want vehicle_attitude as well. Pix4d can optionally use roll, pitch, yaw.~~\r\n\r\nNevermind, just reviewed the contents of camera_capture.",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-10-25T20:12:19Z",
          "body": "I tested in pixhawk 4 and pixhawk 4 mini in both created a folder with the name of mission_log.\r\npixhawk 4 log\r\nhttps://review.px4.io/plot_app?log=eaed8008-87c9-40a3-b209-d23c50208f5f\r\npixhawk 4 mini log\r\nhttps://review.px4.io/plot_app?log=f074290a-4f59-4cff-9a05-23adf99b21ef",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-10-26T03:53:16Z",
          "body": "@bkueng OK, docs for this waiting in https://github.com/PX4/px4_user_guide/pull/372 . Note that they are only peripherally about the mission log - without a topic about something that uses it (e.g. geofencing) there isn't much to say about it yet. So consider this \"a start\".",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "hamishwillee",
          "created_at": "2018-10-23T01:00:59Z",
          "body": "HOw about:\r\n\r\n```\r\n/**\r\n * Mission Log\r\n *\r\n * If enabled, a small additional \"mission\" log file will be written to the SD card.\r\n * The log contains just those messages that are useful for tasks like \r\n * generating flight statistics and geotagging.\r\n *\r\n * The different modes can be used to further reduce the logged data\r\n * (and thus the log file size). For example, choose geotagging mode to\r\n * only log data required for geotagging.\r\n\r\n * Note that the normal/full log is still created, and contains all\r\n * the data in the mission log (and more).\r\n */\r\n```\r\n\r\nThe `@value 1 Complete` was also a little confusing to me when I first saw it, because I thought maybe this meant \"full log\", rather than just \"Complete mission log\".\r\nMaybe it is ok. Alternative: \r\n```\r\n * @value 0 Disabled\r\n * @value 1 All mission messages\r\n * @value 2 Geotagging mission messages\r\n```",
          "path": "src/modules/logger/params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-23T10:11:44Z",
          "body": "Thanks, updated accordingly.",
          "path": "src/modules/logger/params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:27:09Z",
          "body": "Picky minor side note - we should have some basic float literal guidelines. Inconsistent use of `0.f`, `0.0f`, `0.0F` throughout the codebase should be an easy eyesore to avoid.",
          "path": "src/modules/navigator/navigator.h",
          "position": 25,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:31:50Z",
          "body": "vehicle_status is published at 1Hz or when something changes.",
          "path": "src/modules/logger/logger.cpp",
          "position": 167,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-25T07:26:41Z",
          "body": "I saw that, but I wanted to be explicit/conservative here in case something changes in commander.",
          "path": "src/modules/logger/logger.cpp",
          "position": 167,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-25T07:26:43Z",
          "body": "Yeah. I have no problem overlooking those though.",
          "path": "src/modules/navigator/navigator.h",
          "position": 25,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  },
  {
    "title": "fixes cherry-picked to stable",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10726",
    "number": 10726,
    "created_at": "2018-10-19T14:21:59Z",
    "merged": true,
    "merged_at": "2018-10-20T00:11:15Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "https://github.com/PX4/Firmware/issues/10064\n\n@PX4/testflights please test this pull request, it will become the v1.8.1 release.",
      "issue_comments": [
        {
          "author": "Avysuarez",
          "created_at": "2018-10-19T18:45:08Z",
          "body": "**> Some flights with pixhawk 4 mini (v5)** \r\n\r\nGood flight, but in altitude mode their was a delay in the throttle to rise.\r\nhttps://review.px4.io/plot_app?log=d511ed58-1d33-4177-bfe1-76acb8686c44\r\nhttps://review.px4.io/plot_app?log=8902f3b5-a550-46ce-89a2-77d4d082a12b\r\nhttps://review.px4.io/plot_app?log=61bfd603-50d1-4e8e-af2b-3c42d9116e21\r\n\r\n**> Some flights with pixhawk 4 (v5)**\r\n\r\nGood flight, no issues.\r\nhttps://review.px4.io/plot_app?log=49b0015c-92f3-4998-b606-b3acd1f7c277\r\nhttps://review.px4.io/plot_app?log=ae2fa213-b0ad-4ff8-acd6-a2c040fb187e\r\nhttps://review.px4.io/plot_app?log=05643504-de97-47ae-86ac-42f148358866\r\n\r\n### **Some flights with pixhawk 2.1 (v3)**\r\nGood flight, no issues\r\nhttps://review.px4.io/plot_app?log=7c160989-2153-44ea-a333-e168a1fbe9eb\r\nhttps://review.px4.io/plot_app?log=2d2d2700-104f-46e4-9591-1891b83fd5e7\r\n\r\n**Some flights with Pixracer (v4)**\r\nGood flight, no issues.\r\nhttps://review.px4.io/plot_app?log=0325ff4e-4176-4a2e-a536-f1a5d7a8f5bc\r\nhttps://review.px4.io/plot_app?log=0ad44079-a441-40be-bce5-76b473bb248b\r\nhttps://review.px4.io/plot_app?log=961df6e1-7354-423b-8a88-f5af71c6c4d0",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-20T00:11:05Z",
          "body": "Thanks for the summary @Avysuarez. These look consistent with v1.8.0 stable, which still needs a few more commits for full pixhawk 4 mini support.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    }
  },
  {
    "title": "ekf2: increase min value of MAG_YAWLIM",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10721",
    "number": 10721,
    "created_at": "2018-10-18T15:42:35Z",
    "merged": true,
    "merged_at": "2018-10-22T13:26:07Z",
    "state": "closed",
    "conversation": {
      "author": "CarlOlsson",
      "body": "- Some fixed wing platforms require a higher value of EKF2_MAG_YAWLIM in order not to constantly switch mag fusion mode during straight lines in gusty weather. [Relevant commit](https://github.com/PX4/Firmware/commit/1cdfaaf2e19d1a8fb988679d968c68ae0b0d1742)\n- Also fixed some typos",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-10-18T16:53:40Z",
          "body": "Just a personal preference? I've added some other perf counters with spaces in the name, but don't really care either way.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "CarlOlsson",
          "created_at": "2018-10-18T18:26:12Z",
          "body": "I was doing some tests and noticed that all others had underscores so thought it was inconsistent. But if that is not the case, yes I would prefer underscores ",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    }
  }
]