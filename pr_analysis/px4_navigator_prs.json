[
  {
    "title": "Navigator RTL: run find_RTL_destination() only on_inactive",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21782",
    "number": 21782,
    "created_at": "2023-06-30T10:13:08Z",
    "merged": true,
    "merged_at": "2023-07-04T07:36:22Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "\r\n### Solved Problem\r\nRTL::find_RTL_destination() is called also when the RTL has already started, and can override the set _destination etc. I don't think that's desired.\r\n\r\nThis was introduced through a refactor commit: https://github.com/PX4/PX4-Autopilot/pull/21208/commits/2bff49475b504b29eba8fb5cf1cb65400ea80482\r\n\r\n### Solution\r\nRemove it again.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: RTL: do not edit RTL destination once RTL is started\r\n```\r\n\r\n\r\n### Test coverage\r\n- Unit/integration test: ...\r\n- Simulation/hardware testing logs: https://review.px4.io/\r\n\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "I assume this is only there such that active and inactive are the same.\r\nThe `_destination_check_time` gets reset now even if the digestion does not change. That's not a problem in my eyes. When you switch out of RTL and in again within less than a second then the old destination stays. Maybe that's even a feature. It could be named `_slow_rate_timestamp` or so.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR prevents RTL::find_RTL_destination() from running after RTL has already started, which could overwrite the active RTL destination and produce incorrect runtime behavior. The change restores the intended state management (only compute destination when inactive) and therefore fixes a logic bug introduced in a prior refactor."
  },
  {
    "title": "Navigator: loiter: remove unnecessary _loiter_pos_set",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21776",
    "number": 21776,
    "created_at": "2023-06-29T12:50:08Z",
    "merged": true,
    "merged_at": "2023-06-30T13:40:21Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nWhile working on https://github.com/PX4/PX4-Autopilot/pull/21775 I noticed this seemingly unnecessary class variable `_loiter_pos_set`, that was set to false in `on_inactive()` or in `on_active`, and then though only ever checked in `on_activation` (through `set_loiter_position()`). I don't see how it could be false when entering on_activation(), and thus can just be removed, or am I missing something?\r\n\r\n### Solution\r\nRemove it!\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nRefactor: remove unnecessary variable\r\n```\r\n\r\n### Test coverage\r\nBit of SITL testing.\r\n\r\n",
      "issue_comments": [
        {
          "author": "junwoo091400",
          "created_at": "2023-06-30T14:39:16Z",
          "body": "![image](https://github.com/PX4/PX4-Autopilot/assets/23277211/50c94e3d-b230-4dd2-946f-cea632b8088c)\r\n\r\nIdk why but the merge commit in main branch itself doesn't show these build failures, any clue why in this PR page itself it shows so many build errors? @MaEtUgR ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "MaEtUgR",
          "created_at": "2023-06-30T12:03:23Z",
          "body": "```suggestion\r\n```",
          "path": "src/modules/navigator/loiter.h",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "It was introduced here: https://github.com/PX4/PX4-Autopilot/commit/8960ab3402a87b182d17ab1b3cb165115e0f4bad\r\nBut I cannot possibly understand what for. Maybe an unfinished thought about setting the loiter position once armed when already being in hold mode but I'm pretty sure it never worked correctly since as you mention the loiter point is never set again once hold mode is engaged 🤷‍♂️\r\n\r\nMaybe a draft implementation contained a second call to `set_loiter_position()` and that's where it had an effect.\r\n\r\nI also did some tests and I cannot find a case to enter the loiter's `on_activation()` with the flag true.",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR removes a seemingly dead class variable that was never meaningfully used in a way that changed behavior. Review comments and tests indicate the flag could never be true on entry to on_activation(), so the change is a refactor/cleanup rather than a fix for an incorrect program logic."
  },
  {
    "title": "Navigator: Loiter: always establish new Loiter with center at current position",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21775",
    "number": 21775,
    "created_at": "2023-06-29T12:43:22Z",
    "merged": true,
    "merged_at": "2023-07-04T07:35:41Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nhttps://github.com/PX4/PX4-Autopilot/issues/21702\r\n\r\nVehicle keeps flying towards Loiter waypoint if Hold mode is selected. In the past we within Navigator set the type to POSITION when far away from a Loiter waypoint, and then only to LOITER when really on established loiter, but this distinction is now no longer part of Navigator and the FW position controller handles it.\r\n\r\n### Solution\r\nWhen switching into Hold mode establish a Loiter around current position, even if we were before already loitering (eg in Mission mode). This results in the same behavior when switching into Hold/Loiter mode directly (either through RC switch or in the flight mode selection in QGC) or through the \"Hold\" button in QGC (which sends a DO_REPOSITION with the fields at the current position). \r\n\r\nIn this screen recording you see the behavior prior and after this PR.\r\nhttps://github.com/PX4/PX4-Autopilot/assets/26798987/9079b575-77fc-40a2-be54-b3c11816cca3\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Fixed-wing: Always establish loiter around current position when switching into Hold mode\r\n```\r\n\r\n\r\n### Alternatives\r\nFix detection on whether we're currently on an established loiter, and in that case don't loiter around current position but keep established loiter. Personally I though prefer to stick to Hold = Loiter around current position always. Imagine being on a huge loiter. If the vehicle then keeps following it it's hardly anymore \"Holding position\". \r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-06-30T18:26:40Z",
          "body": "> But while testing that I found that when I press pause in QGC it actually flies to the next waypoint still and stops there. The code changed it here not called at all in this case probably because of the reposition command like you wrote.\r\n\r\nWhich QGC version did you test with? I couldn't reproduce with mine (v4.2.6 from this March). But yes, like you said not affected by this PR.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "Makes sense to me.\r\nI tested and with the multirotor I could not get it to not stop when just changing to hold mode also before.\r\n\r\nBut while testing that I found that when I press pause in QGC it actually flies to the next waypoint still and stops there. The code changed it here not called at all in this case probably because of the reposition command like you wrote.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes incorrect behavioral logic when entering Hold/Loiter: the vehicle would continue toward a previously set loiter waypoint instead of holding at the current position. Establishing a new loiter centered on the current position on mode switch corrects that improper state/behavior transition, so this is a logic bug fix."
  },
  {
    "title": "Some parameter cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21736",
    "number": 21736,
    "created_at": "2023-06-19T10:13:47Z",
    "merged": true,
    "merged_at": "2023-07-17T08:35:03Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nSafes a bit of flash and reduces entropy by removing two params that aren't really required anymore. \r\n\r\n### Solution\r\n\r\n### Changelog Entry\r\n\r\n```\r\nRemove COM_ARM_ARSP_EN and VT_B_DEC_FF params, plus shorten parameter descriptions\r\n```\r\n\r\n",
      "issue_comments": [
        {
          "author": "DronecodeBot",
          "created_at": "2024-07-25T00:45:43Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-v1-15-public-changes-what-needs-docs/39850/1\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR is a cleanup that removes two parameters and shortens descriptions to save flash/entropy. The description and comments indicate it removes unused/obsolete params rather than correcting incorrect conditionals, state transitions, or algorithms, so it does not address a logic error in the code."
  },
  {
    "title": "Navigator: Resume mission with last flight speed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21714",
    "number": 21714,
    "created_at": "2023-06-12T16:34:18Z",
    "merged": true,
    "merged_at": "2023-08-08T11:22:05Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Based on https://github.com/PX4/PX4-Autopilot/pull/21710\r\n\r\n### Solved Problem\r\nOn resuming a mission, the flight speed was reset to the vehicle default. Especially for surveys this is not acceptable. \r\n\r\n### Solution\r\nFurther extend the ideas from https://github.com/PX4/PX4-Autopilot/pull/21710: some mission items contain not momentary setpoints (like go to point A), but instead contain settings that are then relevant for the whole mission (or until over-turned by a negating command). \r\nDO_CHANGE_SPEED items belong to the same category as eg camera settings: you want to re-apply them when resuming a mission. \r\n\r\nI've further removed the separated mc/fw stored flight speeds, as it's only ever needed to store the speed of the current mode we're in, and we reset it during VTOL transitions. \r\n\r\n### Changelog Entry\r\n\r\n```\r\nFeature: Resume mission with flight speed from previous mission items\r\nDocumentation: Need to clarify page ...\r\n```\r\n\r\n### Alternatives\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "DronecodeBot",
          "created_at": "2023-06-14T09:43:32Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/set-mission-speed-being-ignored-upon-starting-auto-flight/32705/2\n",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-06-23T12:20:00Z",
          "body": "will likely need this in before the beaglebone is passing https://github.com/PX4/PX4-Autopilot/pull/21749",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-07-17T13:57:40Z",
          "body": "[Removed some speed handling logic from Navigator,](https://github.com/PX4/PX4-Autopilot/pull/21714/commits/0b18bd59a46268574460aa9b60f0e13cea5aa36e) and then rebased and force pushed. @tstastny would be good if you could make yourself a picture here and comment if you agree with the general direction of it (removing speed logic from Navigator). ",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2023-08-09T04:56:52Z",
          "body": "I think it is an excellent feature to start from the previous setpoint. Can you update the docs @sfuhrer ? \r\n\r\nI was thinking perhaps a very short section on pausing and resuming the mission in https://docs.px4.io/main/en/flight_modes/mission.html#mission-mode. Make it clear this applies to all frames.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "tstastny",
          "created_at": "2023-06-23T12:09:34Z",
          "body": "if this is just about speed commands, shouldnt we just look here for the exact NAV_CMD corresponding to a DO_CHANGE_SPEED?\r\n\r\nAlso - why are we sending the command again instead of just applying the properties? (sorry im a bit out of the loop on all this)",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-06-23T12:10:23Z",
          "body": "i dont really care either way - but what's the reason for keeping these lines at all if they are commented out?",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-06-23T12:18:45Z",
          "body": "so this one\r\n1. updates to the latest potential speed change ONLY by the mission item iteration\r\n2. and then sends the vehicle command such that\r\n3. `cruising_speed_sp_update()` picks up that command when it checks for do set speed commands? (where it would also pick up any operator freeform do set speed commands?)\r\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-23T14:48:54Z",
          "body": "No reason, those are left overs from debugging, will remove!",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-23T14:58:44Z",
          "body": "> if this is just about speed commands, shouldnt we just look here for the exact NAV_CMD corresponding to a DO_CHANGE_SPEED?\r\n\r\ngood point, changed it to do so.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-23T15:22:42Z",
          "body": ">ONLY by the mission item iteration\r\nCan you expand what you mean?\r\n\r\nBut yes otherwise that's what happens. Note that also the fixed-wing position controller and the multicopter flight mode manager listen to VEHICLE_CMD_DO_CHANGE_SPEED and execute it independently of `cruising_speed_sp_update()` (which is only run in Mission, but not in eg Loiter). \r\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-23T15:26:28Z",
          "body": "Maybe we could even remove `cruising_speed_sp_update()`? It's a fundamental question if the speed setpoint should be part of the position setpoint or if it's rather an independent system setting.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-07-17T13:52:17Z",
          "body": "Removed it in https://github.com/PX4/PX4-Autopilot/pull/21714/commits/0b18bd59a46268574460aa9b60f0e13cea5aa36e. I feel like we should rather de-couple path handling (through the position setpoints) and speed setpoints (independent of the path) for now.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-07-17T13:54:29Z",
          "body": ">Also - why are we sending the command again instead of just applying the properties? (sorry im a bit out of the loop on all this)\r\n\r\nBecause the speed setpoint is handled by the Navigator but by the Position controllers (FW Pos and MPC). See https://github.com/PX4/PX4-Autopilot/pull/19407. So Navigator has to re-publish the command, and the position controllers can take it up and execute the change.\r\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "tstastny",
          "created_at": "",
          "body": "I left some questions, just because navigator is quite nebulous to me. But otherwise great that we are reducing complexity where possible.",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "Addressed two of your comments with new commits @tstastny ",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "tstastny",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error where resuming a mission reset the flight speed to the vehicle default instead of preserving the last DO_CHANGE_SPEED setting. The change makes DO_CHANGE_SPEED a persistent mission-level setting applied on resume (and removes redundant per-mode stored speeds), correcting incorrect state restoration and unintended behavior."
  },
  {
    "title": "Navigator Mission: Improve mission resume",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21710",
    "number": 21710,
    "created_at": "2023-06-09T15:07:09Z",
    "merged": true,
    "merged_at": "2023-06-20T12:38:04Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Replaces https://github.com/PX4/PX4-Autopilot/pull/21643. I've tried to clean up the logic a bit and make it less entangled.\r\n\r\n### Solved Problem\r\nSurvey mission contain, beside the position items, contain items for gimbal config, camera mode config, and camera trigger. When the execution of a mission is stopped, we want also to stop the camera from taking pictures and move the gimbal back to neutral. Upon resuming the mission though, we have to re-configure gimbal and camera and start the triggering once back on the mission path.\r\n\r\n### Solution\r\nStore (cache) all gimbal/camera/trigger mission items and replay them on resuming the mission. In detail:\r\n- `on_inactivation() `store the currently active index as `_inactivation_index`\r\n- `on_activation()`, store all gimbal/camera/trigger items up to the currently active index and reset the mission to the previous. Also set flag (`_align_heading_necessary`) that a yaw alignment is required upon reaching this waypoint (we want to only start triggering once yaw is correctly aligned with next WP).\r\n- `on_active()`\r\n  - if `_align_heading_necessary` is set and mission item is reached, update current item with yaw field and force it to accept that one before starting the trigger.\r\n  - read the gimbal and camera mode command items from cache, thus making the gimbal move to the right orientation and setting the right camera mode\r\n  - read the trigger commands once the previous waypoint incl. yaw alignment is accepted\r\n\r\nFurther:\r\n- reset cached items if mission is updated\r\n- reset mission on disarmed only if we reached the last mission item, otherwise keep\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: Improve mission resume (e.g. replay gimbal and camera commands of a survey)\r\nDocumentation: Need to clarify page\r\n```\r\n\r\n### Alternatives\r\nIt would be nice to not resume the mission from the previous mission item but from the actual lat/lon position where the mission was interrupted. \r\n\r\n### Test coverage\r\nSITL tested.\r\n\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:35:14Z",
          "body": "@sfuhrer LGTM. I hard a hard time understanding how the mission item is set when resuming the survey without calling `set_mission_items` but then I realized that `set_current_mission_index` does it under the hood :-p",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-06-18T16:46:37Z",
          "body": "@sfuhrer Flash overflow :-(",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-19T09:11:53Z",
          "body": "> @sfuhrer Flash overflow :-(\r\n\r\nv4_test indeed is at 100.00%..in an effort to bring it slightly down I've removed some rather unnecessary params and made some other param descriptions more compact, let's see if that's enough. ",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-19T10:05:39Z",
          "body": "> > @sfuhrer Flash overflow :-(\r\n> \r\n> v4_test indeed is at 100.00%..in an effort to bring it slightly down I've removed some rather unnecessary params and made some other param descriptions more compact, let's see if that's enough.\r\n\r\nThat wasn't enough. I've proposed to remove the gyro FFT instead: https://github.com/PX4/PX4-Autopilot/pull/20811",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:22:23Z",
          "body": "```suggestion\r\n\t\t// add yaw alignment requirement on the current mission item\r\n```",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:29:45Z",
          "body": "@sfuhrer Can you make a comment why this is necessary here?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:31:17Z",
          "body": "@sfuhrer Can these functions be made const?",
          "path": "src/modules/navigator/mission.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:32:02Z",
          "body": "```suggestion\r\n\tint _inactivation_index{-1}; // index of mission item at which the mission was paused. Used to resume survey missions at previous waypoint to not lose images.\r\n```",
          "path": "src/modules/navigator/mission.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-06-16T06:41:08Z",
          "body": "@sfuhrer I am trying to think about a stupid corner case. What if the user sets the current mission index to the resume index manually while the vehicle is paused. Then he engages RTL and cancels RTL. Then he resumes the mission.\r\nThe `_mission_item` would have been overriden by RTL (shared item) and `_current_mission_index` would be equal to `resume_index`in which case `set_current_mission_index` does an early return. Is that a potential corner case where the mission would fly to the RTL item?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 50,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-16T09:43:34Z",
          "body": "Well I was actually wanting to ask you the exact same question :sweat_smile: . I actually don't see where it comes from. Reverse mission is only something that's supported in RTL, no? And there we don't care about mission resume camera logic..\r\nRemove it?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-16T09:57:26Z",
          "body": "certainly, done",
          "path": "src/modules/navigator/mission.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-16T10:05:12Z",
          "body": "removed it.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-06-16T10:20:19Z",
          "body": "Yes you're right, but it seems that this behavior is already like that without this PR.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 50,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "Added comments in the code",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes incorrect mission-resume behavior (a logic error) by caching and replaying gimbal/camera/trigger mission items and ensuring proper yaw alignment and state transitions on resume. The changes address improper state handling when a survey mission is stopped/resumed so camera triggering and gimbal orientation are correctly re-applied, and include resets on mission updates and disarm conditions; SITL testing and reviews support the intended behavioral fix."
  },
  {
    "title": "navigator: send commands to anyone listening",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21697",
    "number": 21697,
    "created_at": "2023-06-07T14:56:50Z",
    "merged": true,
    "merged_at": "2023-06-12T07:41:28Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\n POI commands that are part of a mission do not work when the gimbal is controlled by a companion computer. \r\n\r\n### Solution\r\nSend commands to anyone listening. \r\n\r\n### Test coverage\r\nWe have been flying with that change for some years now.\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-06-07T15:00:10Z",
          "body": "@bkueng @ThomasDebrunner you were looking into this before - do you think this change is needed?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "I don't remember exactly but I think it's still needed.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect command routing: POI mission commands were not reaching gimbals controlled by a companion computer because they were targeted rather than broadcast. Changing to 'send commands to anyone listening' corrects the unintended behavior so any controller (including companion computers) receives the commands. Review comments indicate this change is expected and necessary."
  },
  {
    "title": "(Mission) FeasibilityChecker: remove duplicate line",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21689",
    "number": 21689,
    "created_at": "2023-06-06T12:53:56Z",
    "merged": true,
    "merged_at": "2023-07-04T09:17:24Z",
    "state": "closed",
    "conversation": {
      "author": "tstastny",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nI was poking around code and saw this duplicated line.\r\n\r\n### Solution\r\nremoved it\r\n\r\n### Changelog Entry\r\nN/A\r\n",
      "issue_comments": [
        {
          "author": "mrpollo",
          "created_at": "2023-06-28T17:53:36Z",
          "body": "Thanks @tstastny ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "mcsauder",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR only removes a duplicated line as reported by the author and contains no mention of incorrect behavior, failing tests, or state inconsistencies. There is no evidence in the title, description, or comments that the duplicate caused incorrect program logic, so this appears to be a cosmetic cleanup rather than a fix for a logic error."
  },
  {
    "title": "Port VTOL mission item resets and QC rework",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21665",
    "number": 21665,
    "created_at": "2023-05-31T17:45:54Z",
    "merged": true,
    "merged_at": "2023-06-02T08:22:34Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Port of https://github.com/PX4/PX4-Autopilot/pull/21641 and https://github.com/PX4/PX4-Autopilot/pull/21598 to 1.14",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title indicates it ports changes for \"VTOL mission item resets\" and a \"QC rework\", which strongly suggests behavioral fixes (state reset logic and related mission/quality-control logic). Those kinds of changes address incorrect state transitions/mission handling and therefore qualify as fixes to logic errors. Confidence is medium because no diffs or detailed descriptions/comments are provided to confirm the exact nature of the changes."
  },
  {
    "title": "Adsb warnings fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21663",
    "number": 21663,
    "created_at": "2023-05-31T12:39:32Z",
    "merged": true,
    "merged_at": "2024-04-22T08:14:39Z",
    "state": "closed",
    "conversation": {
      "author": "asimopunov",
      "body": "- warn about full traffic conflict buffer at 1/60hz.\r\n- add conflict expiry for buffer.\r\n- use only events for buffer full warning. mavlink_log_critical no longer needed.\r\n- use icao address for conflict warnings id, stop using uas_id. UTM_GLOBAL_POSITION assumed deprecated.\r\n- remove mavlink_log_critical warnings. Replaced with events.\r\n- stop spamming when buffer is full. log using px4_info and px4_warn for ulog since events don't show up on flight review or plotjuggler.\r\n- fix warning wording if buffer is full.\r\n- fix missing {1}, {2} etc. from events\r\n\r\n\r\nfollow up on https://github.com/PX4/PX4-Autopilot/pull/21283",
      "issue_comments": [
        {
          "author": "asimopunov",
          "created_at": "2023-09-29T01:05:33Z",
          "body": "@dakejahl Could you please fetch the adsb changes over to your next release? I was asked about this by Will. ",
          "type": "issue_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-11T20:13:24Z",
          "body": "> The CI failure happens on main already, but would be a good opportunity to quickly have a look.\r\n\r\n@bkueng hmm\r\nthey pass locally when I run `make tests TESTFILTER=functional-AdsbConflict`\r\nThe build step also passed when the tests were merged here - https://github.com/PX4/PX4-Autopilot/actions/runs/4431457384/job/12034874013\r\n\r\nMaybe it's unrelated - need to look more\r\n\r\nDoes that work-queue error directly point to anything for you?\r\n\r\n```\r\n[1277/1278] Running tests\r\n   Site: c36612c519c7\r\n   Build name: Linux-c++\r\nCreate new tag: 20240411-1954 - Experimental\r\nTest project /__w/PX4-Autopilot/PX4-Autopilot/build/px4_sitl_test\r\n        Start   1: functional-AdsbConflict\r\n  1/140 Test   #1: functional-AdsbConflict ..............................***Failed    0.01 sec\r\nERROR [px4_work_queue] not running\r\nERROR [px4_work_queue] wq:lp_default not available\r\nERROR [px4_work_queue] init failed\r\n[==========] Running 3 tests from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 3 tests from AdsbConflictTest\r\n[ RUN      ] AdsbConflictTest.detectTrafficConflict\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-17T14:46:03Z",
          "body": "> The following tests FAILED:\r\n> \t  1 - functional-AdsbConflict (Failed)\r\n\r\n@bkueng It's passing now",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:40:25Z",
          "body": "This removes it but then accesses it in the next lines.\r\nWhy not directly remove them without the extra `expired_conflicts`?",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:41:48Z",
          "body": "they're displayed now in flight review",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:42:56Z",
          "body": "`events::send(events::ID(\"buffer_full\"), events::Log::Notice, \"Too much traffic! Showing all messages from now on\");` (remove the space)",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:45:47Z",
          "body": "The `@description` above contains the details. If you want to add them here as well, please make it more readable. hdg -> heading",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:46:10Z",
          "body": "Same here and below",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 199,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:46:49Z",
          "body": "Can you remove this?",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-11T06:47:21Z",
          "body": "It is 120",
          "path": "src/lib/adsb/AdsbConflict.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-11T19:33:24Z",
          "body": "Thanks, doesn't look like there was a good reason.\r\nfixed",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-11T19:33:56Z",
          "body": "yup, better?",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-17T06:15:29Z",
          "body": "After removing you must ensure the index does not increase otherwise an element is skipped.",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 34,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-17T07:14:49Z",
          "body": "Yes, thanks",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2024-04-18T14:10:30Z",
          "body": "Did you mean to add this?",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-18T16:03:49Z",
          "body": "Of course, we don't need it. I'm just being lazy so I don't need to add another time if this CI fails again. I can remove.",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "asimopunov",
          "created_at": "2024-04-18T22:22:34Z",
          "body": "removed",
          "path": "src/lib/adsb/AdsbConflict.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "The CI failure happens on main already, but would be a good opportunity to quickly have a look.\r\n```\r\nThe following tests FAILED:\r\n\t  1 - functional-AdsbConflict (Failed)\r\n```",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "> Does that work-queue error directly point to anything for you?\r\n\r\nIt's probably unrelated unless the test accesses params.",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": ">  @bkueng It's passing now\r\n\r\nNice, thanks",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes behavior (buffer full warning rate, adds conflict expiry, stops spamming, switches identifiers from uas_id to ICAO, and fixes event formatting), which are all fixes to incorrect or undesirable runtime behavior rather than mere style. These address boundary/state issues (buffer full, stale conflicts), incorrect identifier usage, and logging/spamming logic, so this is a logic-error fix."
  },
  {
    "title": "[1.14 Backport] Geofence: Disable pre-emptive geofence predictor by default",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21657",
    "number": 21657,
    "created_at": "2023-05-30T16:19:33Z",
    "merged": true,
    "merged_at": "2023-06-06T15:22:48Z",
    "state": "closed",
    "conversation": {
      "author": "junwoo091400",
      "body": "## About\r\nAs discussed in\r\nhttps://discuss.px4.io/t/px4-maintainers-call-may-30-2023/32372#v114-new-beta-release-5, Geofence predictor feature was not well tested / maintained, hence was agreed upon to be disabled for the 1.14 release\r\n\r\nThis is a backport because 1.14 has been branched out, but not going to `main` branch yet, since we haven't discussed what to do for the next release.",
      "issue_comments": [
        {
          "author": "DronecodeBot",
          "created_at": "2023-05-30T16:20:22Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-maintainers-call-may-30-2023/32372/1\n",
          "type": "issue_comment"
        },
        {
          "author": "DronecodeBot",
          "created_at": "2023-06-06T15:36:05Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-maintainers-call-june-06-2023/32473/1\n",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2023-07-20T00:03:30Z",
          "body": "Should this also be disabled by default in main?",
          "type": "issue_comment"
        },
        {
          "author": "junwoo091400",
          "created_at": "2023-07-23T20:54:07Z",
          "body": "> Should this also be disabled by default in main?\r\n\r\nThanks for the reminder, it should! Hence I created a branch against the `main`. Thanks!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "junwoo091400",
          "created_at": "2023-05-31T15:59:44Z",
          "body": "I've added the note, what do you think? @bresch @dagar ",
          "path": "src/modules/navigator/geofence_params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2023-05-31T23:18:57Z",
          "body": "Certainly better than nothing. It is unfortunate that the parameter tables are rendered as HTML tables so we can't use markdown formatting.\r\n\r\nPerhaps something for 1.15 (as per [the discussion on feature support here](https://discuss.px4.io/t/px4-maintainers-call-may-30-2023/32372#fire-v115-next-release-improvement-discussion-8)) but perhaps we could add an `@experimental` tag in the parameter names to make it clear that the feature is experimental? (probably not, since a whole feature is experimental, not a particular parameter).\r\n\r\n```suggestion\r\n * [EXPERIMENTAL] Use Pre-emptive geofence triggering\r\n *\r\n * WARNING: This experimental feature may cause flyaways. Use at your own risk.\r\n```",
          "path": "src/modules/navigator/geofence_params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "junwoo091400",
          "created_at": "2023-06-06T12:24:52Z",
          "body": "> Perhaps something for 1.15 (as per [the discussion on feature support here](https://discuss.px4.io/t/px4-maintainers-call-may-30-2023/32372#fire-v115-next-release-improvement-discussion-8)) but perhaps we could add an `@experimental` tag in the parameter names to make it clear that the feature is experimental?\r\n\r\nI think that could be nice, if we have mechanism in QGC to prompt \"WARNING! This feature is experimental!\" to make sure user gets notified the fact that it's experimental properly.\r\n\r\nOtherwise, I think you are probably thinking of documentation aspect of it as well, for displaying parameters with those tags with special colors perhaps?\r\n\r\nBtw, displaying markdown formatting in HTML is possible, for example like this: https://www.makeuseof.com/md-block-render-markdown-web-page/",
          "path": "src/modules/navigator/geofence_params.c",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "Should we add a note in the param that this is an experimental feature?\r\nOr what's the point of letting someone enabling it if we know that it can lead to a fly-away?",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR disables a pre-emptive geofence predictor feature because it was not well tested and can cause unsafe/incorrect behavior (e.g. fly-aways). While this change is primarily a configuration/defaults fix rather than an algorithmic correction, it addresses an existing logic/behavioral bug by preventing the faulty predictor from running by default."
  },
  {
    "title": "navigator: improve survey resume",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21643",
    "number": 21643,
    "created_at": "2023-05-26T14:04:18Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "Igor-Misic",
      "body": null,
      "issue_comments": [
        {
          "author": "Igor-Misic",
          "created_at": "2023-06-18T16:25:19Z",
          "body": "continued here: https://github.com/PX4/PX4-Autopilot/pull/21710 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "There is insufficient information to determine that this PR fixes a logic error. The title ('navigator: improve survey resume') implies a behavioral change to survey-resume handling, but there is no PR description, diff, or review discussion indicating a bug or incorrect behavior being fixed—only a link to a continuation PR. Given the lack of concrete details, I cannot confidently classify this as a logic-error fix."
  },
  {
    "title": "Navigator: make sure to reset mission.item fields touched by set_vtol_transition_item",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21641",
    "number": 21641,
    "created_at": "2023-05-26T12:10:22Z",
    "merged": true,
    "merged_at": "2023-06-02T08:21:23Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "`\r\nmission_block::set_vtol_transition_item` sets the params of the mission item directly to values that make sense for NAV_CMD_DO_VTOL_TRANSITION, but don't for other NAV_CMDs. So make sure that whenever we use it, we then in the next step reset the touched mission_item fields.\r\n\r\n### Solved Problem\r\nacceptance radius and/or time_inside fields of mision_item can be wrong after a VTOL transition. \r\n\r\n### Solution\r\nMake sure to at least always fill the fields touched by set_vtol_transition_item, which are fields 0 (another union with eg time_inside), and acceptance_radius. \r\n\r\n### Alternatives\r\nChange the way of how `set_vtol_transition_item` works? Does it have to manually adapt the fields of _mission_item?\r\n\r\n### Test coverage\r\nSome SITL testing. \r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-05-31T17:42:02Z",
          "body": "Flight tested on multiple VTOLs, LGTM.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error where set_vtol_transition_item modified mission_item fields (e.g. param1/time_inside and acceptance_radius) with values appropriate only for NAV_CMD_DO_VTOL_TRANSITION, leaving incorrect state for subsequent non-VTOL commands. The change resets the touched fields after use, preventing incorrect acceptance radius/time_inside behavior reported in testing."
  },
  {
    "title": "Fix incorrect _rtl_alt if RTL_TYPE param is RTL_TYPE_MISSION_LANDING_…",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21620",
    "number": 21620,
    "created_at": "2023-05-20T20:05:36Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "s-lisovenko",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nPrevent aircraft crashing during return home mode if RTL_TYPE is 2 (RTL_TYPE_MISSION_LANDING_REVERSED)\r\nWhen RTL_TYPE==2 the **find_RTL_destination** function returns before **_rtl_alt** is calculated. Thus **_rtl_alt** == 0 which causes the aircraft to immediately descend during the activation of the return home and as a consequence of its crash.\r\n\r\n### Solution\r\nCalculate **_rtl_alt** before return from function\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-09-18T15:09:26Z",
          "body": "@KonradRudin I guess this is something you also fix through https://github.com/PX4/PX4-Autopilot/pull/20903? ",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-09-18T18:02:23Z",
          "body": "@sfuhrer, yes this should not happen anymore in the mentioned PR",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-09-19T08:34:36Z",
          "body": "@s-lisovenko would you be able to test https://github.com/PX4/PX4-Autopilot/pull/20903 and check if it indeed acts the same as you indented here? And then close this PR? Thanks!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes a logic error where find_RTL_destination could return before computing _rtl_alt, leaving it at 0 and causing an unintended immediate descent (crash) on RTL_TYPE_MISSION_LANDING_REVERSED. Moving the _rtl_alt calculation before the early return corrects the program state and prevents the incorrect behavior."
  },
  {
    "title": "Navigator: MissionFeasibilityCheck: check if items fit to the current vehicle type",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21602",
    "number": 21602,
    "created_at": "2023-05-17T13:56:51Z",
    "merged": true,
    "merged_at": "2023-05-31T17:27:27Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nWhen switching between different vehicle types on the same groundstation, it can happen that by accident a mission that was planned for example for a VTOL gets uploaded to a Multicopter. This is can lead to undesired/unexpected behavior.\r\n\r\n### Solution\r\nAdd `checkItemsFitToVehicleType()` check that checks if the vehicle type is non-VTOL but there are VTOL mission items (VTOL_TAKEOFF, VTOL_LAND, VTOL_TRANSITION). The check can later be extended to handle all kind of vehicle type vs mission item checks.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: Mission Feasibility Check: prevent uploading a mission containing VTOL items to non-VTOL vehicles\r\n```\r\n\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR adds a feasibility check preventing VTOL-specific mission items from being uploaded to non-VTOL vehicles, which fixes an incorrect-behavior scenario (incompatible mission commands applied to the wrong vehicle type). This directly addresses a logic error where the system could accept and execute missions that are invalid for the current vehicle type, causing unexpected behavior."
  },
  {
    "title": "Refactoring dataman to remove locking mechanisms and to use uORB",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21594",
    "number": 21594,
    "created_at": "2023-05-15T14:58:49Z",
    "merged": true,
    "merged_at": "2023-07-24T11:10:32Z",
    "state": "closed",
    "conversation": {
      "author": "Igor-Misic",
      "body": "Changes brought by this PR:\r\n\r\n-  Refactored the initialization process of the Dataman file.\r\n-  Removed the thread-locking mechanism from the Dataman thread.\r\n-  Added two new classes, DatamanClient and DatmanCache, which facilitate communication with Dataman using uORB messages.\r\n- Removed the locking mechanism for Dataman itself\r\n\r\n**Refactored Initialization of the Dataman File**\r\nThis fix addresses the issue outlined in the following link: https://github.com/PX4/PX4-Autopilot/issues/21278.\r\nNow, if the file doesn't exist or contains an incorrect compact key, it will be cleared, and default values will be set.\r\n\r\n**DatamanClient**\r\nIntroduces a new method of communicating with the Dataman thread. Previously, direct access to the Dataman module was used, where requests were inserted into the queue with a semaphore. This approach has now been replaced with the uORB messaging system.\r\n\r\nDatamanClient introduces both **synchronous** and **asynchronous** modes of communication with Dataman.\r\n\r\n**DatamanCache**\r\nThis class serves as a cache storage for a defined amount of Dataman items. Currently, the cache does not employ any advanced caching algorithms.\r\n\r\n**Integration within mission**\r\nThe mission now incorporates a simple caching mechanism that attempts to cache the next N items whenever the \"current item\" is modified. \r\nIn order to eliminate the need for a locking mechanism within the mission, logic has been implemented to check if the set of mission items has been updated in the Dataman. The write operation to DM_KEY_MISSION_STATE has been removed from the mavlink thread, and instead, the existing uORB (mission.msg) message is utilized.\r\n\r\n **Integration geofence and safe points**\r\nAs the information on new geofence and safe points is updated at the end, it is safe to utilize it without the need for a lock. Integration has been implemented to store all geofence and safe point items within the cache and update them whenever changes occur.\r\n\r\n**Overview of the new architecture**\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/10188706/8fdcda1c-c64f-4e28-b03b-c52f6330c162)\r\n\r\n**Stack is increased as it was needed**\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/10188706/65dd9daf-7440-4f1d-ac18-cdf2e7e1bc5e)\r\n",
      "issue_comments": [
        {
          "author": "julianoes",
          "created_at": "2023-05-30T05:14:29Z",
          "body": "Nice, this looks amazing @Igor-Misic!",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-06-16T15:01:19Z",
          "body": "There's a failure on the test rack that looks real. http://px4-jenkins.dagar.ca:8080/blue/organizations/jenkins/PX4-Autopilot/detail/pr-dataman_refactoring/21/pipeline/125\r\n\r\n![Screenshot from 2023-06-16 11-00-08](https://github.com/PX4/PX4-Autopilot/assets/84712/9de49fed-20e3-4cd7-9283-eb26d61045d4)\r\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-06-19T09:59:22Z",
          "body": "> There's a failure on the test rack that looks real. http://px4-jenkins.dagar.ca:8080/blue/organizations/jenkins/PX4-Autopilot/detail/pr-dataman_refactoring/21/pipeline/125\r\n\r\nI didn't reproduce locally, but I think I fixed it in the last commit.",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-06-19T12:01:53Z",
          "body": "looks like only remaining build failure is 0.01% flash on diatone mamba",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-06-21T11:57:18Z",
          "body": "@dagar - what do you think? gtg?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-06-21T17:51:35Z",
          "body": " - DM_KEY_MISSION_STATE is obsolete and can be purged, we don't need to save the progress to the SD card\r\n - publishing ORB_ID(mission) is used to signal navigation mission to update and rerun mission feasibility, but now it's also updating with any geofence or safe point changes \r\n - DatamanClient is using the old uORB API where a subscription is a file descriptor, we need to check that the extra FD usage doesn't trigger the warning (or change to uORB::SubscriptionBlocking, etc)",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-06-22T06:13:35Z",
          "body": "> DM_KEY_MISSION_STATE is obsolete and can be purged, we don't need to save the progress to the SD card\r\n\r\nResuming a mission on battery change isn't a thing? Either way is fine with me but it's a functional change we can do as a separate PR.\r\n\r\n> publishing ORB_ID(mission) is used to signal navigation mission to update and rerun mission feasibility, but now it's also updating with any geofence or safe point changes\r\n\r\nI didn't think this is a problem. If you're concerned I can make it more granular.\r\n\r\n> DatamanClient is using the old uORB API where a subscription is a file descriptor, we need to check that the extra FD usage doesn't trigger the warning (or change to uORB::SubscriptionBlocking, etc)\r\n\r\nI did not see any.",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-06-22T11:33:36Z",
          "body": ">  publishing ORB_ID(mission) is used to signal navigation mission to update and rerun mission feasibility, but now it's also updating with any geofence or safe point changes\r\n\r\nI didn't consider the reporting happening multiple times. I fixed it.",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-07-03T09:07:52Z",
          "body": "@dagar good to go?",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-07-20T06:03:14Z",
          "body": "@bkueng looks like it needs one more rebase.\r\n\r\n@dagar any last words? this one has been blocking some things for quite a while now",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-07-24T11:10:22Z",
          "body": "@dagar I'm getting this in as a few things are blocking on this. I'll do a follow-up, if there's anything else needed.",
          "type": "issue_comment"
        },
        {
          "author": "DronecodeBot",
          "created_at": "2023-09-15T11:33:28Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/how-to-start-developing/34131/4\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2023-06-16T14:16:47Z",
          "body": "Why?",
          "path": ".ci/Jenkinsfile-hardware",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-06-19T10:00:06Z",
          "body": "Igor explained it in the commit: https://github.com/PX4/PX4-Autopilot/pull/21594/commits/50f23de177e338623b0e473a6c9add9a6113e89e.\r\n\r\nI made it a bit more explicit in https://github.com/PX4/PX4-Autopilot/pull/21594/commits/b0c918fc42a4a10043dd14fe280e6a96dcbfb32c",
          "path": ".ci/Jenkinsfile-hardware",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-06-21T17:43:24Z",
          "body": "Why? \r\nDM_KEY_MISSION_STATE and ORB_ID(mission) are the same thing, mavlink_mission would have published `mission` and written DM_KEY_MISSION_STATE back to back. I think it's time to kill DM_KEY_MISSION_STATE and remove some of the confusion.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 128,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-06-21T21:01:27Z",
          "body": "Let's try to keep this one.\r\n\r\n```suggestion\r\n```",
          "path": "boards/px4/fmu-v4/test.px4board",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Nice work @Igor-Misic! I went through it, tested quite a bit, and fixed some things.\r\n\r\nRAM usage increases a bit (depending on geofence/safe point usage ~2KB).\r\n\r\nNavigator does not block anymore during a mission execution (unless DO_JUMP is used). This is in sih with geofence and safe points:\r\n```\r\nPR:\r\nnavigator: 2337 events, 121802us elapsed, 52.12us avg, min 21us max 803us 650.441us rms\r\nmain:\r\nnavigator: 2539 events, 919572us elapsed, 362.18us avg, min 19us max 26094us 3136.414us rms\r\n```",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "tstastny",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes logical bugs: it corrects Dataman file initialization (clearing corrupted/missing files and setting defaults) which addresses incorrect state handling, and it removes/rewrites locking-based communication (eliminating race/locking issues) by moving to uORB with a cache. Reviews and comments confirm the behavioral fixes (navigator no longer blocking, mission update signaling corrected), indicating resolved incorrect program behavior rather than just style changes."
  },
  {
    "title": "Navigator: set cruise_speed to default on entering new mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21503",
    "number": 21503,
    "created_at": "2023-04-21T15:24:37Z",
    "merged": true,
    "merged_at": "2023-05-05T13:53:17Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Follow up on https://github.com/PX4/PX4-Autopilot/pull/21414.\r\n\r\nThe resets in the modes (eg Loiter mode) are not active yet, so manually set rep->current.cruising_speed = -1.f if not already in the same flight mode.\r\n\r\n\r\n### Test coverage\r\nSITL and flight tested on VTOLs.\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-05-05T12:38:16Z",
          "body": "@RomanBapst this is needed because the [Navigator sets the the speed setpoint of the current position_setpoint based on the currently set cruising speed](https://github.com/PX4/PX4-Autopilot/blob/40324b03f4acc8eb49423b4e12b585a0cabfd713/src/modules/navigator/navigator_main.cpp#L285) before the [stored cruising speed is reset by the mode. ](https://github.com/PX4/PX4-Autopilot/blob/40324b03f4acc8eb49423b4e12b585a0cabfd713/src/modules/navigator/loiter.cpp#L68)\r\nSee the printfs when I change the speed in a mission and then switch into Hold mode:\r\n```\r\nget_cruising_speed(): 20.000000\r\nrest cruising speed\r\n```\r\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — this PR fixes a logic error caused by ordering/state inconsistency: the Navigator was using a stale cruising_speed to set speed setpoints before the mode code reset the stored cruising speed. Explicitly setting rep->current.cruising_speed = -1.f on entering a new mode ensures the default is used and prevents incorrect speed setpoints (SITL and flight tested)."
  },
  {
    "title": "mission: only run update_mission() if mission is updated, not when reset due to landing",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21492",
    "number": 21492,
    "created_at": "2023-04-19T08:56:56Z",
    "merged": true,
    "merged_at": "2023-04-21T05:47:58Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "\r\n### Solved Problem\r\nWhen landing with a mission stored on the vehicle, that has not been updated since power cycling, these errors appear:\r\n```\r\nERROR [navigator] mission update failed\r\nWARN  [mavlink] ERROR: wp index out of bounds\r\n```\r\n\r\n### Solution\r\nThe errors come from the fact that when the mission is not updated, the [_mission_sub.copy(_mission) ](https://github.com/PX4/PX4-Autopilot/blob/202e2770da50caff0ed00c06a574e3c39933df52/src/modules/navigator/mission.cpp#L524)returns false, and thus the code below is not run, which would [reset _current_mission_index to 0 over current_seq](https://github.com/PX4/PX4-Autopilot/blob/202e2770da50caff0ed00c06a574e3c39933df52/src/modules/navigator/mission.cpp#L527), that was previously set to 0 in reset_mission. \r\nI thus here propose to only run `update_mission()` when the mission was actually updated, and otherwise, when we need to reset the mission on landing, only reset `_current_mission_index` to 0. \r\n\r\nWhat I'm not very sure yet: do we want to run the mission feasibility checks also on the reset? \r\n\r\n### Changelog Entry\r\nNot relevant.\r\n\r\n### Alternatives\r\nRemove the whole auto-reset logic on landing? It's not given that a mission should always start from 0. Though then the option in QGC should be there to reset the mission on landing/on vehicle boot.\r\n\r\n### Test coverage\r\nSITL tested. \r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-04-20T11:13:05Z",
          "body": "> _navigator->reset_vroi(); \r\n\r\nRight, added it.\r\n\r\n> set_current_mission_item()\r\n\r\nThat one contains partly duplicated logic that is also in reset_mission() . But I don't a reason speaking against also including it here.\r\n\r\nAdded both.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "> What I'm not very sure yet: do we want to run the mission feasibility checks also on the reset?\r\n\r\nI don't think so as the reset only changes the index.\r\n\r\nBut do these need to be called too?\r\n- https://github.com/PX4/PX4-Autopilot/blob/202e2770da50caff0ed00c06a574e3c39933df52/src/modules/navigator/mission.cpp#L520\r\n- https://github.com/PX4/PX4-Autopilot/blob/202e2770da50caff0ed00c06a574e3c39933df52/src/modules/navigator/mission.cpp#L586",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes an incorrect program state/flow that caused out-of-bounds waypoint errors. The code previously skipped the index-reset when mission copy returned false, leaving _current_mission_index in an inconsistent state; the change ensures update_mission() runs only when the mission changed and explicitly resets the mission index on landing, preventing the boundary/state error."
  },
  {
    "title": "navigator_main: orbit in FW: get_cruising_speed()",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21484",
    "number": 21484,
    "created_at": "2023-04-17T12:28:46Z",
    "merged": true,
    "merged_at": "2023-04-18T14:01:24Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "`rep->current.cruising_speed = get_cruising_speed();` was missing on entry of a FW Orbit, thus always resetting the speed to the vehicle default. ",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-04-18T11:05:56Z",
          "body": "> only concern is that it returns -1 if no cruising speed is present.. is this handled in the remainder of navigator and/or the fixed-wing controller?\r\n\r\nYes FW Pos control checks for >0 to use the cruising_speed setpoint. ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "tstastny",
          "created_at": "",
          "body": "only concern is that it returns -1 if no cruising speed is present.. is this handled in the remainder of navigator and/or the fixed-wing controller?",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes a logic error where the cruising_speed was not initialized on entry to a fixed-wing Orbit, causing the speed to be reset to the vehicle default instead of using the mission/waypoint setpoint. Adding rep->current.cruising_speed = get_cruising_speed() corrects the incorrect state transition/initialization; reviewers' concerns about a -1 return are addressed by existing controller logic which only uses the setpoint if >0."
  },
  {
    "title": "RTL: fix Mission RTL vs normal RTL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21464",
    "number": 21464,
    "created_at": "2023-04-12T09:59:43Z",
    "merged": true,
    "merged_at": "2023-04-14T07:49:48Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Fixes by parts regressions that came in with https://github.com/PX4/PX4-Autopilot/pull/21390, and in other parts things that were still broken even before that PR.\r\nSee commits for more details. \r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-04-13T15:33:46Z",
          "body": "Flight tested, no more issues found, LGTM.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-04-12T14:36:32Z",
          "body": "I could add a comment why this class variable is necessary:\r\nOn switching into RTL, this variable is updated concerning the RTL destination type and whether the system is in fixed-wing mode at this moment.",
          "path": "src/modules/navigator/navigator.h",
          "position": 13,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description indicate fixes to regressions and incorrect behavior between Mission RTL and normal RTL modes (i.e., incorrect mode/state handling). The author notes the changes fix regressions introduced by a prior PR and other previously broken behavior, and the patch was flight-tested with no further issues — consistent with resolving logic errors in control/state transitions."
  },
  {
    "title": "Add NAV_CMD_DO_SET_ACTUATOR to mission commands",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21446",
    "number": 21446,
    "created_at": "2023-04-07T10:00:30Z",
    "merged": true,
    "merged_at": "2023-04-11T06:12:19Z",
    "state": "closed",
    "conversation": {
      "author": "cruise-control",
      "body": "### Solved Problem\r\nWhen  I tried to setup offboard actuator set  (with dynamic control allocation) and enable a mission item triggered/driven offboard actuator set, I found that the mission feasibility checker rejects the commands but the mission block supports them.\r\n\r\n\r\n### Solution\r\n- Add the `NAV_CMD_DO_SET_ACTUATOR` to the supported commands\r\n\r\n### Test Setup\r\n1. Setup `offboard actuator outputs` in QGC configuration page\r\n2. Create a mission with a \"Set Servo\" mission item and save it\r\n3. Manually  edit \"Set Servo\" mission item to change command to 187 (NAV_CMD_DO_SET_ACTUATOR)\r\n4. Alternatively use the development build of QGC and create \"Set Actuator\" mission item\r\n5. Upload to PX4\r\n6. Inspection of `actuator_outputs` and `vehicle_command`  uorb messages\r\n7. Using Iris Model\r\n\r\n### Test coverage\r\n- SITL\r\n  - Mission uploading working\r\n  - Mission item working\r\n- HITL\r\n  - Mission uploading working\r\n  - Mission item working\r\n\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Thanks",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes an inconsistency where the mission feasibility checker rejected NAV_CMD_DO_SET_ACTUATOR even though the mission execution path supported it—an incorrect validation/conditional logic. Adding the command to the supported list aligns the checker with the mission block, resolving the unintended rejection of valid mission items."
  },
  {
    "title": "Speed reset when switching flight modes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21414",
    "number": 21414,
    "created_at": "2023-04-03T04:56:00Z",
    "merged": true,
    "merged_at": "2023-04-27T15:32:44Z",
    "state": "closed",
    "conversation": {
      "author": "afwilkin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nWhen I issued a DO_CHANGE_SPEED, and then changed flight modes, that speed continued over to the new flight mode. \r\nFor example, if I issue a DO_CHANGE_SPEED in mission mode for 1 m/s, and then switch to Loiter mode, I am still restricted to 1 m/s.\r\n\r\nFrom the conversations that I have had with maintainers, this is not the behavior we want to have\r\n\r\nThe only flight mode that this **does not** happen for is RTL, which has the following line\r\n`_navigator->reset_cruising_speed();`\r\n\r\n\r\n### Solution\r\nI reset the cruising speed upon entering a new navigation mode.\r\n\r\n### Alternatives\r\nWe could also create a new module that keeps track of what mode we are in and changes speed limits from there\r\n\r\n### Test coverage\r\n- Create a waypoint mission with a change speed waypoint item at 1 m/s. Mid-mission flip to HOLD mode and issue a do_relocate. \r\nBefore the change: [log](https://review.px4.io/plot_app?log=784a1777-8dff-446c-989e-8bf3cc0210ec)\r\n![image](https://user-images.githubusercontent.com/16963678/229414814-126a9520-6e09-45c8-9e83-ca82b665525d.png)\r\n\r\nAfter the change: [log](https://review.px4.io/plot_app?log=015494ff-ad95-498b-bfd3-b59632db3525)\r\n![image](https://user-images.githubusercontent.com/16963678/229414936-f46b1814-8105-4f38-a5c5-cfbb1b980273.png)\r\n\r\n",
      "issue_comments": [
        {
          "author": "DronecodeBot",
          "created_at": "2023-04-04T15:25:41Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-community-q-a-april-05-2023/31435/4\n",
          "type": "issue_comment"
        },
        {
          "author": "junwoo091400",
          "created_at": "2023-04-05T15:19:48Z",
          "body": "@dagar we mentioned this during the call, and concluded that more discussion on the context of this problem is needed. So it would be nice to have your feedback on use-cases for this!",
          "type": "issue_comment"
        },
        {
          "author": "DronecodeBot",
          "created_at": "2023-04-05T15:36:48Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-community-q-a-april-05-2023/31435/1\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "This is good to go from my side. We've tested it a bit in SITL and real vehicles (VTOLs). Needs follow up https://github.com/PX4/PX4-Autopilot/pull/21503 to have effect immediately always and not just when you set a new loiter for example.\r\n\r\nThe speed interface / handling in Navigator is quite ugly so I hope we get to fix it more fundamentally after the release. ",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR corrects incorrect state retention: a DO_CHANGE_SPEED persisted across flight-mode transitions causing unintended speed limits in the new mode. Resetting the cruising speed on entering a new navigation mode fixes this improper state transition and aligns behavior with the intended semantics (RTL already did this), and reviewers report testing in SITL and real vehicles."
  },
  {
    "title": "[BACKPORT] Avoid unexpected repositions",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22100",
    "number": 22100,
    "created_at": "2023-09-19T15:40:58Z",
    "merged": true,
    "merged_at": "2023-09-19T23:16:03Z",
    "state": "closed",
    "conversation": {
      "author": "tstastny",
      "body": "backport of https://github.com/PX4/PX4-Autopilot/pull/22078\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Don't allow external reposition commands without a mode switch, and ensure old reposition commands are not erroneously set.\r\n```",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly addresses incorrect behavior: unexpected external reposition commands being applied without a mode switch and stale reposition commands being set. The changelog and title describe a bugfix that changes decision logic about when to accept reposition commands, which is a logic-level fix rather than a stylistic or syntactic change."
  },
  {
    "title": "VTOL Takeoff: Use global position instead of home for takoeff",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22097",
    "number": 22097,
    "created_at": "2023-09-19T10:47:07Z",
    "merged": true,
    "merged_at": "2023-09-19T17:00:54Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "\r\n### Solved Problem\r\nWhen the vehicle home position does not coincide with the takeoff position the vehicle drifts off towards the home position during takeoff which is not the expected behavior.\r\n\r\n\r\n### Solution\r\n- Use global position for takeoff instead of home position.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: \r\nPrevent VTOL Takeoff from drifting during takeoff ascent when home position does not coincide with takeoff position.\r\n```",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-09-19T11:19:03Z",
          "body": "What happens actually if that's not fulfilled? ",
          "path": "src/modules/navigator/vtol_takeoff.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-09-19T17:00:21Z",
          "body": "@sfuhrer Then the triplet will not be published and not takeoff will happen.",
          "path": "src/modules/navigator/vtol_takeoff.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes a functional/behavioral bug where the code used the vehicle 'home' position as the reference for VTOL takeoff instead of the actual current global position, causing unintended drift toward home during ascent. Changing the reference to the global position corrects the incorrect state/coordinate usage and prevents the wrong movement, which is a classic logic error."
  },
  {
    "title": "Avoid unexpected repositions",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22078",
    "number": 22078,
    "created_at": "2023-09-13T17:32:25Z",
    "merged": true,
    "merged_at": "2023-09-13T19:29:31Z",
    "state": "closed",
    "conversation": {
      "author": "tstastny",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\n1. Geofence reposition lifetime: when in RTL, the geofence reposition setpoint is ignored (ok, fine) - however, the reposition struct that holds that geofence position is stored until the next flight. If a manual control loss then engages a hold (during RTL delay time), the reposition setpoint is taken for the hold, which may be anywhere else other than the vehicle's current position.. which would be the desired hold position.\r\n2. External reposition commands without a requested mode switch (flag) are silently accepted and can cause unexpected positioning when hold is engaged.\r\n\r\n### Solution\r\n1. In the loiter activation methods, check the reposition setpoint's timestamp in addition to validity.\r\n3. Don't allow reposition commands without a requested mode switch.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Don't allow external reposition commands without a mode switch, and ensure old reposition commands are not erroneously set.\r\n```\r\n\r\n### Alternatives\r\nReal solution is not sharing the reposition struct between multiple modes, and not reusing loiter mode for goto and hold.\r\n\r\n### Test coverage\r\n- used libmav to send a reposition command without the modeswitch bit.. it rejects now\r\n- test case:\r\n  - unplug manual control\r\n  - let the multicopter rtl with geo fence boundary set near home\r\n  - geo fence sets reposition struct somewhere along the path towards home (but rtl ignores)\r\n  - vehicle lands, disarms\r\n  - arm and takeoff again in manual\r\n  - unplug manual control\r\n  - rtl ensues\r\n  - the rtl hold delay before returning to home is correctly set to the vehicle's current position (not the previously set reposition struct from last flight)",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes logic errors: it prevents stale geofence 'reposition' setpoints from being reused across flights by checking timestamps on loiter activation, and it blocks external reposition commands that lack the required mode-switch flag. Both changes correct incorrect state handling and unintended acceptance of commands that could produce unexpected vehicle positions."
  },
  {
    "title": "mavlink: increase first mission read timeout",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22057",
    "number": 22057,
    "created_at": "2023-09-07T18:26:54Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": " - relax timeout considerably, but only during init (typically when system is first starting up)\r\n\r\nSome boards are hitting this on the test rack, but it's fine if only happening at system startup when everything fighting to start in parallel.\r\n\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/84712/0b0bcdf8-b74b-41d0-9ac6-5f5e6e739259)\r\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2023-09-07T18:40:30Z",
          "body": "Unless this is just a race condition with `navigator` establishing `DM_KEY_MISSION_STATE` (which is argubably obsolete anyway) in the first place.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-09-07T18:55:24Z",
          "body": "Something else is going on here, increasing the timeout made this fail on more boards.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-09-07T19:01:15Z",
          "body": "I had the dataman id indexing wrong, the problem was actually with DM_KEY_SAFE_POINTS and DM_KEY_FENCE_POINTS (items 0 & 1), not DM_KEY_WAYPOINTS_OFFBOARD_0/DM_KEY_WAYPOINTS_OFFBOARD_1.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-09-07T23:20:43Z",
          "body": "Proper fix is https://github.com/PX4/PX4-Autopilot/pull/22058 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "No — this PR simply relaxes a timeout during initialization (a timing/workaround change) rather than correcting the underlying incorrect behavior. The author later discovered the real logic bug was a dataman ID indexing error and pointed to a different PR as the proper fix, so this change does not resolve the actual logic error."
  },
  {
    "title": "FixedWingPosControl: Handle waypoint type LAND for VTOL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21985",
    "number": 21985,
    "created_at": "2023-08-21T11:33:32Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "### Solved Problem\r\nUntil now the navigator was hiding LAND type setpoints from the fixed wing position controller for VTOL_LAND items.\r\nIt published the wayoint as a normal position waypoint which made the position controller unaware of an impending transition. Furthermore, navigator internally set the altitude acceptance radius for a VTOL_LAND item to infinity (don't care about altitude) while the position controller was still using the default fixed wing altitude acceptance radius. In the worst case this causes the position controller to initiate a loiter during the approach to the land waypoint when the altitude error exceeded the threshold defined by the acceptance value.\r\n\r\n\r\nFixes #{Github issue ID}\r\n\r\n### Solution\r\nIt makes more sense to make the position controller aware of the setpoint type. This allows the position controller to take actions depending on the setpoint type (e.g. never loiter to recover altitude during the approach to a land waypoint.)\r\n\r\n### Changelog Entry\r\n```\r\nBugfix: Fixed issues where fixed wing position controller could instantiate a loiter when approaching a VTOL_LAND waypoint.\r\n```\r\n\r\n### Alternatives\r\n\r\n\r\n### Test coverage\r\n- Unit/integration test: ...\r\n- Simulation/hardware testing logs: https://review.px4.io/\r\n\r\n### Context\r\nRelated links, screenshot before/after, video\r\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2024-01-16T10:19:56Z",
          "body": "Addressed by  #22642",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2023-08-21T13:59:49Z",
          "body": "```suggestion\r\n\t\tint32_t val = 0;\r\n```",
          "path": "src/modules/fw_pos_control/FixedwingPositionControl.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-08-21T16:50:02Z",
          "body": "Couldn't this removal of the default cmd to type WAYPOINT cause problems? Why is it necessary in the context of this PR?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-08-21T16:57:23Z",
          "body": "What about a normal LAND command? Eg together with a backtransition waypoint?",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-08-24T05:48:36Z",
          "body": "@sfuhrer Because if you scroll a few lines up you will see that we are in the context of NAV_CMD_VTOL_LAND and we should not need to tamper with the nav command just to achieve an expected behavior. Now, the position controller understands position setpoint type land so we can let it handle it. That's much cleaner IMO.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-08-24T05:50:57Z",
          "body": "@sfuhrer That is handled by `vtol_back_transition` flag.\r\nBut it's good that you bring it up. I actually tested it and I find this worflow highly confusing. I did not even understand from the way it's planned in QGC where the actual backtransition is going to happen. Also the mavlink specs don't actually give any helpful information how to use this command. In the end, that's the reason why VTOL_LAND was invented but we still should increase clarity for this option.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-08-24T10:46:51Z",
          "body": "right, I was not at the right location, all good!",
          "path": "src/modules/navigator/mission.cpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-08-24T10:49:06Z",
          "body": "okay, if the behavior isn't changed for the separate transition and land items workflow it's all good for now. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "Makes sense to me, though even nicer would it be if we had a \"follow line\" interface to the position controller (instead of having it customized for the landing only). ",
          "state": "COMMENTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic bug where VTOL_LAND setpoints were published as normal position waypoints, leaving the fixed-wing position controller unaware of the landing intent and using the wrong altitude-acceptance logic. That mismatch could cause unintended loitering during approach; making the position controller aware of the setpoint type corrects the erroneous state/conditional handling."
  },
  {
    "title": "multiple: Fix abs(int) usage on float values",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21963",
    "number": 21963,
    "created_at": "2023-08-14T13:30:30Z",
    "merged": true,
    "merged_at": "2023-08-15T08:18:32Z",
    "state": "closed",
    "conversation": {
      "author": "sverrevr",
      "body": "### Solved Problem\r\nResolves https://github.com/PX4/PX4-Autopilot/issues/21924\r\n\r\n### Solution\r\nSolves incorrect usage of abs. See https://github.com/PX4/PX4-Autopilot/issues/21924 for details\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature/Bugfix XYZ\r\nNew parameter: XYZ_Z\r\nDocumentation: Solves incorrect usage of abs\r\n```\r\n\r\n### Alternatives\r\nN/A\r\n\r\n### Test coverage\r\n- Unit/integration test: All tests still pass\r\n- Simulation/hardware testing logs: None\r\n\r\n### Context\r\nI realized that using abs() on float values casts them to int, which caused problems in some code I was working on. While searching through the code I realized that there were 3 places abs is currently being used on float values which can cause problems/inaccuracies.  I don't have a setup to test these changes, so I have not tested it beyond verifying that no tests fail.\r\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2023-08-14T13:48:16Z",
          "body": "Thanks @sverrevr, I suspect some of the confusion comes from std::abs (and using namespace std). ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-08-14T14:24:54Z",
          "body": "We could consider ratcheting up the conversion warnings (+ -Werror), but last time I checked there's a huge number of harmless cases we'd have to adjust first.\r\n\r\n-Wconversion, -Wfloat-conversion, -Wsign-conversion, etc",
          "type": "issue_comment"
        },
        {
          "author": "sverrevr",
          "created_at": "2023-08-15T10:29:01Z",
          "body": "> We could consider ratcheting up the conversion warnings (+ -Werror), but last time I checked there's a huge number of harmless cases we'd have to adjust first.\r\n> \r\n> -Wconversion, -Wfloat-conversion, -Wsign-conversion, etc\r\n\r\nI think that would be ideal, but I see that it can be a large job to fix all the harmless cases ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR corrects incorrect use of abs on floating-point values which caused implicit conversion to int (truncation) and thus wrong numerical behaviour. Replacing the int overload with the proper float/ double abs (or fabsf/std::abs overload) fixes an unintended logic/precision error in the calculations."
  },
  {
    "title": "Remove checkIfBelowHomeAltitude in Navigator",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21904",
    "number": 21904,
    "created_at": "2023-07-28T06:57:43Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "potaito",
      "body": "### Solved Problem\r\nWhen taking off an elevated location (hill, mountain) and planning a mission in a valley relative to the take off location, PX4 will throw warnings for each single waypoint whose altitude is below the home location's altitude. This warning was most likely added to protect the user from mistakes, but flying below the home altitude with a drone is not so uncommon and the warnings are therefore too excessive.\r\n\r\n\r\n### Solution\r\nThe check for the waypoint altitude being below home has been completely removed. \r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: Don't print warnings for waypoints with altitudes below the home position\r\n```\r\n\r\n### Alternatives\r\nWe could also limit to one warning per mission that contains waypoints below home, instead of one warning per waypoint. But I'd rather not have any unnecessary warnings during nominal operation of the drone.\r\n\r\n### Test coverage\r\nTested in simulation.\r\n\r\n#### Prior to this PR\r\n```\r\nINFO  [mavlink] mode: Onboard, data rate: 4000000 B/s on udp port 14580 remote port 14540\r\n[Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n[Msg] Publicized address: 192.168.0.30\r\nINFO  [mavlink] mode: Onboard, data rate: 4000 B/s on udp port 14280 remote port 14030\r\nINFO  [mavlink] mode: Gimbal, data rate: 400000 B/s on udp port 13030 remote port 13280\r\nINFO  [logger] logger started (mode=all)\r\nINFO  [logger] Start file log (type: full)\r\nINFO  [logger] [logger] ./log/2023-07-28/06_55_16.ulg\t\r\nINFO  [logger] Opened full log file: ./log/2023-07-28/06_55_16.ulg\r\nINFO  [mavlink] MAVLink only on localhost (set param MAV_{i}_BROADCAST = 1 to enable network)\r\nINFO  [mavlink] MAVLink only on localhost (set param MAV_{i}_BROADCAST = 1 to enable network)\r\nINFO  [px4] Startup script returned successfully\r\npxh> INFO  [tone_alarm] home set\r\nWARN  [mission_feasibility_checker] Warning: Waypoint 2 below home\t\r\nWARN  [mission_feasibility_checker] Warning: Waypoint 3 below home\t\r\nWARN  [mission_feasibility_checker] Warning: Waypoint 4 below home\t\r\n[Wrn] [Event.cc:61] Warning: Deleting a connection right after creation. Make sure to save the ConnectionPtr from a Connect call\r\nINFO  [tone_alarm] notify positive\r\nINFO  [commander] Ready for takeoff!\r\nINFO  [commander] Armed by external command\t\r\nINFO  [tone_alarm] arming warning\r\nINFO  [navigator] Executing Mission\t\r\nINFO  [navigator] Takeoff to 2.5 meters above home\t\r\nINFO  [commander] Takeoff detected\t\r\nINFO  [navigator] Mission finished, loitering\r\n```\r\nhttps://logs.px4.io/plot_app?log=b91adbc1-f7e4-448d-aa3b-5194d4fb407f\r\n\r\n#### After this PR\r\nNo warnings:\r\n```\r\nINFO  [mavlink] mode: Onboard, data rate: 4000000 B/s on udp port 14580 remote port 14540\r\n[Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n[Msg] Publicized address: 192.168.0.30\r\nINFO  [mavlink] mode: Onboard, data rate: 4000 B/s on udp port 14280 remote port 14030\r\nINFO  [mavlink] mode: Gimbal, data rate: 400000 B/s on udp port 13030 remote port 13280\r\nINFO  [logger] logger started (mode=all)\r\nINFO  [logger] Start file log (type: full)\r\nINFO  [logger] [logger] ./log/2023-07-28/06_53_28.ulg\t\r\nINFO  [logger] Opened full log file: ./log/2023-07-28/06_53_28.ulg\r\nINFO  [mavlink] MAVLink only on localhost (set param MAV_{i}_BROADCAST = 1 to enable network)\r\nINFO  [mavlink] MAVLink only on localhost (set param MAV_{i}_BROADCAST = 1 to enable network)\r\nINFO  [px4] Startup script returned successfully\r\npxh> INFO  [tone_alarm] home set\r\n[Wrn] [Event.cc:61] Warning: Deleting a connection right after creation. Make sure to save the ConnectionPtr from a Connect call\r\nINFO  [tone_alarm] notify positive\r\nINFO  [commander] Ready for takeoff!\r\nINFO  [commander] Armed by external command\t\r\nINFO  [tone_alarm] arming warning\r\nINFO  [navigator] Executing Mission\t\r\nINFO  [navigator] Takeoff to 2.5 meters above home\t\r\nINFO  [commander] Takeoff detected\t\r\nINFO  [navigator] Mission finished, loitering\r\n```\r\nhttps://logs.px4.io/plot_app?log=330407db-73a0-4fc5-8203-09a3a94da4c6\r\n\r\n",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2023-07-28T08:22:54Z",
          "body": "I would also have to remove the event `\"navigator_mis_wp_below_home\"` if the intent of this PR is accepted",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-07-31T08:12:15Z",
          "body": "@potaito Maybe we should issue the warning once when the altitude mode is relative to home point. In that case it's quite likely that the user does not intend to fly lower than home. But we can remove the warning when altitude mode is set to global. In that case the user has either specified AMSL altitudes or altitudes above terrain (which are converted to AMSL by QGC)",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2024-09-17T12:29:23Z",
          "body": "Done in https://github.com/PX4/PX4-Autopilot/pull/22624",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR removes a check that produced spurious warnings for every waypoint below the home altitude — behavior that caused excessive/incorrect warnings when launching from elevated terrain. Emitting those warnings per-waypoint was improper/error-prone logic (incorrect user-facing behavior); although reviewers suggested a more nuanced solution (warn only in relative-alt mode), this change corrects the immediate incorrect behavior."
  },
  {
    "title": "Fix mission failed bug",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21888",
    "number": 21888,
    "created_at": "2023-07-26T14:28:44Z",
    "merged": true,
    "merged_at": "2023-07-27T05:21:30Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nI found two issues with mission uploading in the newest main. \r\n\r\n1. Mission module per default assumed the mission was not valid when the mission uorb topic changed. Only when the mission counter is updated, it actually checks the validity of the mission. But since the mission topic gets updated as well when the geofence or safepoints changed, this would lead to wrongly failed missions in the mission module where the mission would be reset.\r\n2. The mission counter in mavlink_mission module was always set to 0 on startup. When on the last powercycle, exactly one mission was loaded, the mission counter in the dataman was set to one. On the next powerccle and the first mission upload, the mavlink_mission would report again a mission counter of 1. This would lead in the mission module to believe, that the mission was not updated at all.\r\n\r\nFixes #{Github issue ID}\r\n\r\n### Solution\r\n\r\n1. Mission module loads the previously calculated mission validity and if the mission changes, calculates it newly.\r\n2. mavlink_mission loads the mission counter on startup from the datamn (safepoints as well, already done for geofence).\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Mission failed on geofence/safepoint upload\r\nBufgix: Mission failed on first mission upload\r\n```\r\n\r\n### Test coverage\r\n- SITL test: checking the px4 console output.\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Thanks, a good reminder to me to not just quickly do things.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes logic errors: (1) the mission module incorrectly assumed a mission was invalid whenever the mission uORB topic changed (including non-mission changes like geofence/safepoints), leading to wrongful mission resets; the PR preserves previously computed validity and only recomputes when the mission actually changes. (2) mavlink_mission previously initialized the mission counter to 0 on startup, causing false 'no update' detections when the dataman counter was nonzero; the PR loads the counter from dataman so state comparisons are correct."
  },
  {
    "title": "Geofence: Disable pre-emptive geofence predictor by default",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21875",
    "number": 21875,
    "created_at": "2023-07-23T20:53:44Z",
    "merged": true,
    "merged_at": "2023-07-24T14:25:31Z",
    "state": "closed",
    "conversation": {
      "author": "junwoo091400",
      "body": "## About\r\nAs discussed in https://discuss.px4.io/t/px4-maintainers-call-may-30-2023/32372#v114-new-beta-release-5, Geofence predictor feature was not well tested / maintained, hence was agreed upon to be disabled for the 1.14 release. And this was merged with the PR: https://github.com/PX4/PX4-Autopilot/pull/21657\r\n\r\nAlthough we didn't discuss how to proceed with this feature in `main`, since it isn't actively maintained, I think it makes sense to backport this back to `main`.",
      "issue_comments": [
        {
          "author": "AlexKlimaj",
          "created_at": "2023-07-24T07:48:19Z",
          "body": "I highly support this.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR changes the default configuration to disable an untested/unsupported geofence predictor feature rather than correcting a specific incorrect algorithm, conditional, or state transition. This is a safety/default-behavior change to avoid potential problems, not a targeted fix of a concrete logic bug described in the PR text."
  },
  {
    "title": "Support Figure of eight loitering",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21852",
    "number": 21852,
    "created_at": "2023-07-14T14:59:51Z",
    "merged": true,
    "merged_at": "2023-10-31T19:58:00Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nAdd support for a figure of eight loitering pattern for fixed wing vehicles (can e.g. be used to replace orbit when tracking POIs with a limited panning gimbal). This adds the support for the MAV_CMD_DO_FIGURE_EIGHT mavlink command currently defined in the development dialect.\r\n\r\n### Solution\r\n- Add a new functionality in the FixedWingPositionControl to process a figure of eight loitering pattern. The class checks the relevant segment of the figure of eight and passes the path segment to the npfg guidance logic for lateral guidance.\r\n- Addded a configuration to enable the figure of 8 loitering. It is disabled by default since it would need the development mavlink dialect (only enabled for sitl config).\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature Support for Figure 8 loiter pattern\r\n```\r\n\r\n### Alternatives\r\n\r\n### Test coverage\r\n- Simulation tests performed in sitl.\r\n- Build tests for fmu_v5x\r\n\r\n![Screenshot from 2023-07-14 16-50-24](https://github.com/PX4/PX4-Autopilot/assets/98741601/52325dc6-6aec-4f91-9d01-c3e5d67af798)\r\n\r\n\r\n### Context\r\nTo discuss:\r\n\r\n- [ ] Currently QGCS has no support for sending this command only AMC is this a problem?\r\n- [ ] Added a kconfig parameter to disable it since we need the development mavlink dialect to enable it. But i have not found a solution to make a dependency on the development dialect. Any input on how to handle this is appreciated.\r\n",
      "issue_comments": [
        {
          "author": "tstastny",
          "created_at": "2023-09-08T14:48:57Z",
          "body": "@dagar just so that this one doesnt get kicked down the road too far:\r\n\r\n> Added a kconfig parameter to disable it since we need the development mavlink dialect to enable it. But i have not found a solution to make a dependency on the development dialect. Any input on how to handle this is appreciated.\r\n\r\ndo you have insights here how to handle? would the current action look something like default kconfiging the fig8 as disabled while there is a development mavlink link? (but then need to still make sure we have mavsdk test and a build that can run in ci.. even though on all the main binary builds it would be disabled)\r\n\r\n> no GCS implementation\r\n\r\nIs this already a nogo? or would mavsdk test be enough while this is in mavlink development.xml?\r\n\r\nIf the lack of operator command ease marks this as not good for merging now.. let's just decide quickly so that we'll take this back downstream until such point that we can bring it in more properly upstream.\r\n\r\n\r\n@KonradRudin if we proceed with this PR - you may need to check the implications of this PR on the figure eight logic #21988 ",
          "type": "issue_comment"
        },
        {
          "author": "Jaeyoung-Lim",
          "created_at": "2023-09-27T09:05:41Z",
          "body": "> Is this already a nogo? or would mavsdk test be enough while this is in mavlink development.xml?\r\n\r\n@tstastny Why not just add it to QGC :smirk:? ",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-09-27T09:10:08Z",
          "body": "> @tstastny Why not just add it to QGC 😏?\r\n\r\n@KonradRudin @RomanBapst  ^^",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-10-30T15:35:52Z",
          "body": "@dagar is this ok to go in now? before we e.g. run out of flash / need another rebase with other fixed-wing things on the docket?\r\n\r\n@KonradRudin i re-started the tailsitter test, it was failing, but i didnt see an erroneous timeout.. may actually be something wrong, can you check? https://github.com/PX4/PX4-Autopilot/actions/runs/6655895059/job/18096246149#step:17:1383\r\n",
          "type": "issue_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-10-30T16:53:43Z",
          "body": "@dagar all checks passing - should we smash the button?",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-10-31T15:59:24Z",
          "body": "@tstastny had to rebase, since it had some merge conflicts (only in the mavsdk tests).",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2023-10-25T20:03:08Z",
          "body": "This part could be \r\n```suggestion\r\n#if defined(MAVLINK_MSG_ID_FIGURE_EIGHT_EXECUTION_STATUS)\r\n```",
          "path": "src/modules/mavlink/mavlink_messages.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-10-25T20:04:42Z",
          "body": "How about we make the mavlink part dependent on `MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET`\r\n\r\nThen either drop CONFIG_FIGURE_OF_EIGHT or make it clear it's FW (with a dependency on CONFIG_MODULES_FW_POS_CONTROL).",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-10-25T20:31:23Z",
          "body": "> How about we make the mavlink part dependent on MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET\r\n\r\ndid you mean `MAVLINK_MSG_ID_FIGURE_EIGHT_EXECUTION_STATUS`?",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-10-26T12:11:24Z",
          "body": "Sounds like a good idea, thanks for the input.",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-10-26T14:16:00Z",
          "body": "@dagar the dependency is already defined in the kconfig, i guess this should be enough?",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-10-26T14:23:03Z",
          "body": "It doesn't need to be completely tied to mavlink.",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-10-26T14:26:09Z",
          "body": "Yes the mavlink part i will make only dependent on the MAVLINK_MSG_ID but the CONFIG_FIGURE_OF_EIGHT is already dependent on MODULES_FW_POS_CONTROL in the kconfig.",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-10-26T18:28:25Z",
          "body": "Hey @dagar with the new commit, i have removed the dependency to the development dialect. you can now build the figure of eight with the common, you just wont get any feedback message. ",
          "path": "boards/px4/sitl/default.px4board",
          "position": 4,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "tstastny",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR implements a new feature (figure‑of‑eight loitering) and adds configuration and guidance handling for fixed‑wing vehicles; it does not describe or correct an existing incorrect behavior or faulty conditional/state transition. The discussion and diffs indicate feature addition and configuration concerns (mavlink dialect, tests), not a fix to a logic bug."
  },
  {
    "title": "Support mavlink opaque ID",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21839",
    "number": 21839,
    "created_at": "2023-07-12T07:09:06Z",
    "merged": true,
    "merged_at": "2023-11-29T16:10:41Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nThis PR adds support for the Mavlink Mission opaque ID as defined in https://github.com/mavlink/mavlink/pull/2012. It is based on the earlier implementation for the mission checksum support in https://github.com/PX4/PX4-Autopilot/pull/18418, but the mission checksum in Mavlink will be deprecated in https://github.com/mavlink/mavlink/pull/2010.\r\n\r\n### Solution\r\n- Add an opaque Id for the mission, geofence and rally points. The opaque id is based on a Crc32 checksum as in the implementation in https://github.com/PX4/PX4-Autopilot/pull/18418\r\n- Opaque id is send from the System in the MISSION_COUNT on download. On upload, the opaque id is sent on the final MISSION_ACK\r\n- The opaque Id is also streamed continuously in the MISSION_CURRENT message, such that a GCS can detect plan changes.\r\n- The opaque id internally also replaces the mission counter, as those serves the same purpose.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: Add Support for Mavlink mission opaque Id.\r\n```\r\n\r\n### Alternatives\r\nOpqaue id could also just be a counter instead of the Crc32. The hash implementation has the advantage that on loading the same mission (e.g. also from a file) should result in the same Id and thus the potentially multiple connected GCS does not need to download it again. Also it would allow for the feature, that a GCS does not need to download the mission on first connection if the old stored mission and opaque id is the same.\r\n\r\n### Test coverage\r\n- Unit/integration test: SITL testing by observing the mavlink message sent from the system.\r\n\r\n### Context\r\n- Before this can be merged, the respective mavlink PR should be merged\r\n",
      "issue_comments": [
        {
          "author": "hamishwillee",
          "created_at": "2023-11-14T08:08:10Z",
          "body": "@KonradRudin Looks like this is getting close. Let me know when it is ready to merge and you have test results/stuff we can use to validate this (so that I can push for merging of the MAVLink changes). ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-11-20T15:26:13Z",
          "body": "As soon as https://github.com/mavlink/mavlink/pull/2012 is merged we can update the mavlink submodule and bring this in.",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-20T19:53:48Z",
          "body": "rebased on main again",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-20T19:55:20Z",
          "body": "@hamishwillee This PR was discussed now in the maintainer call and in agreement wirh @dagar . This side is ready now",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-29T10:18:14Z",
          "body": "Upstream mavlink is merged now. Update the mavlink submodule",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "ThomasDebrunner",
          "created_at": "2023-11-08T15:19:11Z",
          "body": "I assume this will have to be changed to upstream mavlink, once it is merged in upstream mavliink, right? (Before we merge here)",
          "path": ".gitmodules",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "ThomasDebrunner",
          "created_at": "2023-11-08T15:19:53Z",
          "body": "That would now be \"if changed\" and not \"if increased\", right?",
          "path": "msg/Mission.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "ThomasDebrunner",
          "created_at": "2023-11-08T15:23:11Z",
          "body": "Why is this needed?",
          "path": "src/modules/mavlink/mavlink_mission.cpp",
          "position": 223,
          "type": "review_comment"
        },
        {
          "author": "ThomasDebrunner",
          "created_at": "2023-11-08T15:24:21Z",
          "body": "I misunderstood this as some sort of CRC for the current mission item (e.g. waypoint or something). Maybe rename to \"current_mission_type_crc\" or similar?",
          "path": "src/modules/mavlink/mavlink_mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-10T08:46:01Z",
          "body": "Exactly, this PR will stay in draft because of this. I need to update this as soon as it is merged on Mavlink",
          "path": ".gitmodules",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-10T08:59:51Z",
          "body": "The mission current has now the IDs which should be periodically send. That means it should send it periodically as well, when there is no mission available, so that the ground station is informed when the mission is cleared.",
          "path": "src/modules/mavlink/mavlink_mission.cpp",
          "position": 223,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "ThomasDebrunner",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR implements a new MAVLink feature (mission opaque ID) and replaces the existing mission counter with that ID; it is an addition/protocol update rather than a fix for incorrect logic. The PR description and comments indicate feature implementation and submodule updates, with no mention of correcting incorrect conditionals, state transitions, or unintended behavior that would constitute a logic bug."
  },
  {
    "title": "geofence: fix altitude change fence check",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21806",
    "number": 21806,
    "created_at": "2023-07-05T14:11:45Z",
    "merged": true,
    "merged_at": "2023-07-07T02:39:40Z",
    "state": "closed",
    "conversation": {
      "author": "bresch",
      "body": "\r\n\r\n<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nWhen asking for an altitude change only, the lat/lon is NAN and that makes the geofence check pass regardless of the change in altitude, allowing the drone to climb above the fence.\r\n\r\n### Solution\r\nSet the lat/lon to the current position if NAN\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFix geofence when changing altitude through reposition.\r\n```\r\n\r\n### Alternatives\r\n\r\n\r\n### Test coverage\r\nSITL tests\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error. The geofence check could be bypassed when a reposition request only specified an altitude because lat/lon were NaN, causing the fence condition to evaluate incorrectly and allow climbs above the fence. The change to substitute the current position when lat/lon are NaN ensures the geofence check uses valid coordinates and prevents the unintended behavior."
  },
  {
    "title": "Navigator: Loiter: always establish new Loiter with center at current…",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/21798",
    "number": 21798,
    "created_at": "2023-07-04T08:06:08Z",
    "merged": true,
    "merged_at": "2023-07-04T15:03:14Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Port of https://github.com/PX4/PX4-Autopilot/pull/21775 to 1.14",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title indicates a behavioral change in the Navigator's loiter behavior — always establishing a new loiter centered at the current position — which addresses incorrect/undesired state handling when initiating a loiter. Porting an upstream change that modifies how the loiter center is chosen strongly suggests a fix for a logic bug (incorrect state/center selection), though the PR body lacks details so certainty is moderate."
  },
  {
    "title": "Double storage for rally points and geofence",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22533",
    "number": 22533,
    "created_at": "2023-12-13T13:50:03Z",
    "merged": true,
    "merged_at": "2024-01-30T16:25:37Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nIf there is an error during uploading of the rally points or geofence, the old fence points get overwritten and are not accessible anymore.\r\n\r\n### Solution\r\n- Extend dataman to have double storage for rally points and geofence the same way as is already done for missions\r\n- On upload write the uploaded points t othe inactive slot and switch at the end when upload was successful.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: Enable double storage slots for rally points and geofence\r\n```\r\n\r\n### Test coverage\r\n- Tested in SITL while observing the mission topic when uploading rally points and missions.\r\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2023-12-14T01:31:39Z",
          "body": "What's the memory cost?",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-12-14T14:41:16Z",
          "body": "@dagar I tested on the fmu_v5x with SYS_AUTOSTART 1100 in SIH:\r\nWhen using the SDCard:\r\nmain:\r\n![Screenshot from 2023-12-14 10-40-24](https://github.com/PX4/PX4-Autopilot/assets/98741601/2355db04-bfd0-42c1-bd70-eae9986f22c8)\r\nPR:\r\n![Screenshot from 2023-12-14 15-20-01](https://github.com/PX4/PX4-Autopilot/assets/98741601/ec3c4da8-c492-43d4-a95a-501e07f1910d)\r\n\r\nWhen writing mission on RAM:\r\nmain:\r\n![Screenshot from 2023-12-14 15-33-26](https://github.com/PX4/PX4-Autopilot/assets/98741601/ec337a76-8ff1-447d-a0c9-b03fd07f445b)\r\n\r\n\r\nPR:\r\n![Screenshot from 2023-12-14 15-26-16](https://github.com/PX4/PX4-Autopilot/assets/98741601/a52f8aa6-2be2-41a9-9ff8-25d1cc1aec0f)\r\n\r\nSo around 200 Bytes for SD Card, an around 4.5 KBytes when mission is in RAM. Do you think this is an issue?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "mcsauder",
          "created_at": "2023-12-14T14:44:19Z",
          "body": "The memory cost goes up with each point on the polygon, correct? Factor of N?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2023-12-14T15:40:54Z",
          "body": "> Do you think this is an issue?\r\n\r\nNope, just wanted to make sure we're keeping an eye on it (memory is very tight on older STM32F4 boards).",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-12-18T07:50:55Z",
          "body": "> The memory cost goes up with each point on the polygon, correct? Factor of N?\r\n\r\nSorry for the late reply @mcsauder depends on what you mean. For the mission in RAM the memory for the maximum mission/geofence/rally points is already reserved, so there wont be any additional memory cost there (and that is the reason for the difference between this PR and main, since we need to reserve double the storage in memory for geofence and rally points). When the mission is written on the SDcard, the dataman module does not need more memory depending on the mission. The only thing that is taking currently more memory when you upload bigger geofences and rally points is that the geofence and RTL mode cache all the points in memory (mission only caches the next 10 points irrespecitve of length). But that is the same both for the PR and main. So the memory difference is still the same.",
          "type": "issue_comment"
        },
        {
          "author": "mcsauder",
          "created_at": "2023-12-18T08:17:32Z",
          "body": "That makes sense to me. Are you able to demonstrate that a high degree polynomial geofence doesn't create a RAM problem? I haven't tried lately, but that was an issue I ran into.\r\n\r\n-Mark",
          "type": "issue_comment"
        },
        {
          "author": "mcsauder",
          "created_at": "2023-12-18T08:20:11Z",
          "body": "Sorry. NM, you've already addressed that.",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-12-18T08:25:45Z",
          "body": "> That makes sense to me. Are you able to demonstrate that a high degree polynomial geofence doesn't create a RAM problem? I haven't tried lately, but that was an issue I ran into.\r\n> \r\n> -Mark\r\n\r\nWell not completely but it is hard to check for all the different hardware and configs (the v5x i am testing on has still some margins at least for MC). That's why i checked the relative RAM difference but i do not know how close we already are for the other hardware and configs. ",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-01-23T08:14:56Z",
          "body": "rebased on main",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Looks good, I did not spot anything.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error where an interrupted/failed upload would overwrite the active geofence/rally data and leave the system in an inconsistent state. The change implements double-buffering (write to inactive slot and switch only on successful completion), which corrects the improper state transition/data-loss behavior; reviewer comments confirm this is the intended fix and discuss only memory tradeoffs."
  },
  {
    "title": "Navigator/FlightTaskAuto yaw handling improvements/simplifications",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22532",
    "number": 22532,
    "created_at": "2023-12-13T13:32:42Z",
    "merged": true,
    "merged_at": "2023-12-21T15:50:13Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nFixes https://github.com/PX4/PX4-Autopilot/pull/22413\r\nAlternative to https://github.com/PX4/PX4-Autopilot/pull/22455\r\n\r\nBeside it's also a proposal to make the logic around yaw setpoints in the Navigator vs FlightTasks simpler and cleaner.\r\n\r\n### Solution\r\nStrictly use the following concept: If Navigator publishes a finite yaw setpoint (`position_setpoint_tripplet.current.yaw`), then disable weather vane. This should be used if waypoints have an associated yaw setpoint (eg landings, VTOL transitions or waypoint mission items with the yaw field set). Otherwise leave authority over yaw to the FlightTask - it can then set it e.g. to direction of the next waypoint, to current yaw, or point the vehicle into the wind with the use of weather vane. \r\n\r\nThat allows us to remove the `disable_weather_vane` field from the position_setpoint.\r\n\r\nAdditionally I propose to thin out the position_setpoint topic and remove unnecessary fields: \r\n- `yaw_valid` (yaw is declared valid when `yaw` field is finite) --> we should init the yaw field to NAN ideally\r\n- `yawspeed` (doesn't seem to be used)\r\n- `yawspeed_valid`\r\n\r\nThere's also some other small cleanup proposal, check commits. \r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: FlightTaskAuto: disable wather vane if position setpoint contains yaw setpoint.\r\n```\r\n\r\n### Alternatives\r\n\r\n\r\n### Test coverage\r\nSITL tested for MC and VTOL. \r\nMC test:\r\n- Start the windy gazebo environment: `make px4_sitl gazebo_iris__windy`\r\n- Enable parameter `WV_EN`\r\n- Takeoff and RTL --> on current main it is stuck, doesn't RTL. With the fix here sets the yaw to the home_position.yaw, disables weather vane because the yaw field is finite, aligns yaw and descends. \r\n\r\n\r\n### Context\r\nWe should remove the yaw field of the Takeoff mission item in QGC, it has no effect (already previously to this PR).  Conceptionally I don't see the need of a yaw attribute to a MC takeoff, and wouldn't know what to expect (yaw once takeoff altitude achieved? Or already when climbing?)\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/26798987/971572b0-f998-42fd-9547-192d3e4d8b69)\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-12-14T12:19:13Z",
          "body": "@MaEtUgR addressed your comments and additionally fixed the init of the triplet.yaw to NAN.\r\nThe mission_item should already be correctly initialized through `MissionBlock::initialize()`.",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-12-15T11:52:46Z",
          "body": "Hi @sfuhrer, thanks for taking the time to look at this issue, I just tested it and it solves the problem I was having (#22413). I did have one thought regarding this solution:\r\n\r\nIf weather vane is disabled when a finite yaw setpoint is given, it will always be disabled during RTL, as there is currently always a yaw setpoint given. This may be a problem in the case of an asymetric airframe or a vehicle with a lifting surface, where it may be desirable to point into the direction of the wind the entire time. A parameter to not provide a yaw setpoint (enable weather vane) during RTL might be useful in some use cases. Hope this makes sence.",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-15T13:21:19Z",
          "body": "\r\n> If weather vane is disabled when a finite yaw setpoint is given, it will always be disabled during RTL, as there is currently always a yaw setpoint given. \r\n\r\nValid input! I already kicked off the discussion about removing the special yaw handling for RTL, see https://github.com/PX4/PX4-Autopilot/pull/18170#issuecomment-1852019861. Though maybe we should remove it, but instead add a new option for RTL_HDG_MD, \"no yaw setpoint\"? Then the FlightTask would decide on the yaw setpoint, and if WV is enabled it would keep working.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-12-18T09:47:10Z",
          "body": "A new \"no yaw setpoint\" option for RTL_HDG_MD  sounds good to me. \r\nAs for removing the current yaw handling, using the home heading for RTL can be useful as its much easier/safer take over control during take off and landing when the vehicle is facing away from you. ",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-21T15:54:09Z",
          "body": "> A new \"no yaw setpoint\" option for RTL_HDG_MD sounds good to me.\r\n\r\n@TedObrien could you take over the implementation?",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-12-21T16:29:19Z",
          "body": "@sfuhrer Happy to give it a go, should have some time in the new year.\r\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "MaEtUgR",
          "created_at": "2023-12-13T15:44:13Z",
          "body": "```suggestion\r\nfloat32 yaw\t\t\t# yaw (only in hover), in rad [-PI..PI), NaN = leave to flight task\r\n```",
          "path": "msg/PositionSetpoint.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2023-12-13T15:52:15Z",
          "body": "```suggestion\r\n```\r\n\r\nGot obsolete.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2023-12-13T15:56:09Z",
          "body": "Also remove `yaw = get_local_position()->heading;` from `calculate_breaking_stop()`",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2023-12-13T16:05:04Z",
          "body": "```suggestion\r\n\t\t\t\trep->current.yaw = NAN;\r\n```",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-14T12:17:04Z",
          "body": "done in 7c9aebe0497f504ae8a7afa1c06d0f578bdc70a8",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-14T12:17:35Z",
          "body": "done in 83f23912bf7fa37859b92f28d66100bca756eb93, and made sure it's set to NAN instead in 81e2662fea71d1f95f113de51c8f381472310a05",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-14T12:17:49Z",
          "body": "done in 81e2662fea71d1f95f113de51c8f381472310a05",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "Really nice cleanup. Instead of hardcoding a heading for each waypoint from the current vehicle state (ignoring resets) let the trajectory handle the yaw if there's no specific absolute desired heading 👍 \r\n\r\nLet's make sure it gets reset to NAN in all those cases otherwise it takes the previous heading.",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "Thanks, everything I saw in my review was addressed.\r\nIt's a good step forward allowing to have the controller handle yaw if it's not explicitly set to a certain angle.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error in yaw authority and weather-vane handling: previously the interaction between Navigator-published yaw and FlightTask/WeatherVane could leave the vehicle in an incorrect state (e.g. stuck on RTL). The change makes the logic explicit (finite yaw setpoint => disable weather vane, otherwise let FlightTask control yaw), initializes yaw to NAN, and removes redundant fields, which corrects the incorrect behavior and state transitions described and verified in SITL tests."
  },
  {
    "title": "Add mission point check when update the geofence",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22531",
    "number": 22531,
    "created_at": "2023-12-13T06:41:05Z",
    "merged": false,
    "merged_at": null,
    "state": "open",
    "conversation": {
      "author": "Drone-Lab",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\n\r\n1.  https://github.com/PX4/PX4-Autopilot/blob/c5101c70b31aa0c1454162c6ad1420e5af8086b2/src/modules/navigator/mission_feasibility_checker.cpp#L108 I've found that the MissionFeasibilityChecker()  is only triggered correctly when updating a mission.  when only updating a geofence,user need to click upload twice to invoke check function. Currently, the geofence update only checks the origin and the current position associated with the geofence, and I've added a check for mission waypoints to make the check on upload more complete.The problem is related to the state machine and asynchronous message reading in geofence.cpp.The checkMissionAgainstGeofence() is written in the mission and the geofence is still being read when the mission has finished uploading and checking.\r\n \r\n![%`%3Z`6)VGYLVSF_)N0L{BT](https://github.com/PX4/PX4-Autopilot/assets/151698793/38b3fe89-4ed8-47d7-8822-c5254984f679)\r\n\r\nFixes #{#22362}\r\nIn this bug issue , @czbxzm said ,\"1. When swapping the order, uploading the mission waypoint routes first and then plotting the no-fly zones does not trigger any checks, even if there is an overlap between the two;\"Actually this check triggers, but requires a second click on upload.(in the version reporting this bug issue)\r\n\r\n\r\n### Solution\r\n\r\n1. I've added a check for mission waypoints when update geofence.\r\n \r\n![95$0I@SC~0)3RA G`Q2XMCR](https://github.com/PX4/PX4-Autopilot/assets/151698793/d96db40e-0b0e-4061-9a9c-358a5bde2268)\r\n\r\n\r\n### Test coverage\r\n\r\n test on jmavsim/gz_x500 and QGC\r\n\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-12-22T12:31:10Z",
          "body": "I think this could be fine. It would make you change the mission first if it would validate the planned GF, and then you can also update the GF.",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-22T12:31:31Z",
          "body": "Curious for other inputs though, @dagar @MaEtUgR ?",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-18T01:42:55Z",
          "body": "Thank you for your advice.\r\n> it is checked again before the mission is executed and a geofence violation is caught at that time (though you don't have immediate feedback in QGC). \r\n\r\nI don't consider this to be a reasonable solution. And we've had discussions about it before,  it could pose issues in certain scenarios.https://github.com/PX4/PX4-Autopilot/pull/22394#issuecomment-1858063715\r\n\r\n> Also to not have a data race by writing and reading to the fence on the same time, there is another PR to add double geofence storage here: #22533. \r\n\r\nI agree with you that the drone needs double storage for geofence to separate checking and runing.\r\n\r\n> Further you could call check_mission_valid https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L696 periodically as this checks if the geofence is changed since the last evaluation and runs it again.\r\n\r\nI'm concerned that periodically calling this function might introduce unnecessary overhead.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-01-18T08:32:45Z",
          "body": "> > it is checked again before the mission is executed and a geofence violation is caught at that time (though you don't have immediate feedback in QGC).\r\n> \r\n> I don't consider this to be a reasonable solution. And we've had discussions about it before, it could pose issues in certain scenarios.[#22394 (comment)](https://github.com/PX4/PX4-Autopilot/pull/22394#issuecomment-1858063715)\r\n> \r\n\r\nI agree on this and we should change that, and it is good that you take some initiative here.\r\n\r\n> > Further you could call check_mission_valid https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L696 periodically as this checks if the geofence is changed since the last evaluation and runs it again.\r\n> \r\n> I'm concerned that periodically calling this function might introduce unnecessary overhead.\r\n\r\nYeah it potentially does, But the check if the mission feasibility checker is with the most recent data should be minimal and other overheads might be the Same as your solution, no?\r\nAlso for short term fixes, i have no better idea. Your solution runs it drectly on upload which is preferable, but then you should reflect this evaluation in the mission result uorb topic as its done here https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L702-L707 such that it is not run again by the mission feasibility checker. The problem is then, that if e.g. the home position is changed, it is still not run again, up until the mission is started. Also now, it is checked once the geofence is uploaded and once the mission is uploaded, which means if you upload a new mission with new geofence, it is evaluated once on outdated data, depending which one is uploaded first.\r\n\r\nI also already have though about how to do the checking properly, but the above problem makes it difficult. i think that QGC always send the mission, geofence, and rally points, irrespective of what you have actually changed. But with mavlink in general you should be able to send only what you actually have changed. Also if you change both and upload them, you would preferably run the check only once after both are uploaded, else you would do the evaluation on outdated data. But there is currently no way of knowing if another upload is pending except maybe waiting for a short amount of time and checking if another mission upload is in progress. Maybe there is also something mission in MAVLINK itself to solve this.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-18T13:25:33Z",
          "body": "> but then you should reflect this evaluation in the mission result uorb topic as its done here https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L702-L707 such that it is not run again by the mission feasibility checker. \r\n\r\nIs the 'reflect' necessary here? I'm not sure about its intended meaning. Currently, this patch does not trigger a recheck of the geofence by the mission feasibility checker.Because if geofence not feasible,it will not be added.\r\n\r\n> The problem is then, that if e.g. the home position is changed, it is still not run again, up until the mission is started. \r\n\r\nWe have discussed this topic here.Welcome more advice.https://github.com/PX4/PX4-Autopilot/issues/22373\r\n\r\n> Also now, it is checked once the geofence is uploaded and once the mission is uploaded, which means if you upload a new mission with new geofence, it is evaluated once on outdated data, depending which one is uploaded first.\r\n\r\nI don't think this is a problem.The ultimate outcome remains: Illegal missions and geofences will be rejected.\r\n\r\n> IAlso if you change both and upload them, you would preferably run the check only once after both are uploaded, else you would do the evaluation on outdated data. \r\n\r\nI agree with you .As I mentioned, the checkMissionAgainstGeofence() is written in the mission module. I believe this is the root cause.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-01-18T14:12:38Z",
          "body": "> > but then you should reflect this evaluation in the mission result uorb topic as its done here https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L702-L707 such that it is not run again by the mission feasibility checker.\r\n> \r\n> Is the 'reflect' necessary here? I'm not sure about its intended meaning. Currently, this patch does not trigger a recheck of the geofence by the mission feasibility checker.Because if geofence not feasible,it will not be added.\r\n\r\nAh, i missed that, so if the mission violates the geofence, the geofence is ignored, correct? The mission feasibility checker makes the opposite, it defines the mission as invalid and wont let you execute the mission. So what i meant with 'reflect' is if the geofence is violated, you should define the mission as invalid as well. So with your approach you would now get the warning in QGC but you could execute the mission and it would fly out of the geofence, if i'm understanding this correctly. That would lead to unsafe behavior.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-19T01:11:13Z",
          "body": "> So with your approach you would now get the warning in QGC but you could execute the mission and it would fly out of the geofence, if i'm understanding this correctly. That would lead to unsafe behavior.\r\n\r\nDon't  worry about the unmanned aerial vehicle carrying out the geofence breaching mission, as the mission always undergoes an feasibility check and upload process before the geofence.",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-19T01:14:12Z",
          "body": "\r\nIf you are interested in \"the mission always before the geofence,\" you can obtain more details here. \r\n### Details\r\n\r\n1. When the ground control station upload mission or geofence to the drone.In geofence.cpp, there is a state machine designed to read geofence data from ourb and load it onto the drone, as illustrated in the following picture.\r\n   <p align=\"center\">\r\n     <img src=\"https://user-images.githubusercontent.com/151698793/294857321-53c6d894-448a-4130-85ae-30ab7e12e171.png\" width=\"622\" />\r\n   </p>\r\n   This functionality is called within a while(1) loop in navigator_main.cpp.\r\n\r\n   https://github.com/PX4/PX4-Autopilot/blob/cf840ff3731d8bebf65e79bd8c9c7bbd8d29d404/src/modules/navigator/navigator_main.cpp#L893  \r\nThe read and load operations within it utilize **asynchronous** reading, ensuring that they do not block the function loop.\r\nhttps://github.com/PX4/PX4-Autopilot/blob/cf840ff3731d8bebf65e79bd8c9c7bbd8d29d404/src/modules/navigator/geofence.cpp#L111-L112\r\nhttps://github.com/PX4/PX4-Autopilot/blob/cf840ff3731d8bebf65e79bd8c9c7bbd8d29d404/src/modules/navigator/geofence.cpp#L155-L163\r\n \r\n2. When the ground control station upload mission or geofence to the drone.In mission_feasibility_checker.cpp, **synchronous** reading is employed to retrieve updates for the mission, and to check for potential conflicts between the mission and geofence.\r\nhttps://github.com/PX4/PX4-Autopilot/blob/20129e63facab129ad31fa693d1397e7458afaa4/src/modules/navigator/mission_feasibility_checker.cpp#L122-L123\r\nThis functionality is called within a while(1) loop in navigator_main.cpp too.\r\nhttps://github.com/PX4/PX4-Autopilot/blob/20129e63facab129ad31fa693d1397e7458afaa4/src/modules/navigator/navigator_main.cpp#L873-L877\r\n\r\n3. This is the cause of the issue. When on the ground control station, both the geofence and mission are updated simultaneously. The geofence undergoes multiple state transitions through the state machine (with each state transition requiring the execution of a while(1) loop), and it is only after asynchronous reading that the geofence data can be loaded for the mission_feasibility_checker to examine.\r\nTherefore, when the mission_feasibility_checker utilizes synchronous reading to obtain mission data, the geofence data involved in the check has not yet been updated. Consequently, the check is performed with outdated geofence data, resulting in the failure of the checker.",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2024-01-30T16:38:39Z",
          "body": "Hey @KonradRudin can you please check-in with us on this one? we want to help move it forward and have a few ideas",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-02-05T12:26:49Z",
          "body": "Sorry, was away last week. So basically we need to make sure that the geofence module has already properly loaded the geofence data before we can test for it right? ",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-02-05T13:19:32Z",
          "body": "Alternatively, add a check after successful upload?",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-02-05T13:40:35Z",
          "body": "> Alternatively, add a check after successful upload?\r\n\r\nYou mean after successful loading into cache i presume? Yes, as a first step we can force it to check again after successfully loading the geofence.",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-02-05T14:44:21Z",
          "body": "what's the further plans? making geofence sync read and adding locks or semaphores?\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-02-05T17:42:46Z",
          "body": "> what's the further plans? making geofence sync read and adding locks or semaphores?\r\n\r\nNo, the caching is fine. But the geofence should be more a service module as well as send an uorb message if it has loaded the new geofence set.\r\n\r\nMaybe for your short term problem we could add a new geofence uorb message, which sends the ID of the loaded geofence. And if this message is updated, other system like the mission feasibility checker know to recheck?",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-02-08T02:05:49Z",
          "body": "I agree with your opinion. Do you need me to further modify the pull request according to this requirement?",
          "type": "issue_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2024-02-09T07:10:55Z",
          "body": "It depends on your timeline. I also would like to improve the mission feasibility checks a bit and make it independent of the mission, but i won't have time right now. So any help input is appreciated, and this would be a good first incremental step.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "KonradRudin",
          "created_at": "2024-01-17T15:16:59Z",
          "body": "Why not reuse the code from https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_feasibility_checker.cpp#L108-L109? This is harder to maintain and currently does not work with non position mission items. ",
          "path": "src/modules/navigator/geofence.cpp",
          "position": 17,
          "type": "review_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-18T01:35:46Z",
          "body": "> Why not reuse the code from https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_feasibility_checker.cpp#L108-L109? This is harder to maintain and currently does not work with non position mission items.\r\n\r\nI made partial modifications to the code based on reference here.The code here cannot be directly used. This is because it checks using the geofence that has already been successfully uploaded, while we now need to perform pre-upload checks for the geofence.",
          "path": "src/modules/navigator/geofence.cpp",
          "position": 17,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "KonradRudin",
          "created_at": "",
          "body": "\r\nHey, i dont think this is the way to go. As you stated, there is already the check here https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_feasibility_checker.cpp#L108-L109 and your new function is basically a reimplementation of it. I know that this function is executed as soon as a mission is uploaded, and thus it could be that a geofence upload is in progress and the mission is not checked with the right geofence, which would result in a wrong evaluation. However, it is checked again before the mission is executed and a geofence violation is caught at that time (though you don't have immediate feedback in QGC). Also to not have a data race by writing and reading to the fence on the same time, there is another PR to add double geofence storage here: https://github.com/PX4/PX4-Autopilot/pull/22533. I think the way to go would be to decouple the mission feasibility checker from the mission and run the checks if the home position, geofence, or mission changed, and there is no mavlink mission upload in progress. As a short term fix i would suggest changing the order in which QGC is uploading the mission and make sure that the geofence are uploaded before the mission is uploaded. Further you could call check_mission_valid https://github.com/Drone-Lab/PX4-Autopilot/blob/5490f8913bd26ac04d59908271ce9c5e6a1bd414/src/modules/navigator/mission_base.cpp#L696 periodically as this checks if the geofence is changed since the last evaluation and runs it again.",
          "state": "COMMENTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR targets an incorrect-behavior bug: mission feasibility checks run against stale/outdated geofence data (causing the need to upload twice). Adding a mission-waypoint check on geofence update directly addresses that faulty behavior so uploads produce the expected immediate validation. However, reviewers note this is a workaround / reimplementation of existing logic and may not fully resolve the underlying race/state-machine issue, so it fixes the symptom but not the deeper architectural race condition."
  },
  {
    "title": "Navigator: Avoid attitude stepoint resets by not going into Takeoff mode if VTOL_Takeoff is selected in-air",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22519",
    "number": 22519,
    "created_at": "2023-12-11T13:22:29Z",
    "merged": true,
    "merged_at": "2023-12-11T13:35:57Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Port of https://github.com/PX4/PX4-Autopilot/pull/22518",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the navigator's mode transition logic to avoid entering Takeoff when VTOL_Takeoff is selected in-air, preventing unintended attitude setpoint resets. This addresses an incorrect state transition/conditional that produced undesired behavior, so it fixes a logic error."
  },
  {
    "title": "Navigator: Avoid attitude stepoint resets by not going into Takeoff mode if VTOL_Takeoff is selected in-air",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22518",
    "number": 22518,
    "created_at": "2023-12-11T10:33:40Z",
    "merged": true,
    "merged_at": "2023-12-11T13:18:22Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\nAttitude resets happening when switching to Mission mode with VTOL_Takeoff selected in-air.\r\n\r\nChain:\r\n- Navigator sets the type to SETPOINT_TYPE_TAKEOFF for one sample\r\n- FW position controller goes into _control_mode_current= FW_POSCTRL_MODE_AUTO_TAKEOFF\r\n- FW position controller executes control_auto_takeoff() --> resets integrals [here](https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/fw_pos_control/FixedwingPositionControl.cpp#L1552)\r\n\r\n### Solution\r\nNavigator: Avoid attitude stepoint resets by not going into Takeoff mode if VTOL_Takeoff is selected in-air\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Navigator: Avoid attitude stepoint resets by not going into Takeoff mode if VTOL_Takeoff is selected in-air.\r\n```\r\n\r\n### Test coverage\r\nSITL\r\n\r\n### Context\r\nReproducible in SITL (start mission with VTOL_Takeoff, change mission in-air, re-upload, start mission again).\r\n\r\nWithout the fix: \r\n![image](https://github.com/Auterion/PX4_firmware_private/assets/26798987/30ae797d-3aff-4e5b-b89c-2e8cb82cd929)\r\n\r\nWith the fix:\r\n\r\n![image](https://github.com/Auterion/PX4_firmware_private/assets/26798987/cc97cc83-bbfd-46d9-b5d3-cefe0bd1b7ad)\r\n\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an incorrect state transition/conditional in the Navigator that temporarily setpoint type to TAKEOFF in-air, causing the fixed-wing controller to enter AUTO_TAKEOFF and reset integrals/attitude setpoints. Preventing the transient switch when VTOL_Takeoff is selected avoids the unintended controller behavior and fixes the logic bug that produced undesired attitude resets."
  },
  {
    "title": "Navigator: mission_block: reduce margin to enforce aligned exit course to 105% of the loiter radius",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22511",
    "number": 22511,
    "created_at": "2023-12-08T10:43:56Z",
    "merged": true,
    "merged_at": "2023-12-21T15:58:22Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "This margin helps to not have a vehicle stuck at a loiter waypoint if it is not perfectly tracked, (vehicle outside of path setpoint) and the next waypoint is just at the border of the loiter.\r\nIt should though be as small as necessary, as otherwise, with good loiter tracking,  waypoints that are close but not right on the loiter radius are not enforcing the exit course neither.\r\n\r\nThe previous margin of 120% seems rather a bit too high, I propose 105% here.\r\n\r\nReduces the likelihood of ugly loiter exits like this one here, where the loiter radius is huge and the distance to the next WP is small:\r\n\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/26798987/9b4d24f9-586c-451c-8587-387d8aa7c7eb)\r\n\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "Seems valid, but if it's an issue for anyone after this I suppose it needs to be configurable.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR adjusts a boundary/threshold used to decide when to enforce an aligned loiter exit course (from 120% to 105% of loiter radius). That threshold affected state transitions at loiter boundaries and produced incorrect/outside-desired behavior (stuck or ugly exits). Reducing the margin corrects this boundary-condition logic and prevents the undesired behavior."
  },
  {
    "title": "Add mission point check when update the geofence",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22469",
    "number": 22469,
    "created_at": "2023-11-30T17:06:48Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "Drone-Lab",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\n\r\n1.  https://github.com/PX4/PX4-Autopilot/blob/c5101c70b31aa0c1454162c6ad1420e5af8086b2/src/modules/navigator/mission_feasibility_checker.cpp#L108 I've found that the MissionFeasibilityChecker()  is only triggered correctly when updating a mission.  when only updating a geofence,user need to click upload twice to invoke check function. Currently, the geofence update only checks the origin and the current position associated with the geofence, and I've added a check for mission waypoints to make the check on upload more complete.The problem is related to the state machine and asynchronous message reading in geofence.cpp.The checkMissionAgainstGeofence() is written in the mission and the geofence is still being read when the mission has finished uploading and checking.\r\n \r\n![%`%3Z`6)VGYLVSF_)N0L{BT](https://github.com/PX4/PX4-Autopilot/assets/151698793/38b3fe89-4ed8-47d7-8822-c5254984f679)\r\n\r\n2. Regarding the issue of being unable to perform geofence breach checks for the home point using VEHICLE_CMD_DO_SET_HOME in commander.cpp due to geofence not being available in the navigator, the following solution is proposed:**When the drone switches to RTL mode, check whether the home point triggers a geofence breach.**\r\nHowever, at present, we only return the result and have successfully tested it. We have not yet implemented handling for the detected issues and event notifications because there may be some irregularities or issues in the code. We would appreciate your feedback on this matter.\r\n\r\nFixes #{#22362}\r\nIn this bug issue , @czbxzm said ,\"1. When swapping the order, uploading the mission waypoint routes first and then plotting the no-fly zones does not trigger any checks, even if there is an overlap between the two;\"Actually this check triggers, but requires a second click on upload.(in the version reporting this bug issue)\r\n\r\n#｛#22373｝\r\nIn this bug issue, @BladeY1 said,\"In SITL simulation, we observed that the Home point can be arbitrarily set by the operator. Since Return to Launch (RTL) navigates the drone back to the Home point, inadvertent placement of the Home point within a no-fly zone can result in the drone breaching no-fly zone checks or entering the restricted area when the operator manually selects RTL. We validated this behavior using a drone equipped with PX4 flight control. It indeed demonstrated the ability to enter a no-fly zone through the aforementioned actions.We believe that operators typically intend to avoid their drones entering no-fly zones to prevent potential damage or safety incidents. No-fly zones, often manually designated by operators, are crucial in areas like airports, amusement parks with high-altitude ride systems, or locations with dense obstacles such as forests, lakes, and clusters of buildings.\"\r\n\r\n\r\n\r\n### Solution\r\n\r\n1. I've added a check for mission waypoints when update geofence.\r\n \r\n![95$0I@SC~0)3RA G`Q2XMCR](https://github.com/PX4/PX4-Autopilot/assets/151698793/d96db40e-0b0e-4061-9a9c-358a5bde2268)\r\n\r\n2. When the drone switches to RTL mode, check whether the home point triggers a geofence breach.\r\n\r\n\r\n### Test coverage\r\n\r\n test on jmavsim/gz_x500 and QGC\r\n\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "Drone-Lab",
          "created_at": "2023-12-01T01:17:22Z",
          "body": "Hello! @sfuhrer  83f3665d9576b453142196c2e4725e46728d1f46  I think this is an addition to this commit to make it more complete.",
          "type": "issue_comment"
        },
        {
          "author": "czbxzm",
          "created_at": "2023-12-01T09:04:31Z",
          "body": "It seems correct now. The system performs checks and displays a pop-up window when updating the geofence.(Previously, the pop-up window would only appear when updating the mission.)",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2023-12-03T02:11:28Z",
          "body": "@dagar  Let me know what you think about this ,thx.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect runtime behavior: geofence updates previously did not check mission waypoints (requiring a second upload to trigger the feasibility check) and did not check the home point on RTL. The changes add mission waypoint checks during geofence updates and a home-point geofence check on RTL, which corrects the state/flow that caused missed breach detections; reviewer comments and tests confirm the behavior is now triggered as expected."
  },
  {
    "title": "Navigator: add set_gimbal_neutral() logic",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22458",
    "number": 22458,
    "created_at": "2023-11-29T14:54:23Z",
    "merged": true,
    "merged_at": "2023-12-01T12:19:09Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "\r\n### Solved Problem\r\n- cameras have higher chance to get damaged when pointing down (like they do while flying a survey)\r\n- on Holding a survey mission, most users seem to prefer to have the camera pan upwards such that they can look at the surroundings\r\n\r\n### Solution\r\nIntroduce set_gimabl_neutral() method that sets `gimbal_manager_set_attitude_s::GIMBAL_MANAGER_FLAGS_NEUTRAL`. Call it on entering RTL and Land flight modes, as well as when in a mission and the next item is Land, or on pausing a mission.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nFeature: set gimbal to neutral (horizontal) in Landing scenarios and on pausing a Mission\r\n```\r\n\r\n### Test coverage\r\nSITL tested. \r\n",
      "issue_comments": [
        {
          "author": "julianoes",
          "created_at": "2023-12-03T18:42:52Z",
          "body": "One thing to note is that this will set the gimbal to neutral even if it is controlled manually. I guess that's what we want, right?\r\n\r\nAnd also, to be pedantic, this should probably be [retracted](https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_FLAGS_RETRACT), however, that's not really implemented anywhere, or at least not any different from neutral, so :man_shrugging:.",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-05T09:18:34Z",
          "body": ">One thing to note is that this will set the gimbal to neutral even if it is controlled manually. I guess that's what we want, right?\r\n\r\nThat's the feedback we got from users, yeah. Better be on the safe side and set it to neutral once too often than risking damage on the landing.\r\n\r\n> And also, to be pedantic, this should probably be [retracted](https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_FLAGS_RETRACT), however, that's not really implemented anywhere, or at least not any different from neutral, so 🤷‍♂️.\r\n\r\nGood point. I guess not enough people care yet about the retraction.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces new behavior to set the gimbal to a neutral position on RTL, Land, mission pause, and when next mission item is Land. That is a safety/feature addition to reduce damage risk, not a correction of an existing incorrect conditional or algorithm; it adds intended state changes rather than fixing a logic bug."
  },
  {
    "title": "Ignore mission yaw setpoints in WV_EN enabled",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22455",
    "number": 22455,
    "created_at": "2023-11-29T10:02:29Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "TedObrien",
      "body": "Remade PR #22413 on main as requested.\r\n\r\nSee #22413 for further details",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-12-13T13:46:58Z",
          "body": "Thanks for your contribution @TedObrien ! It's a very good point that you raised, and while looking at your proposal I saw some fundamental flaws in the current architecture that I propose to fix in https://github.com/PX4/PX4-Autopilot/pull/22532. In case that comes in we can close that one here. Please feel free to test it yourself and comment on it!",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-12-21T16:30:09Z",
          "body": "fixed in #22532",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description indicate a behavioral change — ignoring mission yaw setpoints when WV_EN is enabled — which corrects incorrect control logic/intent in a specific mode. Review comments confirm this was a valid behavioral issue (and subsequently addressed in PR #22532), so the change targets a logic error rather than a style/syntax fix."
  },
  {
    "title": "Minor mission fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22434",
    "number": 22434,
    "created_at": "2023-11-23T08:35:36Z",
    "merged": true,
    "merged_at": "2023-11-24T07:10:07Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "2 smaller things I found when going through the code:\r\n- [fix comparison logic for saving mission state](https://github.com/PX4/PX4-Autopilot/commit/96c2b51a9b5c32684699b1a47ae21554bc68c8cf)\r\n- [publish mission after updating dataman](https://github.com/PX4/PX4-Autopilot/commit/d982dde3d181b22d140af3e5d811a243333a2f4a)",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "KonradRudin",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR explicitly fixes incorrect comparison logic used when deciding to save mission state (a conditional/logic bug) and ensures the mission is published after updating dataman (a state propagation/consistency issue). Both changes address incorrect program behavior rather than style or syntax, so they resolve logic errors."
  },
  {
    "title": "Ignore mission yaw setpoints in `WV_EN` enabled",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22413",
    "number": 22413,
    "created_at": "2023-11-20T14:27:31Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "TedObrien",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nIn mission mode or return mode, weather-vaning can cause the drones' heading to change by more than MIS_YAW_ERROR. This causes the drone to remain at its current mission setpoint indefinitely.\r\n\r\nFixes #22355\r\n\r\n### Solution\r\nAdded a conditional to make `_waypoint_yaw_reached = true` if `WV_EN` is enabled and `position_setpoint.disable_weather_vane=false`\r\n\r\n### Test coverage\r\n- Tested in sitl with the windy environment. \r\n- Ran a mission specifying yaw setpoints at each waypoint\r\n- with `WV_EN=1` vehicle ignored yaw setpoints and completed the mission pointing into the wind (https://review.px4.io/plot_app?log=f0720db6-dd2e-486d-8d38-dfa08e58048f)\r\n- with  `WV_EN=0` the vehicle follows yaw setpoints specified in the mission (https://review.px4.io/plot_app?log=f95a52a1-3710-491d-a8d1-3655c709ccb9)\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "danielhonies",
          "created_at": "2023-11-21T16:42:07Z",
          "body": "Thanks for the PR, I would recommend to write this one line a bit cleaner. ",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-11-22T09:54:39Z",
          "body": "Good call, just modified that line.\r\n\r\nThanks",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-11-28T11:11:47Z",
          "body": "Can you first make the PR again `main`? And then we can port it to the release branch (1.14) as well. \r\n\r\nI'm curious for the use case: why do you want to specify yaw angles at the waypoints AND enable weather-vane? And shouldn't in that case the right thing be to fix the broken `position_setpoint.disable_weather_vane` reporting (if the waypoint enforces a yaw then this setpoint flag should be set to true )?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-11-28T17:29:15Z",
          "body": "Hello, I encountered a problem initially (#22355), where the drone would sometimes loiter indefinitely during RTL due to the heading not meeting the acceptable yaw error (caused by weather-vaning). Although my usage doesn't involve setting specific yaw angles at mission waypoints, RTL mode appears to use mission setpoints with specified yaw angles that prevents the drone's progression to the next phase of RTL.\r\n\r\nFor context, my application involves a multi-copter equipped with an anemometer, requiring alignment with the wind direction.  Using `position_setpoint.disable_weather_vane` for landing purposes works well in this scenario. However, for a vehicle with a lifting surface, maintaining the current heading into the wind during RTL might be more appropriate.\r\n\r\nHopefully this makes sense, I'll redo the PR on main.\r\n\r\nThanks\r\n",
          "type": "issue_comment"
        },
        {
          "author": "TedObrien",
          "created_at": "2023-11-29T10:03:13Z",
          "body": "Just made a new PR from main #22455",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "danielhonies",
          "created_at": "",
          "body": "(_navigator->get_weathervane_enabled() == true) && (pos_sp_triplet->current.disable_weather_vane == false) -> _navigator->get_weathervane_enabled() &&  ! pos_sp_triplet->current.disable_weather_vane ",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the logic that determines whether a waypoint yaw is considered reached: when weather-vane is enabled and the setpoint does not disable weather-vane, the code now forces _waypoint_yaw_reached = true. This prevents the vehicle from getting stuck waiting for a yaw that will never be met due to weather-vaning (an incorrect state/transition), and the author validated the behavior in SITL tests. Review comments only suggested a stylistic simplification of the added conditional, not a change in intent."
  },
  {
    "title": "Navigator: Geofence improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22394",
    "number": 22394,
    "created_at": "2023-11-16T15:20:26Z",
    "merged": true,
    "merged_at": "2023-11-23T02:45:02Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "### Solved Problem\r\n\r\nFixes: \r\n1) listen to GF_SOURCE (fixes https://github.com/PX4/PX4-Autopilot/issues/20677)\r\n2) do not constantly send new reposition waypoints when GF is breached as a fixed-wing\r\n\r\nNew features:\r\n3) if armed, do not allow to upload GF that would immediately trigger\r\n4) do not allow to upload GF if it doesn't contain Home (to not break RTL)\r\n\r\nFunctional changes (neither new features nor fixes):\r\n5) has to be in all inclusion GF \r\n6) remove GF_ALTMODE (with the big baro offset usually present this is quite unusable)\r\n7) remove GF_COUNT (don't see need, don't find it intuitive)\r\n8) change messaging\r\n9) some code cleanup\r\n\r\n### Solution\r\n1) correctly listen to it.\r\n2) if GF_ACTION is HOLD, and GF is breached: stay in the \"GF breached mode\" until the current loiter is changed (through new reposition or change of mode) --> see https://github.com/PX4/PX4-Autopilot/commit/66ca5c294952689e0775c5136ad0d7f6604a2d17\r\n3) check GF breach in update function, and stop updating the current GF if it would immediately get breached --> see https://github.com/PX4/PX4-Autopilot/commit/83f3665d9576b453142196c2e4725e46728d1f46\r\n4) check GF breach in update function, and stop updating the current GF if it doesn't contain Home --> see https://github.com/PX4/PX4-Autopilot/commit/83f3665d9576b453142196c2e4725e46728d1f46\r\n5) Change logic that all GF action already gets triggered when the GF leaves one inclusion GF, not only when outside of all inclusion GF. \r\nI'm not entirely sure what we want, but for me it seems cleaner that way.\r\n6) remove it.\r\n7) remote it.\r\n8) see https://github.com/PX4/PX4-Autopilot/commit/8e1c3e8093e3da0dbe9a276eb01d2672d7cd190b:\r\n - geofence_result.cpp contains to contain separate fields for the 3 geofence types\r\n -  remote \"primary\" from messages, as we don't distinguish primary vs secondary etc\r\n - do all user notification due to GF breach from Commander\r\n9) various \r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Geofence: correctly listen to GF_SOURCE\r\nBugfix: Geofence: do not constantly send new reposition waypoints when GF is breached as a fixed-wing\r\nFeature: Geofence: if armed, do not allow to upload GF that would immediately trigger\r\nFeature: Geofence: do not allow to upload GF if it doesn't contain Home (to not break RTL)\r\nDocumentation: TODO\r\n```\r\n\r\n### Alternatives\r\nWe should also fix the pre-emptive geofence triggering (GF_PREDICT=1). I haven't touched that in this PR, and even split it up further (without GF_PREDICT=1 it will now always set the Hold point at the position it is currently at).\r\n\r\n### Test coverage\r\nSITL tested\r\n\r\n### Context\r\nScreen recording with current main, where issues 4) and 2) are visible:\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/assets/26798987/87cd8a30-1768-493f-afa6-9ce8dc84ac27\r\n\r\nScreen recording of this PR, where the new features 3) and 4) are shown, plus fixed 2):\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/assets/26798987/2469124f-63e4-4f1e-9ac4-5315b2d020da\r\n\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "MaEtUgR",
          "created_at": "2023-11-21T16:48:02Z",
          "body": "Maintainers call: Would be nice to have an automated test for this e.g. MAVSDK test using https://github.com/mavlink/MAVSDK/blob/main/examples/geofence/geofence.cpp",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-15T15:08:42Z",
          "body": "> Hello @sfuhrer ! It appears there might be a potential issue with the invocation of the checkMissionAgainstGeofence() function when only the geofence undergoes an update [484a44e](https://github.com/PX4/PX4-Autopilot/commit/484a44e5e97c24ef74d108d26725d38f73db5e39) . The problem is related to the state machine and asynchronous message reading in geofence.cpp.I'm here to assist further if needed.\r\n\r\nHi! Do you mean that when you update the geofence, you would want the mission feasibility checks to be run immediately against it, and then\r\n- (A) reject the geofence update if the mission feasibility check then would fail\r\n- (B) make the mission invalid\r\n\r\n?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2023-12-15T15:29:08Z",
          "body": "\r\n> Hi! Do you mean that when you update the geofence, you would want the mission feasibility checks to be run immediately against it, and then\r\n> \r\n> * reject the geofence update if the mission feasibility check then would fail\r\n> * make the mission invalid\r\n\r\nYes.\r\n\r\nCurrently, the same upload button doesn't trigger a check when updating only the fence, only updating the mission triggers a check, which I think is patently unreasonable.\r\n\r\nFor example, a scenario like this: a user plans a task in advance and passes the check, is ready to execute it some time later, but doesn't get a notification that the task is not compliant until just before execution.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-22T11:36:18Z",
          "body": ">Yes.\r\n\r\nIt wasn't a yes/no question :sweat_smile: \r\nWhich of the two options would you prefer? A or B? Before we decide on that we cannot implement anything. ",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2023-12-22T12:18:10Z",
          "body": "> It wasn't a yes/no question 😅 Which of the two options would you prefer? A or B? Before we decide on that we cannot implement anything.\r\n\r\nwhen I update the geofence, I need the mission feasibility checks to be run immediately.\r\nSince the geofence and mission updates are under the same button \"upload\", we just need to reject this update(include geofence and mission if they have been updated) and leave it as it was before we clicked upload.So,it is a yes/no question.😀\r\n\r\n\r\nSince now there is already a feasibility check in the module of the mission, when a new upload of a new mission is not available, it will be rejected.\r\nWe can accomplish the above by simply adding the same check to the geofence.Like this:https://github.com/PX4/PX4-Autopilot/pull/22531\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-12-22T12:29:57Z",
          "body": "> > It wasn't a yes/no question 😅 Which of the two options would you prefer? A or B? Before we decide on that we cannot implement anything.\r\n> \r\n> when I update the geofence, I need the mission feasibility checks to be run immediately. Since the geofence and mission updates are under the same button \"upload\", we just need to reject this update(include geofence and mission if they have been updated) and leave it as it was before we clicked upload.So,it is a yes/no question.😀\r\n> \r\n> Since now there is already a feasibility check in the module of the mission, when a new upload of a new mission is not available, it will be rejected. We can accomplish the above by simply adding the same check to the geofence.Like this:#22531\r\n\r\nBut isn't that exactly option A? You propose to reject the GF if it's not compatible with the mission.",
          "type": "issue_comment"
        },
        {
          "author": "Drone-Lab",
          "created_at": "2023-12-22T12:53:36Z",
          "body": "> But isn't that exactly option A? You propose to reject the GF if it's not compatible with the mission.\r\n\r\nYes,you are right!\r\nI want to reject a whole round of uploads that aren't feasible, and if the upload only updates the geofence, it's case A.",
          "type": "issue_comment"
        },
        {
          "author": "DronecodeBot",
          "created_at": "2024-07-25T01:09:08Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-v1-15-public-changes-what-needs-docs/39850/1\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "mcsauder",
          "created_at": "",
          "body": "This is a nice simplification and improvement.  Thanks @sfuhrer !",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "Drone-Lab",
          "created_at": "",
          "body": " Hello @sfuhrer  ! It appears there might be a potential issue with the invocation of the checkMissionAgainstGeofence() function when only the geofence undergoes an update 484a44e5e97c24ef74d108d26725d38f73db5e39 .  The problem is related to the state machine and asynchronous message reading in geofence.cpp.I'm here to assist further if needed. ",
          "state": "COMMENTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses multiple behavioral/logic issues (incorrect listening to GF_SOURCE, improper handling of geofence breaches that caused constant reposition waypoints for fixed-wing, and blocking geofence uploads that would immediately trigger or break RTL), which are classic logic errors (wrong condition/state transitions). There is a noted remaining concern in the discussion about whether mission-feasibility checks are invoked when only the geofence is updated, so while the PR fixes several logic bugs the thread indicates a possible additional logic gap that may need follow-up."
  },
  {
    "title": "Remove LNDMC_ALT_MAX",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22376",
    "number": 22376,
    "created_at": "2023-11-15T14:03:51Z",
    "merged": true,
    "merged_at": "2023-11-20T13:52:35Z",
    "state": "closed",
    "conversation": {
      "author": "MaEtUgR",
      "body": "### Solved Problem\r\nWhen discussing with @sfuhrer about geofence improvements he mentioned again the overlap between `LNDMC_ALT_MAX` and `GF_MAX_VER_DIST`. I know @dagar was bringing this up many times.\r\n\r\nI think now is the right time to remove it since I'm not aware who is using that functionality right now and @sfuhrer is working on geofence improvements which should allow us to forward users to using `GF_MAX_VER_DIST`.\r\n\r\nFixes #13345\r\n\r\n### Solution\r\nI remove `LNDMC_ALT_MAX` completely.\r\nIt was introduced here: https://github.com/PX4/PX4-Autopilot/pull/6679\r\nextended to shift down mission items here: https://github.com/PX4/PX4-Autopilot/pull/8048\r\n\r\n### Changelog Entry\r\n```\r\nCleanup: Remove LNDMC_ALT_MAX, use GF_MAX_VER_DIST instead\r\n```\r\n\r\n### Alternatives\r\nWe could use `GF_MAX_VER_DIST` in place of how `LNDMC_ALT_MAX` is currently used but:\r\n- On multicopter it prevents breaching the altitude in any climb rate enabled mode which we should achieve with the geofence.\r\n- On any vehicle, all mission items just get silently repositioned to be lower which was a hack to still allow RTL even if the return altitude is higher than the allowed altitude but flying lower than planned is not generally a safe thing to do. The check for the return altitude being lower than the maximum altitude should be done explicitly.\r\n\r\n### Test coverage\r\nI did not specifically test this but the functionality was removed and it still compiles.",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2023-11-15T14:39:34Z",
          "body": "Note: this would require a docs update (remove deprecated param).",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2023-11-20T13:59:18Z",
          "body": "> this would require a docs update\r\n\r\nIt was actually never documented explicitly but only in the autogenerated reference 😅 \r\n\r\n![image](https://github.com/PX4/PX4-Autopilot/assets/4668506/4b118d52-fc5a-47a2-83a9-8e4276da1dce)\r\n",
          "type": "issue_comment"
        },
        {
          "author": "DronecodeBot",
          "created_at": "2024-07-25T01:09:07Z",
          "body": "This pull request has been mentioned on **Discussion Forum for PX4, Pixhawk, QGroundControl, MAVSDK, MAVLink**. There might be relevant details there:\n\nhttps://discuss.px4.io/t/px4-v1-15-public-changes-what-needs-docs/39850/1\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "For me this is a second implementation of a geofence feature, and thus support its removal. \r\nIf manufacturers want to implement a hard altitude limit that the user cannot overwrite then they can set GF_MAX_VER_DIST and GF_ACTION and do not give the user the ability to change them.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR removes a duplicated/overlapping altitude-limit mechanism (LNDMC_ALT_MAX) that produced undesirable behavior (silently shifting mission items and creating inconsistent altitude-limit logic vs. GF_MAX_VER_DIST). Removing this redundant parameter cleans up conflicting logic and prevents the unsafe/hacky repositioning behavior, so it addresses a logic/design bug rather than a syntax/style change."
  },
  {
    "title": "Mission feasibility checks with changing home",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22346",
    "number": 22346,
    "created_at": "2023-11-11T16:43:55Z",
    "merged": true,
    "merged_at": "2023-11-24T07:11:42Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nMisison feasibility was not checked again, if the home position or the geofence changed after it was checked once. Further, if the mission was invalid during upload (e.g. home position not valid yet) the mission is cleared.\r\n\r\nFixes #{Github issue ID}\r\n\r\n### Solution\r\n- Remove clearing the mission when the mission is invalid during mission upload.\r\n- Mission feasibility checks also checks if the geofence counter or the home position timestamp has changed since last check.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix: Do not clear invalid mission after upload\r\nBugfix: Mission feasibility checks also checks if the geofence counter or the home position timestamp has changed since last check\r\n```\r\n\r\n### Alternatives\r\nThe mission feasibility checks should be moved to another location instead of being performed in the mission mode. They should be moved to the mavlink_mission class where it can be recalculated directly after a mission or geofence is uploaded.\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "Drone-Lab",
          "created_at": "2024-01-12T14:06:35Z",
          "body": "Hi @bkueng ,\r\n\r\nI believe that in this pull request, the root cause is not the following:\r\n> Mission feasibility was not checked again if the home position or the geofence changed after it was checked once.\r\n\r\nInstead, the issue seems to be related to a Multi-Threaded Race Condition.\r\nhttps://github.com/PX4/PX4-Autopilot/security/advisories/GHSA-p74g-gvg5-6pgc\r\nI would appreciate your perspective\r\n\r\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bkueng",
          "created_at": "2023-11-13T13:10:56Z",
          "body": "You can use the existing home position:\r\n```\r\n_navigator->get_mission_result()->home_position_timestamp = _navigator->get_home_position()->timestamp;\r\n```",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-11-13T13:16:35Z",
          "body": "It's not an issue now, as `check_mission_valid` isn't called regularly, but should we change that, and there's a situation where home position is published frequently, the checks will be executed at that rate as well.\r\nSo a bit better would be to check if the `valid` flags change.",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-20T13:11:03Z",
          "body": "That means that we would tie this class again closer to the navigator module, although it might be decoupled in the future? Else i will apply your solution.",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-20T13:11:53Z",
          "body": "@bkueng as discussed, i added a counter to the home position. What do you think of the implementation now?",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-11-23T08:29:49Z",
          "body": "Maybe this is a bit more clear?\r\n```suggestion\r\nuint32 update_count \t# update counter of the home position\r\n```",
          "path": "msg/HomePosition.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2023-11-23T08:32:23Z",
          "body": "I'm fine with it, but I also think this is easy to replace when the time comes to move it out.\r\nI'm mostly concerned with having many `SubscriptionData` around, which can become expensive in terms of memory.",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-23T15:53:06Z",
          "body": "@bkueng Yeah since memory can be a problem i fixed it to your solution",
          "path": "src/modules/navigator/mission_base.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR addresses incorrect program behavior around mission state and feasibility checks: missions were being cleared on an invalid upload and feasibility was not re-evaluated when external state (home position or geofence) changed. Both are logic/state-management errors; the change stops clearing the mission during upload and adds checks for geofence counter and home timestamp so feasibility is rechecked when those inputs change (a reviewer note about a possible race condition remains, but the described fixes correct the core logic faults)."
  },
  {
    "title": "rtl: Only use approaches for vtols in fixed wing mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22341",
    "number": 22341,
    "created_at": "2023-11-10T08:03:30Z",
    "merged": true,
    "merged_at": "2023-11-12T14:41:29Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nCurrently if a VTOl is in multicopter mode or a multicopter is used, the RTL still uses and loiter to alt approach for RTL, if it was uploaded. For multicopter and VTOL in RW mode, we want the system to directly fly to the home or RTL destination without using approaches.\r\n\r\n### Solution\r\n- Only use approaches when it is reported that the system is a vtol and in fixed wing mode.\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix Only use RTL approaches for vtols in fixed wing mode\r\n```\r\n### Test coverage\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "Tested in SITL, I can't reproduce te issue anymore with this PR.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes incorrect conditional behavior: approaches were being used for RTL even when the vehicle was a multicopter or a VTOL in multicopter/rotary mode, causing unintended loiter/approach behavior. Limiting approaches to VTOLs in fixed‑wing mode corrects the state-based decision logic and reviewers report SITL testing confirming the issue is resolved."
  },
  {
    "title": "VTOL takeoff: do not change loiter location after VTOL takeoff completed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/22305",
    "number": 22305,
    "created_at": "2023-11-03T11:08:52Z",
    "merged": true,
    "merged_at": "2023-11-13T11:43:58Z",
    "state": "closed",
    "conversation": {
      "author": "KonradRudin",
      "body": "<!--\r\n\r\nThank you for your contribution!\r\n\r\nGet early feedback through\r\n- Dronecode Discord: https://discord.gg/dronecode\r\n- PX4 Discuss: http://discuss.px4.io/\r\n- opening a draft pr and sharing the link\r\n\r\n-->\r\n\r\n### Solved Problem\r\nWhen using a VTOL takeoff, a loiter location can be set. when the system reaches the takeoff altitude, it starts loitering at the current position instead of continuing at the loiter location defined in the VTOL takeoff. \r\n\r\n### Solution\r\n- Check in the loiter activation is the current position setpoint is a valid loiter point. If this is true and no reposition is active, set the loiter position to the loiter position item.\r\n- Refactor ...\r\n\r\n### Changelog Entry\r\nFor release notes:\r\n```\r\nBugfix VTOL takeoff: do not change loiter location after VTOL takeoff completed.\r\n```\r\n### Test coverage\r\n- Simulation tests: using gazebo-classic_standard_vtol.\r\n  - Check correct loiter location for vtol takeoff.\r\n  - Check correct functionality for hold when currently flying to an orbit/mission orbit\r\n",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2023-11-03T12:52:09Z",
          "body": "@KonradRudin Just an idea, should we add a protection for loiter points which are too far away from the vehicle?",
          "path": "src/modules/navigator/loiter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-03T12:54:38Z",
          "body": "hmm, i thought of making a check to only take it if we are on the loiter. So distance from vehicle to center point should be less than loiter_radius + acceptance_radius. That should do the trick, right?",
          "path": "src/modules/navigator/loiter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2023-11-03T12:56:51Z",
          "body": "@KonradRudin Yes, that's exactly what I meant",
          "path": "src/modules/navigator/loiter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "KonradRudin",
          "created_at": "2023-11-03T14:05:09Z",
          "body": "I have a new proposal just commited. @RomanBapst can you review again please?",
          "path": "src/modules/navigator/loiter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "tstastny",
          "created_at": "2023-11-12T14:28:53Z",
          "body": "@RomanBapst ping",
          "path": "src/modules/navigator/loiter.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes incorrect behavior where a VTOL would switch its loiter target to the current position upon completing takeoff instead of using the configured loiter location. The change adjusts the loiter activation logic to verify the current setpoint is a valid loiter point and only override when repositioning is active, which addresses an improper state transition/boundary condition. This matches the definition of a logic error (wrong behavior rather than syntax/crash)."
  },
  {
    "title": "rc.fw_defaults param fix",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4121",
    "number": 4121,
    "created_at": "2016-03-30T16:25:38Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-30T16:27:31Z",
          "body": "Thanks!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-30T16:30:46Z",
          "body": "Applied to master!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title ('rc.fw_defaults param fix') and the fact it was applied suggest it corrects incorrect/default parameter behavior that would cause unintended runtime behavior. However, there is no PR description or diff provided, so while it is likely a logic fix (incorrect parameter handling), the exact nature cannot be confirmed with high confidence."
  },
  {
    "title": "fixing possible safety issue with altitude",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4081",
    "number": 4081,
    "created_at": "2016-03-26T02:38:11Z",
    "merged": true,
    "merged_at": "2016-03-26T13:36:34Z",
    "state": "closed",
    "conversation": {
      "author": "catch-twenty-two",
      "body": "Ignoring requested altitude from target for now.\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description indicate a behavioral change to stop using a target's requested altitude, which sounds like correcting incorrect/unsafe decision logic. Although no diff or discussion is provided, the change addresses unexpected or unsafe behavior (improper use of target altitude), so it likely fixes a logic error; confidence is medium due to limited detail."
  },
  {
    "title": "more param metadata cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4078",
    "number": 4078,
    "created_at": "2016-03-25T20:30:01Z",
    "merged": true,
    "merged_at": "2016-03-26T11:17:52Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR metadata only contains the title 'more param metadata cleanup' with no description, diffs, comments, or reviews. The title suggests a refactor/cleanup rather than an explicit fix for incorrect behavior, but with no code or discussion provided it's not possible to confidently determine whether a logic bug was addressed."
  },
  {
    "title": "added descend into navigator",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4068",
    "number": 4068,
    "created_at": "2016-03-23T21:53:09Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "pickledgator",
      "body": "Descend was unimplemented in navigator, and thus had no effect when the navigation state was changed. Utilized same land helper. Downstream logic in pos_control and commander successfully ignore position data that is applied in the setpoint message. Tested in gazebo for multi-rotors.\n",
      "issue_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-03-24T08:11:05Z",
          "body": "Nice catch. How did you find this, in which scenario did the bug show up?\n",
          "type": "issue_comment"
        },
        {
          "author": "pickledgator",
          "created_at": "2016-03-24T22:41:56Z",
          "body": "To support development, I needed a way to trigger a failsafe landing without xy position control, even when position data is available in the filter (eg., bad VO). Descend nav state provides the control mechanism that I desired, and I piped an RC channel to a new failsafe main state to trigger the Descend.\n",
          "type": "issue_comment"
        },
        {
          "author": "mhkabir",
          "created_at": "2016-03-25T00:23:40Z",
          "body": "@pickledgator Sounds nice! Would you be able to send in a PR with the rest of your changes ? It would be very useful for others using VO too :)\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-28T10:27:37Z",
          "body": "Rebased and applied, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements an unimplemented 'descend' navigation state that previously had no effect when the navigation state changed, which is an unintended behavior (incorrect program logic/state handling). The change wires in the descend behavior using the existing land helper and ensures downstream modules handle setpoints correctly, addressing the inconsistent state/behavior."
  },
  {
    "title": "Follow me",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4065",
    "number": 4065,
    "created_at": "2016-03-23T19:14:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@catch-twenty-two Replacing your PR with this rebased and formatted version.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-23T19:38:15Z",
          "body": "@catch-twenty-two What is the current state of this right now? Do you have an updated video?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-23T19:39:30Z",
          "body": "Matching QGC PR, not merged yet and with CI errors: https://github.com/mavlink/qgroundcontrol/pull/2817\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-23T21:19:59Z",
          "body": "@LorenzMeier Great thanks for doing that, No updated video yet. I did go out with friend to test it on a bicycle so I could see how well it tracked a fast moving object and all went well.  I'll do one more test tomorrow with all the updated changes and then call it good.  I'll also I'll see if I can get some more video if possible.\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-24T07:33:01Z",
          "body": "@catch-twenty-two Is there a bug?\n\n``` javascript\nvoid FollowTarget::update_position_sp(bool use_velocity, bool use_position)\n{\n    // convert mission item to current setpoint\n\n    struct position_setpoint_triplet_s *pos_sp_triplet = _navigator->get_position_setpoint_triplet();\n\n    // activate line following in pos control if position is valid\n\n    pos_sp_triplet->previous.valid = use_position;\n    pos_sp_triplet->previous = pos_sp_triplet->current;\n    mission_item_to_position_setpoint(&_mission_item, &pos_sp_triplet->current);\n    pos_sp_triplet->current.type = position_setpoint_s::SETPOINT_TYPE_FOLLOW_TARGET;\n    pos_sp_triplet->current.position_valid = use_position;\n    pos_sp_triplet->current.velocity_valid = use_velocity;\n    pos_sp_triplet->current.vx = _current_vel(0);\n    pos_sp_triplet->current.vy = _current_vel(1);\n    pos_sp_triplet->next.valid = false;\n    _navigator->set_position_setpoint_triplet_updated();\n}\n```\n\n   pos_sp_triplet->current.valid is miss? control_auto couldn't work well if we missed it. when i switch to follow target mode, the vehicle isn't moving at all.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-24T19:53:45Z",
          "body": "@LorenzMeier Happy to report I went out today and everything worked great.  I have some video but my I'll have to see if it's worth posting.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-24T20:04:58Z",
          "body": "> pos_sp_triplet->current.valid is miss? control_auto couldn't work well if we missed it. when i switch to follow target mode, the vehicle isn't moving at all.\n\nHmmm...you are right.  I'm actually surprised my tests went okay today, odd.... Good catch.  I'll have to fix it and retest tomorrow. \n\nNevermind see here where the sp is marked as valid:\n\nhttps://github.com/PX4/Firmware/pull/4065/files#diff-c8b2face30ea93f334a64cf7f9aff096L83\n\nThere could possibly be something wrong with your gps...Do you have another phone you can try?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T20:13:09Z",
          "body": "I always love videos, so I hope it turns out well!\n",
          "type": "issue_comment"
        },
        {
          "author": "DonLakeFlyer",
          "created_at": "2016-03-24T22:20:28Z",
          "body": "My suggestion for basic follow me support would be to maintain the current height of the Vehicle. Also mantain the current distance/positioning from the target calculated from the first follow me message.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-25T03:40:04Z",
          "body": "I'm no filmmaker... which is very apparent from this video, it contains:\n\n1) Me walking with follow me mode activated.\n2) My mother who I recruited to help me, walking with follow me mode activated (all the rest of my friends are at work on weekday mornings, imagine that! :) )\n3) Me riding my Xooter Scooter that I use to get around San Francisco, with follow me activated. At this point I was actually brave enough to set the RC down so I had no safety net (if anything were to go wrong) and let my code do it's work....\n\nThere was a slight wind blowing probably around 7-10 mph the frame type is a DJI style 330. \n\n> I always love videos, so I hope it turns out well!\n\n@LorenzMeier Did it turn out well?  Not really. But hopefully your love of videos makes up for that. lol!\n\nhttps://youtu.be/RxDL4CtkzAQ\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-27T10:17:47Z",
          "body": "Awesome, merged! Now on to the QGC merge, @DonLakeFlyer!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements the 'follow me' setpoint construction and explicitly sets fields (type, position_valid, velocity_valid, vx/vy, etc.) that control behavior; reviewers flagged a missing pos_sp_triplet->current.valid which would cause the vehicle to not move, and that concern was located and resolved within the PR diffs. The discussion and subsequent merge indicate the PR addresses incorrect runtime behavior (a logic/state issue) relating to follow-me setpoints."
  },
  {
    "title": "VTOL_TAKEOFF, VTOL_LAND commands and VT_FORCE_VTOL param",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4055",
    "number": 4055,
    "created_at": "2016-03-22T10:30:16Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "support for MAV_CMD_NAV_VTOL_TAKEOFF and MAV_CMD_NAV_VTOL_LAND \nAlso implement VT_FORCE_VTOL to force land as VTOL\nreplaces https://github.com/PX4/Firmware/pull/3720\n\nFixes #3492\nFixes #3712\n",
      "issue_comments": [
        {
          "author": "sanderux",
          "created_at": "2016-03-24T00:14:26Z",
          "body": "@AndreasAntener I cleaned up the mission code, sanitized the functionality, improved back transition behavior, fixed alignment and implemented force_vtol procedure.\nSITL tested all reasonable scenarios and regression tested on the old procedure (takeoff -> trans -> wp -> trans -> land).\n\nI'm especially happy with the back transition improvement, we could see if the basis could change from time to velocity but for now this seems to be a big improvement.\n\nI will test fly this tree soon but i think it is ready to rebase and merge as i see no possible regression and it only implements previously unsupported functionality.\n\nSomehow this tagged along through a submodule init and causes travis to fail: https://github.com/PX4/Firmware/pull/4055/files#diff-d62dbab64e619e0e5926b64585204efdR1\nI think that should be resolved by rebasing but i'm not sure.\n\n/cc @LorenzMeier @tumbili \n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-24T09:04:46Z",
          "body": "@sanderux Could you rebase and squash the development commits? There are also wrong indentations in the mission code it seems\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T11:02:40Z",
          "body": "@AndreasAntener @sanderux There is a 15 character limit on parameter length, what I proposed works, what you proposed doesn't.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-24T11:11:00Z",
          "body": "@LorenzMeier I tested VT_NAV_FORCE_VTL as param and that works. Do you want me to change it?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T11:13:09Z",
          "body": "16 is the hard limit without NUL-termination. It should work, but you can get yourself into corner cases in downstream implementations. I suggest to use VT_NAV_FORCE_VT instead.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-24T11:20:04Z",
          "body": "ready to merge\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T12:03:20Z",
          "body": "Is this state SITL and outdoor tested? I think it should be, as the changes are significant.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-24T12:10:05Z",
          "body": "Sitl is tested, outdoor tomorrow\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-25T20:34:02Z",
          "body": "Outdoor tested in quite strong wind. \nhttp://logs.uaventure.com/view/JRG4pRghKoV3RK8eS3o75k#AS_Yaw_PLOT\n\n1 There was a sudden unintended yaw action when front transition started, see yaw setpoint change\n2 Very smooth back transition but quite a high time and in strong winds it drifts a lot \n3 During lading it weathervaned and got lift from it's wings, it therefor acted up a little.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-25T21:49:39Z",
          "body": "Here is a second log:\nhttp://logs.uaventure.com/view/PJYu2ARidpuQyFsX9qxdKm\n\nThe yaw setpoint issue is consistent\nThe airspeed sensor for the quadranger acted up here (turned out to be the radio telem being too close)\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-26T18:04:08Z",
          "body": "This should fix the yaw issue during transition\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-27T01:13:09Z",
          "body": "@sanderux before I forget, mission item reached: one reason to not wait on the transition to be finished is that the position controller won't know the next waypoint and therefore cannot control the position during the transition in case we later implement this. haven't thought about it in detail though.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-27T08:16:59Z",
          "body": "the advantage of this command is that the user can point the vehicle into the wind. It is basically the autonomous equivlant of flicking the aux1 switch.\n\nFor position control it should hold altitude and heading until ttansition has completed or timeout occurs. \n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-27T09:34:31Z",
          "body": "Sure but it's changing the behaviour in general, also for the separate transitions (not part of VTOL tko/lnd). What we talked about yesterday, if we want the FW position controller to guide it through blending, it needs to know the next waypoint. If it doesn't get the actual next mission waypoint, we need to generate a temporary waypoint that lies in the direction of the target transition heading. Another option would be to look at the \"next\" waypoint in the triplet, which contains the next position during the transition. Ok, I think we have 2 good options here so it's fine.\n\nNote: simply holding heading and attitude is not going to work, it will drift off path.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-27T09:45:41Z",
          "body": "Yes your right, i think a temp waypoint would be a good idea.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-27T10:27:38Z",
          "body": "Waiting for conclusive test flights to merge this.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-27T10:31:39Z",
          "body": "I did a sitl test to check on the Z velocity issue that i see in your log from #4079:\n\n<img width=\"1368\" alt=\"screen shot 2016-03-27 at 12 15 55\" src=\"https://cloud.githubusercontent.com/assets/5750020/14064961/98febe76-f416-11e5-9277-f6557dca7d42.png\">\n\nThe position controller still sees a takeoff type setpoint during the transition. Needs to be reset, should be a small fix.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-27T23:48:12Z",
          "body": "@AndreasAntener do you agree on the location of setting the setpoint type?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-29T21:06:49Z",
          "body": "@AndreasAntener i added the virtual waypoint in front of the takeoff item. This should work fine now with your transition position holding\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-30T11:51:22Z",
          "body": "Here is a log for a SITL flight based on this branch combined with https://github.com/PX4/Firmware/pull/4093. looks very smooth and functions as expected.\nhttp://logs.uaventure.com/view/VXJnLmimbG8px8aiuPtBja\n\n![image](https://cloud.githubusercontent.com/assets/14801663/14141202/fab81b6c-f67d-11e5-8f05-aa66601c9d1f.png)\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-04-02T18:20:36Z",
          "body": "Outdoor tested, looking good:\nhttp://logs.uaventure.com/view/jg2rHZDRmAboYLiqyFVuge\nVideo: https://drive.google.com/file/d/0B27AvDmVit4KQlpCMllyaDVxQmM/view?usp=sharing\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-02T20:29:55Z",
          "body": "Rebased and applied, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T08:31:49Z",
          "body": "This should be defined in the navigator params, (NAV_FORCE_VTOL), as its only used there.\n",
          "path": "src/modules/vtol_att_control/vtol_att_control_params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-03-24T08:59:09Z",
          "body": "All vtol related params start with VT_ perhaps VT_NAV_FORCE_VTOL ?\n",
          "path": "src/modules/vtol_att_control/vtol_att_control_params.c",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR addresses incorrect VTOL transition behavior (state/setpoint handling) and implements correct handling for VTOL takeoff/land commands and the force_vtol parameter. The discussion and tests mention fixing a yaw setpoint issue, resetting the takeoff-type setpoint during transition, improved back-transition logic, and added virtual waypoint handling, which are all logic-level fixes (state/transition and control setpoint errors)."
  },
  {
    "title": "MissionFeasibilityChecker geofence ignore NAV_CMD_DO_*",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4046",
    "number": 4046,
    "created_at": "2016-03-21T03:39:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "-closes #4040\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2016-03-21T14:59:29Z",
          "body": "Thanks @AndreasAntener \nIs there a better place a helper like item_contains_position() could live in navigator? At the moment I made it public and static within MissionBlock so it was accessible from MissionFeasibilityChecker.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-21T19:24:30Z",
          "body": "Only idea I'd have would be to add a helper class, but it's a bit overkill atm for one method. Maybe add a comment about it.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-22T00:21:41Z",
          "body": "Added todo\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-22T05:56:18Z",
          "body": "Thanks, applied\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-21T13:10:07Z",
          "body": "We could use https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L318 and also add NAV_CMD_DO_JUMP to the list there (it's currently not because it's handled separately in missions but adding it won't have any other effect)\n",
          "path": "src/modules/navigator/mission_feasibility_checker.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and linked issue indicate the MissionFeasibilityChecker was incorrectly treating NAV_CMD_DO_* items in geofence checks; the change to ignore those commands addresses incorrect behavior (false infeasibility). The discussion about adding a shared helper (item_contains_position) and the reviewers' acceptance supports that this is a logic fix rather than a style/syntax change."
  },
  {
    "title": "reset mission after vehicle was in mission and then disarms",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4043",
    "number": 4043,
    "created_at": "2016-03-20T13:46:35Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "Fixes #3978 , SITL tested\nPlease review\n\nNote: I had the reset code in commander first but that didn't feel right so I moved it to mission. There might be a better way to trigger the reset instead via the `offboard_mission` topic.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-20T13:56:32Z",
          "body": "Changes / architecture looks good.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T14:06:58Z",
          "body": "I commented on this. I think it needs to be done solely in the navigator without intervention from the commander.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-25T09:25:53Z",
          "body": "@LorenzMeier makes sense, will fix this\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-27T02:02:24Z",
          "body": "Updated, SITL tested.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-27T10:27:01Z",
          "body": "Looked good, sane and safe, so I applied it to master, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T14:05:18Z",
          "body": "Why is this logic in the commander after all? Can't the navigator just do this by itself, since it knows the current flight mode?\n",
          "path": "src/modules/commander/commander.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T14:05:49Z",
          "body": "This introduces a race with the mavlink app, which also publishes this topic. If we publish something from the commander, it would need to be done on a different topic.\n",
          "path": "src/modules/commander/commander.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T14:06:28Z",
          "body": "Would prefer to trigger this on a vehicle status change with state == mission and disarmed.\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an incorrect state-handling bug: the mission was not being reset after the vehicle disarmed while in a mission, leaving the system in an inconsistent state. The change moves/reset logic into the mission component (with reviewer approval and SITL testing), which corrects the improper state transition and thus fixes the logic error."
  },
  {
    "title": "Reset current setpoint when entering RTL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4012",
    "number": 4012,
    "created_at": "2016-03-14T21:53:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "Fixes #3844 \nSITL tested\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-14T22:08:12Z",
          "body": "Sounds like we should merge this once Travis passes.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-14T22:38:15Z",
          "body": "Rebased, I was a bit out of date..\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-19T15:30:39Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly resets the current setpoint when entering RTL (Return-To-Launch), which addresses an incorrect state transition where a stale or inappropriate setpoint could persist and alter RTL behavior. The title, bug reference (Fixes #3844), and testing note (SITL tested) indicate it fixes unintended behavior rather than a syntax/style issue."
  },
  {
    "title": "Param unit cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4000",
    "number": 4000,
    "created_at": "2016-03-13T18:28:53Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2016-03-13T20:46:47Z",
          "body": "@LorenzMeier @DonLakeFlyer ready for review please\n\nCurrent @unit usage\n\n```\n  4  * @unit 1/s\n  1  * @unit A\n  1  * @unit bit/s\n 44  * @unit boolean\n 40  * @unit deg\n  4  * @unit deg * 1e7\n 19  * @unit deg/s\n 54  * @unit enum\n  1  * @unit Gauss\n  1  * @unit Gauss/s\n  1  * @unit hPa\n  5  * @unit Hz\n  1  * @unit kg\n  3  * @unit kg*m^2\n 47  * @unit m\n  1  * @unit m^2\n  1  * @unit mA\n  1  * @unit min\n  1  * @unit m/m\n 12  * @unit ms\n  1  * @unit m-s\n 35  * @unit m/s\n  2  * @unit (m/s)-s\n 10  * @unit m/s/s\n  1  * @unit (m/s/s)-s\n  1  * @unit rad\n  8  * @unit rad/s\n 26  * @unit s\n  7  * @unit SD\n 66  * @unit us\n  3  * @unit V\n  1  * @unit W\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "DonLakeFlyer",
          "created_at": "2016-03-13T20:54:19Z",
          "body": "I'd probably change the seconds ones to secs, msecs, usecs. A little more clear. What is SD?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-13T20:59:14Z",
          "body": "It's in ekf2 so I left it alone. Standard deviation?\nhttps://github.com/PX4/Firmware/blob/cecec86081566f243a0dec33b9dedc3dd1624f58/src/modules/ekf2/ekf2_params.c#L316\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-13T21:22:40Z",
          "body": "I used s, ms, us to stick to SI, but if you want the abbreviation I'll change them.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-14T08:13:14Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR only standardizes parameter unit strings (e.g., s, ms, us) and cleans up metadata; discussion indicates it's about naming/formatting of @unit tags. There is no evidence it changes program logic, algorithms, state transitions, or runtime behavior, so it does not fix a logic error."
  },
  {
    "title": "Mode switch fix",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3998",
    "number": 3998,
    "created_at": "2016-03-13T10:49:13Z",
    "merged": true,
    "merged_at": "2016-03-13T14:55:11Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "",
      "issue_comments": [
        {
          "author": "kd0aij",
          "created_at": "2016-03-13T12:54:57Z",
          "body": "Very nice, the comments will be very valuable to future maintenance coders.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title 'Mode switch fix' and use of the word 'fix' indicate it addresses incorrect behavior related to mode switching — a classic state-transition logic issue. Although there is no PR body or code shown, mode switching typically involves logic/state errors; the lack of detailed description reduces certainty, so confidence is medium."
  },
  {
    "title": "FW navigator accept TAKEOFF waypoint like MC (alt only)",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3922",
    "number": 3922,
    "created_at": "2016-03-04T20:36:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "I think this makes the most sense for fixed wing behaviour. You're still flying towards the takeoff waypoint, but once you actually hit the altitude (within NAV_ACC_RAD) you're ready to proceed with the mission. \n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2016-03-04T21:24:06Z",
          "body": "I was also thinking about updating MissionFeasibilityChecker. What would be appropriate?\n\n-require altitude greater than: At least home + climbout_diff + nav_acc_rad or MIS_TAKEOFF_ALT?\n-minimum distance >= FW_AIRSPEED_TRIM \\* FW_T_CLMB_MAX meters from home.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T10:35:21Z",
          "body": "Both options are not ideal. Caring for horizontal position might make it turn too soon, caring for altitude might make it spiral where you don't want it. At least with the way it is now you know what it will do (because you have the next waypoint in mind). The spiral might be completely unexpected. But other than that I can't really argue for one or the other.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-05T14:19:03Z",
          "body": "I'm more concerned with the current situation making it accept too soon when you should still be climbing with roll constrained and TECS in climbout mode. With the roll limited to [-15, 15] during altitude_error > _parameters.climbout_diff the potential spiral is pretty limited depending on your FW_CLMBOUT_DIFF and NAV_ACC_RAD.\n\nA fairly common situation is hand launching into wind where the plane climbs quickly and easily hits the takeoff altitude early. Why fly to a fairly low waypoint instead of continuing the mission?\n\nThink of the takeoff waypoint as more of a cmd to launch + climb with its location not necessarily important.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T14:48:38Z",
          "body": "You can't just assume that the takeoff position is not important to the user.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T14:50:09Z",
          "body": "What your thinking off is not flying a mission but just flying manually where only the climbout diff is relevant.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-05T16:16:53Z",
          "body": "It's not necessarily assuming the takeoff position isn't important to the user (it would still be mostly respected if climbout diff > accept radius), but rather I'm trying to tweak what we already have to get the behaviour I want. Maybe that's the wrong approach.\n\nSo let's take a step back and have the proper discussion. I want to hand launch in AUTO, sometimes with launch detect, sometimes without and have that launch do nothing but safely climb in the direction I throw until a certain altitude, and then continue/start the mission. How could we accomplish this while still having the option of respecting a takeoff waypoint position?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T17:17:20Z",
          "body": "Ok. Wasn't it your plan to reuse the runway takeoff code for hand launch too? I believe it would give you exactly what you want. In \"heading mode\" it will takeoff to climbout alt in the direction you threw it, and then navigate towards takeoff wp. In \"wp mode\" will directly try to navigate towards the takeoff waypoint (which is the default behaviour at the moment I guess?).\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-05T18:04:24Z",
          "body": "You're right that will probably be exactly what I want in most cases if I just treat the takeoff waypoint like my first regular waypoint. My only concern then is the possibility that the waypoint could be accepted before RunwayTakeoffState::FLY. What would be the best way to prevent that?\n\nAdditionally check climbout diff to accept NAV_CMD_TAKEOFF or actually publish takeoff state?\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the TAKEOFF waypoint acceptance logic for fixed-wing from a horizontal+altitude check to an altitude-only check (like multicopter). That addresses an incorrect behavior/state transition where missions either accepted or blocked incorrectly based on horizontal proximity during climbout, so this is a logic-level fix to the waypoint acceptance condition (although reviewers note trade-offs and design choices)."
  },
  {
    "title": "navigator only accept waypoint if !landed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3908",
    "number": 3908,
    "created_at": "2016-03-02T15:17:42Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This also includes a minor fw_pos_control_l1 cleanup where the const arg pos_sp_triplet and _pos_sp_triplet were being used interchangeably.\n\nPossible fix for #3902\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-03T09:10:41Z",
          "body": "Looking good to me. It still will require putting takeoff waypoints at a suitable minimum distance - which probably needs to be fixed in the GCS.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-03T09:16:06Z",
          "body": "The change looked anyway good, so I cherry-picked it it onto master. Closing.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes the navigator to only accept waypoints when the vehicle is not landed, which corrects incorrect behavior where waypoints could be accepted while landed (likely causing unintended state transitions). The change targets issue #3902, was reviewed and cherry-picked into master, indicating it addressed an actual logic bug rather than a style or syntax fix."
  },
  {
    "title": "Loiter min altitude: Differentiate between loiter and takeoff",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3880",
    "number": 3880,
    "created_at": "2016-02-28T19:34:17Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "This should help with suddenly rising systems.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-14T08:05:44Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and short description indicate a behavioral change that distinguishes loiter from takeoff to prevent \"suddenly rising systems,\" which implies the previous logic conflated those states and produced unintended altitude behavior. That is characteristic of a logic error (incorrect state handling/conditional), so the change likely fixes that incorrect behavior. Confidence is medium because no diffs or detailed discussion are provided to confirm the exact code-level fix."
  },
  {
    "title": "FW airspeed mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3861",
    "number": 3861,
    "created_at": "2016-02-25T22:54:46Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This pull request introduces fixed wing airspeed mode. Airspeed mode is the minimum manual mode that's appropriate (safe) for an operator without RC experience.\nIt's a stabilized mode with manual throttle and airspeed controlled with the pitchstick. It feels similar to STAB, but you can't stall the plane.\n\n**Questions**\n- ~~where should this fit in with the existing modes and switches?~~\n- ~~this mode is much better with the TECS time constant significantly reduced, could it scale automatically?~~ You just need to properly tune TECS\n- ~~this doesn't currently work with mTecs, does anyone use it?~~\n- ~~should this mode respect FW_THR_MIN/FW_THR_MAX?~~\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2016-02-26T21:46:05Z",
          "body": "I tested most combinations of mode transitions to and from airspeed mode HIL today and didn't see any obvious problems.\nLog muncher might be broken: http://logs.uaventure.com/view/GcnQdeGGB4qgMJDwX8HQng\n\nReinitializing TECS between airspeed mode and any other TECS mode is a bit abrupt, I'm going to try just resetting speed weight and the underspeed check instead.\n\nI'll try an actual flight next week.\n",
          "type": "issue_comment"
        },
        {
          "author": "SimonWilks",
          "created_at": "2016-02-26T22:36:31Z",
          "body": "Logmuncher is working again for this log. Something odd happened with it.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-26T23:04:18Z",
          "body": "The throttle transition from airspeed mode full throttle to altctl is pretty bad. Rethinking the way I'm abusing TECS.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-27T19:35:36Z",
          "body": "Ok, back to where I started. TECS is completely reset between AIRSPEED and ALTCTL/POSCTL/AUTO. It's no worse than switching from MAN/STAB to those modes.\n\nI still want to think about automatically reducing the TECS time constant just in this mode, but I'm otherwise happy with the state of this during HIL testing and ready for an actual flight test.\n\n@LorenzMeier would you recommend flying master as of today, or should I cherry-pick this to stable?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-28T20:39:41Z",
          "body": "I've cherry-picked to stable for flight testing. https://github.com/PX4/Firmware/compare/stable...dagar:fw_airspeed_mode-stable?expand=1\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-01T01:59:31Z",
          "body": "@SimonWilks is this new mode killing logmuncher? http://logs.uaventure.com/view/tNysut35PRAqfF8qe2xhr7\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-02T19:38:08Z",
          "body": "Here's a plot from a successful flight of airspeed mode (ported to stable). The plot shows airspeed setpoint changing with elevator input, and manual throttle. This section of the flight was ALTCLT -> AIRSPEED -> ALTCTL with no problems. Altitude is scaled by 0.1.\n\n![airspeed_1](https://cloud.githubusercontent.com/assets/84712/13472651/da1750cc-e083-11e5-8311-97aa4b797d38.png)\n\n@LorenzMeier what are the next steps? What testing would you like to see?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-02T20:15:34Z",
          "body": "This confused me a bit so I hope you don't mind my questions. I had to look in the code to understand how this is supposed to work ;).\n\nHow is this different from altitude control from the users perspective? Maybe you could explain a bit where the need for this mode is coming from?\n\nDon't you have 2 inputs that have an effect on altitude now? So I'm assuming thrust is your main altitude control now (with speed-weight 2). But also if you change the airspeed setpoint TECS will have to dive/climb (because it has no other means anymore of matching the speed)?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-02T20:56:18Z",
          "body": "Think of it as a safe manual mode. Similar to stabilized mode, but the autopilot maintains a safe airspeed [FW_AIRSPEED_MIN, FW_AIRSPEED_MAX] at all times to prevent the vehicle from stalling. It's very useful for manually landing a UAV. In a locked down configuration for a user this would be their manual mode (which they wouldn't expect to hold altitude).\n\nThis airspeed mode is actually what several commercial UAVs and autopilots refer to as manual mode.\n\nYou should try it in a simulator with appropriate min, trim, and max airspeeds and possibly reducing the TECS time constant. It feels like flying in stabilize mode, but the pitch responds a bit slower.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-02T21:39:04Z",
          "body": "Landing, that's interesting. I mean, you have the same problem here as in alt/posctl: you cannot flare. How does the stick movement look for a landing? Wouldn't you want to reduce airspeed AND throttle for a landing?\n\nNaive question: have you tried plain altitude control with a reduced TECS time constant? I know you don't have manual throttle there, just wondering if the control feeling would already be better then.\n\n> This airspeed mode is actually what several commercial UAVs and autopilots refer to as manual mode.\n\nCould you give me an example? (because I'm curious, not because I don't believe you :))\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-04T16:45:49Z",
          "body": "Actually you can flare by pulling the pitch stick completely back, assuming you approach above min airspeed. Having direct control over throttle makes this mode much safer than ALTCTL for handling on the ground at launch or landing.\n\nI haven't tried ALTCTL with a reduced TECS time constant, but I generally use it when I want to just stay at the same altitude and not think about it.\n\nThe Procerus Kestrel autopilot (acquired by Lockheed) and fixed wing UAVs from AeroVironment refer to this as manual mode.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-09T20:52:36Z",
          "body": "@LorenzMeier @AndreasAntener do you have any other questions? What's the path forward for getting this merged? \n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-15T01:13:55Z",
          "body": "Rebased and resolved conflict.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-20T18:36:48Z",
          "body": "<a href=\"https:&#x2F;&#x2F;trello.com&#x2F;c&#x2F;IvXjv34B&#x2F;723-px4-airspeed-mode-test\"><img src=\"https:&#x2F;&#x2F;github.trello.services&#x2F;images&#x2F;trello-icon.png\" width=\"12\" height=\"12\"> PX4 airspeed mode test</a>\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T15:24:59Z",
          "body": "@dagar I can't access that Trello card.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-03-24T15:29:02Z",
          "body": "Whoops, sorry that's my personal todo list that I had no idea was posting on my behalf.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-24T15:29:07Z",
          "body": "Another rebase would be great, and more clarity on testing - would it be possible for you to test this, position control, altitude control and an auto mission? I would also love to understand the time constant change you mentioned.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-04-02T16:16:37Z",
          "body": "I've flown this a couple times and it works as intended with no problems, but the airspeed response isn't great. I've been having a hard time tuning TECS to respond nicely for this mode, but still work well normally.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-04-04T07:36:58Z",
          "body": "@dagar What about leaving airspeed control away if within min/max? There is a lot of talk about stall prevention ATM. I believe your reasoning behind this \"airspeed\" mode is not different from people simply requesting stall prevention methods. Maybe it could be more of a mix, having manual throttle/pitch/roll control, but start limiting pitch/roll when airspeed gets borderline, and use TECS to pitch down if airspeed falls below min.\n",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2016-04-04T22:16:18Z",
          "body": "@dagar Sounds very promising.\n\n@AndersonRayner Here is what the APM is doing about stall:\n\n> when in roll controlled modes the autopilot will monitor your demanded bank angle and airspeed and work out if you have sufficient margin above the stall speed to turn at the demanded bank angle. If you don’t then the turn will be limited to the safe limit, but it will always allow a bank of at least 25 degrees (to ensure you can still maneuver if your airspeed estimate is badly off).\n\nWe've seen this technique in other two more simpler controllers and it works.\n\n> when in auto-throttle modes the autopilot will also raise the minimum airspeed in the TECS system to the level at which the current demanded bank angle can be safely achieved. So it will add more engine power or lower the nose to raise the airspeed so that the bank angle that the navigation controller is demanding can be achieved without a stall\n\nThey use these two parameters:\n\n> The **STALL_PREVENTION** parameter. If this is set to zero then no stall prevention is done. This may be useful if you have no airspeed sensor and the synthetic airspeed estimate is not good \n> enough\n> \n> The **ARSPD_FBW_MIN** parameter, which is the configured minimum airspeed for level flight. It is this value that is scaled with the bank angle to calculate the safe airspeed for any demanded bank angle\n\nI'm not saying we have to copy, but there is not a big choice of approaches toward stall. It is classical physics.  \n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-04-05T03:01:31Z",
          "body": "@AndreasAntener how would we keep TECS happy/initialized in between?\n\nHopefully I'll have some time to play around again later this week. I'll provide some plots of pitch input and response. It should be possible to get it to respond nicely when you're within the airspeed limits. Worst case I'll try doing airspeed control with only pitch outside of TECS.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-04-13T22:28:47Z",
          "body": "Rebased on master. I've been trying to gain a better understanding of TECS so that I can figure out how to make this mode work nicely. Update coming soon.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-22T10:35:10Z",
          "body": "@dagar Where is this standing?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-22T18:35:47Z",
          "body": "Waiting for me to actually go to the field and fly.\n",
          "type": "issue_comment"
        },
        {
          "author": "jcooper21",
          "created_at": "2016-05-27T05:29:49Z",
          "body": "This looks like a great mode. I may have some spare time coming up to test this mode and provide feedback. Is it in PX4 beta or master build and in the daily build of QGC?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-28T18:24:03Z",
          "body": "TODO - only allow transition to this mode for fixed wing\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-28T18:27:35Z",
          "body": "@jcooper21 this hasn't been tested since a large rebase so I need to spend some time at the field.\n\nIf you haven't already I'd suggest you thoroughly tune TECS.\n\nhttps://pixhawk.org/users/fixedwing_pid_tuning#tecs_tuning_altitude\n\nThe ArduPlane documentation is good, but many of the params are named differently.\nhttp://ardupilot.org/plane/docs/tecs-total-energy-control-system-for-speed-height-tuning-guide.html\n",
          "type": "issue_comment"
        },
        {
          "author": "jcooper21",
          "created_at": "2016-05-28T19:05:13Z",
          "body": "My tuning should be good. I'll test this when I get back from my vacation in a while. I'd this going to be the new stabalize mode? Also if it controls min air speed how do I land?\n",
          "type": "issue_comment"
        },
        {
          "author": "jcooper21",
          "created_at": "2016-05-28T19:58:53Z",
          "body": "Is this in QGC daily and px4 matter so I can set it up to test?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-06-05T23:03:57Z",
          "body": "I'll reopen this once I've had a few thorough flight tests with data and it's ready to be merged immediately.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces a new fixed‑wing 'airspeed' flight mode rather than correcting an existing incorrect algorithm or control-flow bug. The discussion and commits focus on new functionality, tuning TECS behavior and smoothing mode transitions; those are feature implementation and tuning changes, not clearly a fix for a previously identified logic error in the codebase."
  },
  {
    "title": "Clean up vehicle_status message",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3846",
    "number": 3846,
    "created_at": "2016-02-24T18:17:26Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "julianoes",
      "body": "Do not merge yet, untested, just for review.\n\nThis is work in progress trying to clean up the vehicle_status message.\nCurrent changes include:\n- Remove circuit breakers from vehicle_status\n- Delete mavlink compatible fields which were not in sync anymore.\n- Move vtol_vehicle_status enum to vtol_status topic.\n- Move battery calculations to the respective drivers (sensors.cpp and px4io.cpp).\n- Move battery data to battery_status topic.\n- Internalize condition bools into commander and out of vehicle_status.\n- Use land_detected message everywhere instead of the landed bool in vehicle_status.\n\nFor more detailed explanations, please read through the commit messages.\n\nThis PR is now on top of #3857.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-24T18:24:59Z",
          "body": "Architectural implications / cleanup looks good.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-26T13:04:28Z",
          "body": "@LorenzMeier Any idea why the mavlink include doesn't work in travis:\nhttps://travis-ci.org/PX4/Firmware/jobs/111996908#L625\n\nIf I use the exact same command on my machine, it works.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-26T15:48:27Z",
          "body": "Have you tried `#include <v1.0/common/mavlink.h>`?\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-26T16:07:52Z",
          "body": "@dagar thanks, I'll give it a try.\n",
          "type": "issue_comment"
        },
        {
          "author": "jschall",
          "created_at": "2016-02-27T00:36:09Z",
          "body": "@julianoes looks like there's some ros stuff failing CI tests (src/platforms/ros/nodes/commander/commander.cpp). Looks like it is simple to fix. Should I address problems with it? Can I be made a collaborator here so that I can push to the branch?\n\n@LorenzMeier what is the timeline like for getting this pushed in once it passes CI tests?\n\n@liamstask fyi\n",
          "type": "issue_comment"
        },
        {
          "author": "jschall",
          "created_at": "2016-02-27T00:43:44Z",
          "body": "Which target should I build to reproduce the error? I tried ros_sitl_default but it said that target was deprecated and to use posix_sitl_default (which works)\n",
          "type": "issue_comment"
        },
        {
          "author": "liamstask",
          "created_at": "2016-02-28T01:04:46Z",
          "body": "@LorenzMeier any pointers on debugging the travis failures per @jschall's questions above?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-28T02:46:23Z",
          "body": "@jschall you can open a pull request onto this branch. It looks like you just need to update the ros commander node to use the new commander_state.\n",
          "type": "issue_comment"
        },
        {
          "author": "jschall",
          "created_at": "2016-02-29T07:30:06Z",
          "body": "There's a new \"commander_state\" message but no one publishes it as far as I can tell.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-29T09:22:30Z",
          "body": "@jschall :\n\n> looks like there's some ros stuff failing CI tests (src/platforms/ros/nodes/commander/commander.cpp). Looks like it is simple to fix. Should I address problems with it? Can I be made a collaborator here so that I can push to the branch?\n\nI didn't know about this ROS stuff, let me have a look.\n\n> There's a new \"commander_state\" message but no one publishes it as far as I can tell.\n\nOh, good catch. I'll add that.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-29T16:47:58Z",
          "body": "Jenkins: test this please\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-03-03T13:24:53Z",
          "body": "I rebased this once again on master. Every time there is some conflicts, so it would be good to flight test this and merge as soon as possible.\n\n@tumbili any chance you could give this a flight test (in the snow :smile:)?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-04-08T08:12:17Z",
          "body": "Jenkins: test this please\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-04-08T13:49:52Z",
          "body": "@LorenzMeier and @liamstask\n\nThis would be ready to be merged, I've test flown it today. However, I'd like to hold off the merge until Monday in case it breaks somebody's setup because I'll be offline and not able to resolve conflicts or help debug problems.\n",
          "type": "issue_comment"
        },
        {
          "author": "liamstask",
          "created_at": "2016-04-08T15:09:05Z",
          "body": "sounds good!\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-04-11T16:42:21Z",
          "body": "Rebased and applied!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR reorganizes and removes stale/out-of-sync status fields (mavlink-compatible fields, landed bool) and moves condition booleans into the commander and battery calculations into drivers, which addresses inconsistent program state and incorrect status reporting. These changes correct logic-level problems (wrong/stale data flow and boundary of responsibility) rather than just style or build issues."
  },
  {
    "title": "Px4.enhancement.3760.implement auto follow me.wip [WIP do not merge]",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3814",
    "number": 3814,
    "created_at": "2016-02-21T03:50:56Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "catch-twenty-two",
      "body": "adds ability for px4 firmware to track a target.  Implements rudimentary following of target position in navigator.\n\nNote: this uses a new version of the mavlink library with the proposed follow target method, will not work with current mavlink library version.\n\nhttps://github.com/catch-twenty-two/mavlink\n\nAlso uses new version of qground control with follow me option implemented:\n\nhttps://github.com/mavlink/qgroundcontrol/pull/2817\n\nSome concerns:\n\nPlease comment on ideas for error checking on bad position sent from tracker.  (e.g. ignore tracker if new pos vector is x meters away and instead just loiter)\n\nDoes it make sense for the \"follow previous - current line\" following be activated for this?  (currently I have it activated) I guess this might come in handy for intermittent GPS being sent...\n\nIn both instances ( \"follow previous - current line\" on and off) the result is \"jumpy\" if the new sp is to close to the current set point. \n\nMaybe this entire follow feature needs to be treated more like an instance using the position control code, except instead of manual input it gets tracker input. Or maybe it needs to be some type of hybrid of both pos control and auto line/position following code.\n\nAnyways, just some ideas, I'd like to get other's suggestions. \n\n@LorenzMeier had suggested using a predictive model if we have the target velocity. (this doesn't seem to be an option on my nexus 7 as it doesn't seem to output gps velocity)\n\nHere is a video of the current implementation, Qground control has been coded to send out sinusoidal gps coors, you can see the jumpiness I am referring to:\n\nhttps://www.youtube.com/watch?v=qGC464eVI5E&feature=youtu.be\n",
      "issue_comments": [
        {
          "author": "devbharat",
          "created_at": "2016-02-21T08:37:25Z",
          "body": "This reminded me of the target following I had implemented in APM a few years ago (used the same fixed wing libraries (l1 with TECS) as we do now) and the issues I faced. I did it by setting the target's position as the waypoints for the 'follower' (also I think I overwrote the current target waypoint with the latest waypoint I received from the target. Otherwise, the follower's position oscillated heavily). \nThis strategy 'works' but you end up with steady state error between the target(say, moving in a straight line) and the follower (who never got directly in line behind the target, was always a bit to the left or the right). This can be seen in the following pic:\n\n![dsc_0615](https://cloud.githubusercontent.com/assets/3105122/13201714/9179428e-d87d-11e5-9f86-2a6d8ccab171.JPG)\n\nYou can see the green plane (fixed wing UAV) is following not directly behind the leader, but to the side. This was because unlike a single static waypoint, the waypoints in this case were constantly overwritten to the new target position values, with the controller never getting the time to correct the steady state error. This made me feel that, atleast for fixedwings, tracking moving targets required something more than just setting moving waypoints from the controls point of view.\n\nYou can see a mission with 3 aircrafts daisy-chained here:\n![3-ac-lf-2013-09-28 13_41_29](https://cloud.githubusercontent.com/assets/3105122/13201743/7d2f5934-d87e-11e5-85f1-1635b420890e.png)\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-22T11:58:54Z",
          "body": "Awesome! I'm not so worried about the back and forth as my intention was not to keep sending a specific setpoint all the time, but to implement a \"rubber-band\" controller in that navigator class which trades smoothness for accuracy and only updates the next position gradually.\n\nWhat I however indeed forgot is that we need to feed a desired velocity. That should be supported by the triplet as well. Or we can go straight to the position setpoint instead. I need to think about that and maybe we can discuss this on the dev call?\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-02-22T14:27:58Z",
          "body": "> What I however indeed forgot is that we need to feed a desired velocity. That should be supported by the triplet as well. Or we can go straight to the position setpoint instead. I need to think about that and maybe we can discuss this on the dev call?\n\nOkay sounds good. Ill be on the call this morning, interested in hearing more about the controller you have in mind.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-01T08:16:38Z",
          "body": "@catch-twenty-two Any update on the current state? Could you push your latest commits so others have a chance to review and join in?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-01T08:17:03Z",
          "body": "You also might want to rebase. We kept improving the sim, in particular Gazebo, quite a bit.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-12T22:16:07Z",
          "body": "@LorenzMeier Sorry your request got lost in all the noise of my email in box.  The first iteration of the px4 side of the firmware code should be complete now.  Over all operation is a lot smoother.\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-14T06:56:16Z",
          "body": "@catch-twenty-two I reviewed your code. You can use a pixhawk & mavros to send waypoint message include gps velocity. run rosrun mavros gcs_bridge, roslaunch mavros px4.launch.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-14T07:44:34Z",
          "body": "@liang-tang You missed the intent of this PR. It does follow-me without a companion computer. So what you describe is not of interest here.\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-15T10:01:32Z",
          "body": "@catch-twenty-two\n\n `if (_pos_sp_triplet.current.type == position_setpoint_s::SETPOINT_TYPE_FOLLOW_TARGET) {\n                    _vel_sp(0) = _pos_sp_triplet.current.vx;\n                    _vel_sp(1) = _pos_sp_triplet.current.vy;\n                } else if (vel_norm_xy > _params.vel_max(0)) {\n                    /* note assumes vel_max(0) == vel_max(1) */\n                    _vel_sp(0) = _vel_sp(0) * _params.vel_max(0) / vel_norm_xy;\n                    _vel_sp(1) = _vel_sp(1) * _params.vel_max(1) / vel_norm_xy;\n                }`\nThere is a bug that _pos_sp_triplet.current.valid should be valid.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-15T18:29:39Z",
          "body": "@liang-tang True probably better to double check than assume if you are in follow target mode you have a velocity to use.  I have since changed this entire statement to use the velocity setpoint type and made some other significant changes as well.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-17T16:23:41Z",
          "body": "Hello, this is ready for testing if anyone has some time available. Integration to get the system working can be a bit of a pain because it involves changes in qgc, mavlink and px4 fw.  It also requires an Android device with OTG and GPS capability. Let me know if you're interested. Thanks!\n\n@julianoes @tumbili: @LorenzMeier said I should request validation testing from you so we can pull this into master. \n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-17T19:13:17Z",
          "body": "CI failed, fix would be great. Can you also help to get the required PR for QGC through? Then it will be available on Android automatically.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-17T22:48:10Z",
          "body": "@LorenzMeier Sure will do\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-18T01:05:05Z",
          "body": "@catch-twenty-two Testing is in process.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-18T03:44:10Z",
          "body": "@liang-tang Great thanks, make sure you grab the latest code, for now I have set the minimum altitude of follow me/missions to 10 meters above home for safety.  If you have changed the mission minimum altitude to something custom for now make sure it set to at least 10m. \n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-19T04:06:46Z",
          "body": "@LorenzMeier I was able to get the CI to pass by changing the mavlink submodule to point to a temporary branch with the new follow target messages...Once the pr with the new messages are approved in the mavlink repo here:\n\nhttps://github.com/mavlink/mavlink/pull/526\n\n can switch it back to pointing to the correct repo and it should build ok without the hack.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-19T07:27:40Z",
          "body": "@catch-twenty-two Will start to integrate this tonight, so will be done in your morning.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-19T14:28:26Z",
          "body": "MAVLink PR is in. Now moving on to do a final review here and get it in.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-19T14:48:19Z",
          "body": "Almost all changes look good, except for the multi rotor position control where I see changes which will affect the general flight behaviour. When this is resolved it should be good to go.\n\nI brought in the MAVLink changes in master (c27981d), please rebase.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-19T16:09:24Z",
          "body": "> Almost all changes look good, except for the multi rotor position control where I see changes which will affect the general flight behaviour. When this is resolved it should be good to go.\n> \n> I brought in the MAVLink changes in master (c27981d), please rebase.\n\nThanks, I addressed your concerns in the comments lmk what you think.  Will do the rebase asap.\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-21T02:22:42Z",
          "body": "@catch-twenty-two  I have some advise to give you.\n\n``` ruby\nvoid FollowTarget::pause()\n{\n    //math::Vector<3> vel(0, 0, 0);\n    _current_vel.zero();\n\n    set_loiter_item(&_mission_item, _param_min_alt.get());\n\n    //update_position_sp(vel);\n\n    _previous_target_gps_pos_valid = false;\n    //_current_target_motion.lat = _navigator->get_global_position()->lat;\n    //_current_target_motion.lon = _navigator->get_global_position()->lon;\n    //mavlink_log_info(_navigator->get_mavlink_fd(),\"pause\");\n}\n```\n\nI think _previous_target_gps_pos_valid should reset to false when pause status, so _target_vel is really valid when update_target_velocity() next time.\n\n``` ruby\nvoid FollowTarget::update_target_motion()\n{\n    bool updated;\n\n    orb_check(_follow_target_sub, &updated);\n\n    if (updated) {\n\n        // save last known motion topic\n\n        _previous_target_motion = _current_target_motion;\n\n        orb_copy(ORB_ID(follow_target), _follow_target_sub, &_current_target_motion);\n\n        update_target_velocity();\n\n        if (_previous_target_gps_pos_valid == false) {\n            _previous_target_motion = _current_target_motion;\n            _previous_target_gps_pos_valid = true;\n        }\n```\n\n if  _current_target_motion is Null, _target_vel will be wrong when update_target_velocity(). So can it be modified like this?\n\n``` ruby\n        if (_previous_target_gps_pos_valid == false) {\n            _previous_target_motion = _current_target_motion;\n            _previous_target_gps_pos_valid = true;\n        }\n\n        update_target_velocity();\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-21T15:45:43Z",
          "body": "@LorenzMeier Hey Lorenz,  I got rid of the SETPOINT_TYPE_VELOCITY statement by checking if the velocity or position setpoints are valid in the setpoint triplet.  This works the exact same way, and allows me to get rid of the statement for ignoring pos setpoint generated velocity if SETPOINT_TYPE_VELOCITY is the setpoint type.\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-22T19:40:20Z",
          "body": "@liang-tang I took some time to make the code more robust and readable overall.  It should address all of your concerns. Were you able to fly it at all?\n",
          "type": "issue_comment"
        },
        {
          "author": "liang-tang",
          "created_at": "2016-03-23T00:55:08Z",
          "body": "@catch-twenty-two I tested many times, i found it difficult to catch up with me, maybe gps data lost?\n",
          "type": "issue_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-23T02:42:23Z",
          "body": "@liang-tang Great thanks for testing... Yes, that might be the case, the 3dr radio interferes with my phone gps...  I have to hold it very far away from the phone to get it to work correctly...Once it works though it works well...I'm going to play around with it some more to find the optimal placement for the radio. My friend and  I were able to take turns riding our bikes while having it follow us.  We stopped and started abruptly and also looped back on ourselves over a fairly large parking lot and it stayed with in 5-10 meters of us the whole time. \n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-23T19:42:53Z",
          "body": "Replaced by https://github.com/PX4/Firmware/pull/4065/files\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-12T22:17:22Z",
          "body": "Don't require a home position\n",
          "path": "src/modules/commander/state_machine_helper.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-19T14:33:46Z",
          "body": "In the section below are changes which exceed the changes needed for follow-me. Either this is a bad merge or the conditioning is incorrect (they should be guarded by if == FOLLOW_TARGET).\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "catch-twenty-two",
          "created_at": "2016-03-19T15:57:50Z",
          "body": "The above code uses a combination of overriding the velocity set point when it is appropriate while still using the position set point when it's not so I can take advantage of the velocity braking code as the position set point error delta gets smaller.  The code below overrides the velocity set point at all times and ignores the position set point for when the follow target module is in velocity tracking mode.  I was going to make a new set point type for the code below but saw that the position set point type already defined a set point type for velocity only, it just wasn't being used in the code anywhere. I used both of these set point types for a smooth transition between following using position and the velocity only tracking mode. Let me know if you still think I need to fix something or possibly have a better idea for what I am trying to accomplish.\n\nHere is where I switch between the 2 tracking methods:\n\nhttps://github.com/PX4/Firmware/pull/3814/files?diff=unified#diff-35e82494becdfdcc5afaafb5b3f4e361R278\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements a new 'follow target' feature and reviewers identified concrete logic issues (e.g. assuming velocity/position setpoints are valid without checking _pos_sp_triplet.current.valid, and ordering/race in update_target_motion causing wrong target velocity). The author responded by changing the validity checks and refactoring the update ordering to make target-velocity computation more robust, which addresses those logic errors."
  },
  {
    "title": "Yaw timeout for VTOL forwards transition",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3740",
    "number": 3740,
    "created_at": "2016-02-12T15:18:46Z",
    "merged": true,
    "merged_at": "2016-02-16T06:51:23Z",
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "This adds a yaw timeout on accepting the waypoint for the VTOL forwards transition because a VTOL might not reach yaw in wind. Fixes #3728\n\nMIS_YAW_TMT\n- default: -1\n- > 0: timeout active on waypoints which force heading, ignore heading for acceptance on normal waypoints\n\nMIS_YAW_TMT set to 10 seconds for default VTOL configurations\n",
      "issue_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-13T00:25:33Z",
          "body": "@LorenzMeier @sanderux timeout and forcing the heading for a transition added. How does this look?\n\nAlready flew the timeout in real, new is the mission failsafe. If this is how we want it for the moment we can merge I think.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-13T09:00:44Z",
          "body": "Reviewed, seems good other than the comment.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-13T09:11:33Z",
          "body": "Thanks @julianoes , I will push an update in a sec that also takes care of setting the failure state properly.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-15T12:54:51Z",
          "body": "Rebased on master\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-15T14:37:37Z",
          "body": "Just found one thing missing here, need to do one more commit.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-15T18:28:27Z",
          "body": "Anybody knows why px4-stm32f4discovery_default fails on Travis?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-16T06:52:50Z",
          "body": "Merged after SITL tests. @sanderux this will simplify testing this afternoon. Roman and I will rebase the TECS init, and also get the Kangaroo in before you go testing.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-02-13T08:58:29Z",
          "body": "Why -FLT_EPSILON? Shouldn't it be +FLT_EPSILON?\n\nAlso, please comment! How is a reader supposed to grasp what you're trying to achieve with this if...\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-13T08:59:47Z",
          "body": "Oh, I understand from reading the parameter. A timeout of 0 means, just continue.\nAs I said, please comment!\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the decision logic for VTOL forward transition waypoint acceptance by adding a configurable yaw timeout (MIS_YAW_TMT) so the vehicle won't wait indefinitely for heading alignment in wind. This corrects incorrect behavior/state (stuck waiting for yaw) and adds a failsafe/fallback, which is a logic bug fix rather than a syntax/style change."
  },
  {
    "title": "Vtol weathervane cleaned up history",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3736",
    "number": 3736,
    "created_at": "2016-02-12T11:42:50Z",
    "merged": true,
    "merged_at": "2016-02-15T08:50:32Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "Fixes https://github.com/PX4/Firmware/issues/3679\n@sanderux As discussed I cleaned up the history so that we only remain with three commits.\nThe diff to the old branch is zero so everything should be inside. Will give this a test in SITL and Ada can maybe test fly it today.\n@AndreasAntener  FYI\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T11:45:12Z",
          "body": "Please delete the old branch (referenced above ) if there aren't any objections.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-12T11:49:51Z",
          "body": "Done, looks good\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T14:54:08Z",
          "body": "@sanderux @AndreasAntener This is flight tested in SITL for both landing and loiter modes. Checked the log files, it seems to do the right thing.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T14:56:15Z",
          "body": "Rain just stopped me right after flashing this branch... I hope the weather is good for you Sander tomorrow :)\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-12T14:58:01Z",
          "body": "There is some wind but that would be the point for this pr. Should stay dry\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T15:06:42Z",
          "body": "@sanderux @AndreasAntener Parameters to activate this are\nVT_WV_LND_EN enable mode for landing waypoint\nVT_WV_LTR_EN enable mode for loiter items\nVT_WV_YAWR_SCL scale factor for desired yaw_rate setpoint\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T15:10:21Z",
          "body": "VT_WV_LTR_EN doesn't seem to be used anywhere\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T15:17:06Z",
          "body": "@AndreasAntener https://github.com/PX4/Firmware/blob/vtol_weather_vane/src/modules/navigator/mission_block.cpp#L75\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-12T15:18:09Z",
          "body": "In mission block\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T15:25:00Z",
          "body": "Funny, QGC didn't show me this on the field, anyway, it's there :) \n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T15:35:46Z",
          "body": "@AndreasAntener I pushed a late fix, probably you didn't have that one.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-14T13:30:38Z",
          "body": "Log from weathervane loiter test: http://logs.uaventure.com/view/t7a2AZB3WHgRZsDjGCEJpi\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-14T14:12:52Z",
          "body": "This looks good. Let's address my 2 comments. We should check it on landing as well even though I don't think it's problematic.\n<img width=\"1366\" alt=\"screen shot 2016-02-14 at 15 07 12\" src=\"https://cloud.githubusercontent.com/assets/5750020/13034114/d95b8a0e-d32c-11e5-817b-5842bf44f54d.png\">\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-14T14:37:08Z",
          "body": "Addressed comment 1\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-14T22:53:17Z",
          "body": "This should address the feed forward\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-15T08:50:41Z",
          "body": "Merged!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-13T10:11:32Z",
          "body": "we should change `_mode_auto` to `!_control_mode.flag_control_manual_enabled` so this also works in offboard and it's consistent with the other checks\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-14T13:53:11Z",
          "body": "@tumbili should we also remove the feed forward when we clamp the rate?\n",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 72,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses the VTOL weathervane behavior (issue #3679) by changing control logic (enabling modes for landing/loiter, feed‑forward behavior) and was validated in SITL and flight tests. Review comments reference logic-level fixes (unused enable flag, feed‑forward) which were resolved before merging, indicating it corrects incorrect behavior rather than style or syntax."
  },
  {
    "title": "Fix for transition failsafe",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3730",
    "number": 3730,
    "created_at": "2016-02-11T22:40:16Z",
    "merged": true,
    "merged_at": "2016-02-11T23:24:48Z",
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "fixes https://github.com/PX4/Firmware/issues/3729\nonly transition to MC when not MC\n",
      "issue_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-11T23:24:58Z",
          "body": "Great, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly fixes a state-transition bug in the failsafe logic: it prevents transitioning to MC when already in MC. That corrects an incorrect conditional/state transition which would produce unintended behavior during failsafe handling."
  },
  {
    "title": "Mission takeoff yaw fix",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3724",
    "number": 3724,
    "created_at": "2016-02-11T14:58:14Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "Fixes yaw on takeoff over home location\nIncludes #3717\nIncreases stack for mc pos and fw pos controllers\n\nTest flown\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-11T15:02:58Z",
          "body": "Ok, will merge once the build passes.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-11T15:54:46Z",
          "body": "Done, on master, awesome! Thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly states it 'Fixes yaw on takeoff over home location', which addresses incorrect vehicle orientation behavior (a logic/state error) during mission takeoff. It was test flown and merged, and the comments confirm acceptance, supporting a high-confidence judgment that a logic bug was fixed."
  },
  {
    "title": "WIP: VTOL weathervane",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3706",
    "number": 3706,
    "created_at": "2016-02-09T01:37:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes https://github.com/PX4/Firmware/issues/3679\ncherry-picked all commits onto new branch\n\nTo enable weathervane mode set param VT_OPT_WV_LND to 1\nThe VT_OPT_WV_RATE_D param defines the yaw dampening during landing\n\ntodo:\n- [x] Rename param to vtol_wv_yawrate_scale\n- [x] Disable MC_YAWRATE_I when weathervaning\n- [x] Add option to weathervane in loiter\n- [ ] Implement weathervane strategy when yaw is over-demanded during MC auto flight\n- [ ] flight test\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-02-10T13:54:40Z",
          "body": "@sanderux I fixed the naming. I guess you need to flight test this now.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-10T14:11:47Z",
          "body": "Thanks, i have a flight window saturday (as it is predicted now).\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-10T14:50:43Z",
          "body": "Looking forward to the testing. I think we should try to de-risk branches in SITL before and turn them into 2-3 test branches so the flight testing becomes tractable.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-11T14:22:01Z",
          "body": "@tumbili where did your commit go renaming the scale param?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-11T19:24:53Z",
          "body": "@AndreasAntener @sanderux sounds like we need this now to fix #3728. So should probably focus on this.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T08:23:07Z",
          "body": "@sanderux Seems like somebody forced pushed to this branch. I will need to push again from my private laptop.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-12T08:25:27Z",
          "body": "A force push would be visible in the timeline. Rather looks like they were not pushed at all, or to a different branch.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-12T08:26:21Z",
          "body": "@tumbili Since the commits are trivial please just quickly re-do them. Don't wait for tonight, as we miss a test window for @AndreasAntener. I want this to move faster now that you're back.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-12T11:43:16Z",
          "body": "Closing in favour of #3736\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-02-09T10:41:35Z",
          "body": "@sanderux you can zero the third component of the rates integral here.\n",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 53,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-09T10:43:57Z",
          "body": "@sanderux how about changing the name to vtol_wv_yawrate__max? It's not really damping anyway.\n",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-11T20:03:51Z",
          "body": "We should add this to is_reached() in the mission if the command is a normal waypoint and a 1-2 second timeout occurred.\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 31,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly targets incorrect VTOL yaw/weathervane behavior (references Fixes #3679) and changes controller logic (e.g. disabling MC_YAWRATE_I during weathervane, adding yaw-damping parameter and mode options). Those are behavioral/algorithmic fixes rather than style fixes. However the branch is WIP, untested in flight and was later closed in favour of another PR, so certainty is not high without the code diff or test results."
  },
  {
    "title": "WIP: VTOL_TAKEOFF and VTOL_LAND mission command support",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3699",
    "number": 3699,
    "created_at": "2016-02-07T23:47:48Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes: https://github.com/PX4/Firmware/issues/3492\nFixes: https://github.com/PX4/Firmware/issues/3414\nSupport for MAV_CMD_NAV_VTOL_TAKEOFF and MAV_CMD_NAV_VTOL_LAND\n\ntodo\n- [ ] Rebase and remove weathervane merge (maybe setup new branch)\n- [ ] Implement weathervane land for VTOL_LAND\n- [ ] Flight test\n",
      "issue_comments": [
        {
          "author": "sanderux",
          "created_at": "2016-02-07T23:50:57Z",
          "body": "@DonLakeFlyer these commands should be supported in QGC\nthey are in every sense similar to takeoff and land commands\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-07T23:55:24Z",
          "body": "Here's the test mission waypoint file\n[vtol takeoff and land.txt](https://github.com/PX4/Firmware/files/120995/vtol.takeoff.and.land.txt)\n\nThe vtol transition takeoff and land waypoints are displayed as mission frame commands. they are actually located near home. Takeoff a few meters north and land very close to home (where it lands)\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-08T18:08:08Z",
          "body": "whoops, merge was not intended\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-08T20:09:12Z",
          "body": "It's probably best to wait with this until the new mission handling is in (it's ready now, just needs a last flight test).\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-08T21:22:19Z",
          "body": "I'm going to reset this branch. @sanderux Please delete this branch locally and re-checkout it.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-08T21:22:58Z",
          "body": "No, actually not resetting. We'll deal with this later.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-08T22:06:49Z",
          "body": "Both these items need further testing in actual flight (mostly weathervane) because testing this in SITL is hard.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-08T22:10:38Z",
          "body": "@AndreasAntener i merged this code in your vtol_mission_fixes tree locally. works (much better).\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements handling for MAV_CMD_NAV_VTOL_TAKEOFF and MAV_CMD_NAV_VTOL_LAND, which fixes incorrect mission/command interpretation and execution for VTOL vehicles (commands were previously treated as generic mission-frame waypoints and positioned near home). That is a behavioral/logic fix (state/command handling), though the branch is WIP and requires flight testing so confidence is not maximal."
  },
  {
    "title": "Vtol weathervane",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3694",
    "number": 3694,
    "created_at": "2016-02-07T12:58:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "Fixes: https://github.com/PX4/Firmware/issues/3679\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T14:18:59Z",
          "body": "After reviewing this further, I believe we should clamp the yaw control demand, instead of disabling it completely. So that the system does only spend a little effort in maintaining heading. In light wind it will then maintain it, in heavy wind it will weather-vane.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-07T15:43:10Z",
          "body": "@LorenzMeier i agree, now it might be hard to understand what is going on in low wind conditions. How, and with what threshold should it disable control?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T15:52:59Z",
          "body": "10-20% of the maximum yaw demand might make sense, that would be 0.1-0.2 (you have to limit -0.2..0.2, since its symmetric around zero). That matches the intent to not give up too much control over roll and pitch for yaw.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-07T16:49:33Z",
          "body": "@LorenzMeier @sanderux I need to check the mixer if this would even make any sense. I believe yaw is mixed in at the very end so that it doesn't violate thrust, roll, pitch\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T16:52:34Z",
          "body": "@tumbili This discussion is not about yaw handling. Its about orienting the plane into the wind so that wind gusts do not completely ruin the position and attitude control response. Its very different from mixer limits.\n\nWe reserved a minimum for yaw. And it would put the motors at their maximum spread. It would mean that you would see the system constantly yaw in wind, coupled with roll and pitch. Two motors would run at their maximum capacity and overheat. We can't handle this on a best-effort basis in the mixer. We need to do this in the controller already, like Sander proposed.\n",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2016-02-07T19:32:42Z",
          "body": "This will apply only to QuadPlanes (classic plane with tail and rudder) not the quad delta wings, right? \n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-07T20:14:26Z",
          "body": "@tubeme \nIt will apply to all VTOL types where the setting is enabled. if you have a standard vtol on delta wing i would suggest leaving the VT_OPT_WV_LND set to 0 (default).\n",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2016-02-07T20:56:53Z",
          "body": "@sanderux OK I understand. Thanks.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-07T21:20:11Z",
          "body": "@LorenzMeier is this more what you had in mind?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-09T01:37:37Z",
          "body": "Replaced by https://github.com/PX4/Firmware/pull/3706\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-02-07T12:59:09Z",
          "body": "@sanderux Make sure to condition this on auto mode!\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 37,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T13:24:26Z",
          "body": "whitespace error\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T13:28:22Z",
          "body": "We probably need to add the ability to add only ORB_IDs. This fix won't work properly because now the length of the struct is not necessarily equal.\n",
          "path": "src/modules/vtol_att_control/vtol_att_control_main.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T14:13:51Z",
          "body": "Add the condition here: `!_control_mode.flag_control_manual_enabled &&` then you should be safe.\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T14:15:46Z",
          "body": "This is not the right way to do this. You can get into an increasing yaw rate this way. A simple wind gust would be sufficient to start the spiral of death. What you should do instead is to clamp the actuator control output for yaw.\n",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T14:16:44Z",
          "body": "It will look funny if the system is constantly yawing on land. It should instead be \"soft yaw control\" or something like that.\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR targets incorrect yaw handling in VTOL 'weathervane' mode (an incorrect control strategy that disabled yaw control and could lead to motors saturating), which is a logic/behavior bug. Reviewers note the implementation should clamp yaw demand rather than disabling it and the PR was ultimately superseded, so while it addresses a logic error the proposed fix was debated and not final in this submission."
  },
  {
    "title": "Remove run-once procedure on check_dist_1wp",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3690",
    "number": 3690,
    "created_at": "2016-02-07T00:40:51Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes: https://github.com/PX4/Firmware/issues/3688\n\nThe stored mission is checked at system startup. When no mission is loaded the check returns OK and sets a param that it does not need to check again. When a new mission is uploaded this bool is not reset.\n\nIn light of future adjustments to the feasibility checker (soft check on load, hard check on execute) i have chosen to remove the run-once procedure. I will soon add the ability to load a mission on a location far from the first waypoint, it will warn the user but still accept the mission. Upon execution it will run the check again and fail to execute if still too far away.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T16:56:24Z",
          "body": "Thanks! Cherry-picked to master.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error: a run-once flag caused the mission feasibility check to be skipped after startup and was not reset when a new mission was uploaded, producing incorrect behavior (improper state transition). Removing the run-once procedure ensures the mission distance check runs when appropriate (on load/execute), correcting the unintended state/flow bug."
  },
  {
    "title": "Vtol RTL transition before landing when in fixed wing",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3687",
    "number": 3687,
    "created_at": "2016-02-06T22:30:54Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes: https://github.com/PX4/Firmware/issues/3617\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T16:39:01Z",
          "body": "Is this SITL tested?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-07T17:16:07Z",
          "body": "Yes works well in sitl. You can switch a mission during fw flight to rtl, it will transition before landing\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T17:20:01Z",
          "body": "Applied to master as its nicely self-contained.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect vehicle behavior (state-transition) when switching to RTL while in fixed-wing mode — previously it would not transition properly before landing. That is a logic error (improper state transition / incorrect behavior), and the author reports SITL verification and the maintainer applied the change to master."
  },
  {
    "title": "use system specific acceptance radius for multirotor takeoff",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3686",
    "number": 3686,
    "created_at": "2016-02-06T20:40:25Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "Fixes #3684 \n\nThe condition for reaching takeoff waypoint is the same as on my mission update. Also had to update the isolated takeoff item altitude because the acceptance radius won't be used anymore. Tested in sitl/hil\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T00:48:40Z",
          "body": "The root cause of the issue for me seems to be that all acceptance radii are zero. So this PR fixes takeoff, but not the other waypoints.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-07T09:24:02Z",
          "body": "In SITL they are/were NAN for some reason. If they were zero it would work as it is.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-07T09:32:30Z",
          "body": "This fix does only use the system acceptance radius for takeoff like we want it anyway, and by chance is also a workaround for sitl issue.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-07T11:33:34Z",
          "body": "Applied on master\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the condition used to detect reaching the takeoff waypoint to use the system-specific acceptance radius, addressing incorrect behavior when acceptance radii were zero/NaN and thus the waypoint-reached logic failed. That is a behavioral/logic bug (wrong conditional/state detection), and the change corrects the reach-condition for multirotor takeoff (tested in SITL/HIL)."
  },
  {
    "title": "WIP: Vtol TECS fix",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3678",
    "number": 3678,
    "created_at": "2016-02-05T18:29:34Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "@tumbili new tecs fix branch off master\n",
      "issue_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-11T12:26:41Z",
          "body": "With this branch, the desired airspeed is nicely ramped up after the transition. I did 2 flights in altitude control (which is btw awesome to fly the standard VTOL in):\n\n![tecs init flight 1](https://cloud.githubusercontent.com/assets/5750020/12976174/774bc7dc-d0c2-11e5-960b-883c1389e2d1.png)\nhttp://logs.uaventure.com/view/ArZvMEN93W9uMHHU4igTed\n\n![tecs init flight 2](https://cloud.githubusercontent.com/assets/5750020/12976178/79492282-d0c2-11e5-8479-0058136969e1.png)\nhttp://logs.uaventure.com/view/zrRkhmi35oGRRZiq9fTcPm\n\nIn flight 1 you still see that TECS has a huge pitch integrator to start with. There must be something wrong there when TECS starts. In the following transitions and in flight 2 you never see any integrator when it starts, so I'm assuming it's correctly reset.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T08:17:45Z",
          "body": "Another log from yesterday afternoon where the init was ok: http://logs.uaventure.com/view/Gi8kX8ho4oaye8gcjjS5sd\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-12T08:21:19Z",
          "body": "Are you saying we should merge?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T08:28:06Z",
          "body": "No :) This should be flight tested a bit more, also I need to fix AUX logging so I see FW thrust during the transition which is also one of the reasons for this fix.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-12T08:28:44Z",
          "body": "Aux logging is fixed on master (as far as implemented).\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T15:01:10Z",
          "body": "Two more flights:\nmission http://logs.uaventure.com/view/gVUinykcLifN6tCpvTTrW6\naltctl http://logs.uaventure.com/view/943VqsD7bbhZq5hX9vzCUf\nnot analyzed yet\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T17:12:36Z",
          "body": "Looked good in both flights:\n![screen shot 2016-02-12 at 18 04 01](https://cloud.githubusercontent.com/assets/5750020/13014311/731ff268-d1b3-11e5-8b07-9094368b3d05.png)\n\nVTOL att contorller is holding thrust until tecs/fw pos is publishing, TECS is reinitialized and airspeed setpoint ramps up. The only thing I don't like now is the thrust dip after the transition, could also still be smoothed out.\n\n@tumbili I implemented the thrust holding for standard vtol, how does it look for tailsitter and tiltrotor?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-12T22:25:13Z",
          "body": "TODOs\n- implement wait_on_fw for tailsitter and tiltrotor\n- copy MC state until finished waiting so the attitude setpoint doesn't jump to an undefined value\n\nFlight test\n- try setting a higher transition speed, e.g. min speed + 1\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-15T00:22:43Z",
          "body": "@tumbili I made the FW position controller aware of when TECS is running and using a 0 pitch and thrust setpoint if not. The irregularity we had before was due to stale TECS data published before it started to run (and reset) again.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-15T07:45:30Z",
          "body": "@AndreasAntener I had a look and it looks good to me. Looking forward to some flight results.\nEspecially, for the planes of Marco and Sanders I hope to see some difference. They were always diving quite a bit.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-15T13:18:14Z",
          "body": "I think i can fly this tomorrow\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-16T15:16:36Z",
          "body": "2 logs of successful missions and one with induced rc loss failsafe RTL;\nRTL mission 1: http://logs.uaventure.com/view/3msrKYiSjKrDvKKckveA4e\nFull mission 2: http://logs.uaventure.com/view/7y4hdAoz4Bsog8K24qE67c\nFull mission 3: http://logs.uaventure.com/view/x7RvfZX3MVfCrnVgocbUoG\nMission 3 video: https://drive.google.com/file/d/0B27AvDmVit4KQzNNZGRxZ0RaU2M/view?usp=sharing\n\nFor reference here a manual hover log with one yaw turn:\nhttp://logs.uaventure.com/view/YXLzTNbzjasnmqnaQfjMBY \n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-16T15:39:20Z",
          "body": "Wobbly back transition, see missions 2 and 3. and video at 4:27\nThe wobble wasnt there in the transition that happened when switching to manual mode in mission 1\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-16T15:51:00Z",
          "body": "Mission flight on master (without this branch): http://logs.uaventure.com/view/57bJPThtDayp6ZXCQ2guTQ\nmission: http://logs.uaventure.com/view/GanJap84VKsX4scBe7Zk5C\naltctl: http://logs.uaventure.com/view/vY8d5Hdufkwip8gCobdqEL\nabort after transition because it got blown away by wind: http://logs.uaventure.com/view/zQ5WKTyQcqPMJdhLHBD6Zg\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-16T20:01:41Z",
          "body": "After changing some parameters MUCH better performance:\nnew mission 1: http://logs.uaventure.com/view/zCiXVJtTPNoPNZ7e2cn4h\nnew mission 2: http://logs.uaventure.com/view/SGutTXNPo92waZE5UBkGSK\n\nAnd a video of mission 1: https://drive.google.com/file/d/0B27AvDmVit4KT1BpNTRnNzVrZEE/view?usp=sharing\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-16T21:03:36Z",
          "body": "The 2 missions with new params were identical.\nI do see strange altitude behavior when comparing both:\n\nThe whole mission was set on 25m altitude waypoints\n(Alt \\* 100)\n\nMission 1:\n![alt 1](https://cloud.githubusercontent.com/assets/14801663/13090946/1157dbba-d4f9-11e5-8dcc-23900b049b1b.png)\n\nMission 2:\n![alt 2](https://cloud.githubusercontent.com/assets/14801663/13090951/16fe7146-d4f9-11e5-864d-8eaacc407911.png)\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-17T15:39:32Z",
          "body": "New test flights, in 0 wind, higher transition speed, and 0 speed weight:\nhttp://logs.uaventure.com/view/2AZKfJ5DHxbAmbbmsg4dr8\nhttp://logs.uaventure.com/view/qjFVbGSC4ACEzeCN3UcMRB\nvery nice\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-18T10:35:29Z",
          "body": "@AndreasAntener This is tested with tailsitter in SITL.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-18T17:54:24Z",
          "body": "@AndreasAntener Can we merge this?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-18T17:56:58Z",
          "body": "Awesome work! Rebased and applied (and I checked that I had Roman's rebased branch and the diff is clean).\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR addresses incorrect runtime behavior/state during VTOL→FW transitions (stale TECS data, unreset pitch integrator and improper thrust/airspeed handling). The changes reinitialize TECS, prevent use of stale setpoints by holding thrust and having the FW controller use safe defaults until TECS is running, and ramp airspeed — all fixes to incorrect state/logic rather than syntax."
  },
  {
    "title": "Simulation lockstep",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3675",
    "number": 3675,
    "created_at": "2016-02-04T23:56:36Z",
    "merged": true,
    "merged_at": "2016-02-05T15:52:05Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "This PR implements the Simulator -> SITL direction and blocks the execution of SITL if the simulator is lagging. It also does time bookkeeping and ensures the blocked execution does not lead to jumping timestamps. \"Flight tested\" in Sim, leads to a lot more stability.\n\n@liamstask @tumbili You probably will enjoy this.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-04T23:58:03Z",
          "body": "@vbuskirk @darknight-007 This should fix your cloud environment.\n",
          "type": "issue_comment"
        },
        {
          "author": "liamstask",
          "created_at": "2016-02-05T00:01:03Z",
          "body": "nice, checking this out now\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-05T08:26:27Z",
          "body": "@LorenzMeier Great, this is fantastic!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-05T08:44:01Z",
          "body": "@tumbili could you help with the code review so we can get it in?\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-05T09:00:23Z",
          "body": "@LorenzMeier Yes, will do!\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-02-05T09:46:50Z",
          "body": "@LorenzMeier Works perfectly fine for me! Will do a review now.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-05T15:52:18Z",
          "body": "Merged after more testing and review.\n",
          "type": "issue_comment"
        },
        {
          "author": "i-sheremet",
          "created_at": "2016-02-06T12:25:48Z",
          "body": "@LorenzMeier Thank you for working on it!\nI have already made a [post](https://groups.google.com/forum/#!topic/px4users/O3r9kFyVT4Y) regarding the issue and my PC setup (_Asus ux32vd : Intel i7 3517U Processor x4_cores, 10 Gb RAM, SSD memory, discrete video card - Nvidia GT 620M_), but unfortunately I didn't notice any significant difference in performance with this corrections. Here are the results I got:\n\nFlight with default setup, gzclient on, shuttling between waypoints 2-3-4. [Flight log](https://drive.google.com/file/d/0B9wE0Um8rdPgc0duUTd0aW1mWE0/view?usp=sharing)\n![1](https://cloud.githubusercontent.com/assets/7020958/12866583/7363e1e4-ccdb-11e5-9415-f1780acf04af.png)\n![2](https://cloud.githubusercontent.com/assets/7020958/12866595/f77c5e84-ccdb-11e5-9f23-1afaac3c6c97.png)\nnutshell constantly prints messages as these:\n\n```\nINFO  simulator is slow. Delay added: 17398 us\nINFO  simulator is slow. Delay added: 13763 us\nINFO  simulator is slow. Delay added: 13225 us\nINFO  simulator is slow. Delay added: 10039 us\nINFO  simulator is slow. Delay added: 11732 us\nINFO  simulator is slow. Delay added: 23303 us\nINFO  simulator is slow. Delay added: 12116 us\nINFO  simulator is slow. Delay added: 11689 us\nINFO  simulator is slow. Delay added: 20377 us\n```\n\nThe exact flight with gzclient off. It made several circles, path is overlapped. [Flight log](https://drive.google.com/file/d/0B9wE0Um8rdPgbXFnREplSHVlLXM/view?usp=sharing)\n![3](https://cloud.githubusercontent.com/assets/7020958/12866610/aa20a662-ccdc-11e5-9a05-d24a9086d4b0.png)\n![4](https://cloud.githubusercontent.com/assets/7020958/12866617/1a1cdcb0-ccdd-11e5-984b-b8f2f4456bc9.png)\nonly 3 messages in nutshell:\n\n```\nINFO  simulator is slow. Delay added: 17390 us\nINFO  simulator is slow. Delay added: 13690 us\nINFO  simulator is slow. Delay added: 14090 us\n```\n\nSo the problem remains. Maybe it has something to do with my gazebo or pc setup? I have gazebo version 6.5.1\nThanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes simulator-SITL interaction to a lockstep model, blocking SITL when the simulator lags and doing time bookkeeping to avoid jumping timestamps. That addresses a timing/synchronization logic bug (incorrect state/timing transitions) that produced unstable behavior. Reviewers tested and merged the change, though one user still saw performance issues likely due to their environment rather than the fix itself."
  },
  {
    "title": "Mission feasibility fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3673",
    "number": 3673,
    "created_at": "2016-02-04T19:48:57Z",
    "merged": true,
    "merged_at": "2016-02-04T20:36:52Z",
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "- Fixes https://github.com/PX4/Firmware/issues/3656\n- Fixes https://github.com/PX4/Firmware/issues/3648\n- Corrected spelling on method\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-04T19:58:19Z",
          "body": "Looking good! Will merge once they pass.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-04T20:37:02Z",
          "body": "Merged, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description explicitly state it 'fixes' two mission feasibility issues and corrects a method, which indicates it addresses incorrect behavior (logic) in mission feasibility checks. The maintainer's approval and merge further support that the changes resolved reported incorrect behavior, though no code is provided here to verify specifics."
  },
  {
    "title": "VTOL: check mission feasibility as rotary wing",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3664",
    "number": 3664,
    "created_at": "2016-02-03T21:15:16Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "VTOL mission feasibility can be validated on rotary wing basis so no fixed wing landing feasibility will fail the mission\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-02-06T09:28:36Z",
          "body": "@sanderux Did you test this! If yes I will rebase and merge, looks good.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-06T09:43:21Z",
          "body": "Yes, tested and works. I should note that it does now allow a mission where fw flight flies at very low altitudes when vtol\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-18T17:56:48Z",
          "body": "@tumbili Roman I think we can pull this in. Need to think about further mission check strategies for vtol\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-18T20:42:49Z",
          "body": "Cherry-picked.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes mission feasibility checks for VTOL to validate using rotary-wing rules rather than fixed-wing landing constraints, which previously could incorrectly reject valid VTOL missions. The title/description and reviewer comments indicate this corrects misapplied validation logic and was tested before merge, so it fixes a logic error (incorrect conditional/validation behavior)."
  },
  {
    "title": "Mavlink read back frame fix",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3660",
    "number": 3660,
    "created_at": "2016-02-03T10:56:08Z",
    "merged": true,
    "merged_at": "2016-02-03T12:09:06Z",
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes https://github.com/PX4/Firmware/issues/3658\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-03T11:24:18Z",
          "body": "Nice! Will merge once it passes.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description explicitly state it 'fixes' a Mavlink read-back frame issue and references a tracked issue, which indicates a behavioral bug rather than a stylistic change. The brief positive review comment also implies it corrects incorrect runtime behavior, so this appears to address a logic error (likely incorrect frame handling or boundary/state logic)."
  },
  {
    "title": "RTL was broken by a recent change, revert",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3604",
    "number": 3604,
    "created_at": "2016-01-26T14:56:37Z",
    "merged": true,
    "merged_at": "2016-01-27T11:05:59Z",
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "@tumbili can you quickly verify the revert and pull this?\n\nI'm going to reimplement this in https://github.com/PX4/Firmware/pull/3598\n",
      "issue_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-26T14:59:02Z",
          "body": "log with mission and RTL: http://logs.uaventure.com/view/zKUEwNhZM4Sep6gkDyLZUd\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title explicitly states that RTL (Return-To-Launch) was broken by a recent change and the author is reverting that change. Reverting a change that caused incorrect RTL behavior addresses an unintended program behavior/state, so this is a fix for a logic error (supported by provided mission/RTL logs)."
  },
  {
    "title": "VTOL mission item handling",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3598",
    "number": 3598,
    "created_at": "2016-01-26T02:10:05Z",
    "merged": true,
    "merged_at": "2016-02-08T23:11:44Z",
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "In general this will fix handling for 2 part mission items (takeoff, landing, transitions)\nFixes #3583\nFixes #3581\nFixes #3501\nFixes #3414\n\nShould handle the following cases consistently:\n- [x] transition: yaw into direction of next wp then transition\n- [x] back transition: transition then move to wp\n- [x] back transition yaw issue\n- [x] takeoff: climb then move to wp\n- [x] land: move to wp then descend (fixes #3388)\n- [x] back transition: yaw north when flying south\n",
      "issue_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-01-26T07:05:20Z",
          "body": "@AndreasAntener ready for review?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-26T07:19:39Z",
          "body": "Only conceptual, see the comment here: https://github.com/PX4/Firmware/issues/3583#issuecomment-174783402\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-28T08:09:40Z",
          "body": "@sanderux This is now working in STIL. Please take extra care when testing, I haven't thoroughly tested it yet, so please to a SITL test first. Forward transition now aligns towards next waypoint:\n\n<img width=\"819\" alt=\"screen shot 2016-01-28 at 08 57 03\" src=\"https://cloud.githubusercontent.com/assets/5750020/12638564/7e9d981e-c59e-11e5-9974-1bca814a5505.png\">\n\nhttp://logs.uaventure.com/view/iMh8rPQvEyiCWGfNUTtq2C\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-28T08:35:13Z",
          "body": "@AndreasAntener mission_block.cpp:195 \nPX4_WARN(\"yaw err: %.3f\", (float)yaw_err);\n\ngives me a compilation error (double to float). disabled it\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-28T23:57:44Z",
          "body": "@AndreasAntener I have a commit ready that fixes an IO hog because the mission feasibility checker was constantly running. Now only running before entering a mission. If you give me access i can attach to your PR to save a lot of merging.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-29T06:41:56Z",
          "body": "Nice! Is it independent from this functionality and my changes? If yes we should treat it as such, so it's traceable and documented on a PR.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-29T08:50:00Z",
          "body": "On further inspection it seems although it loops it's only executed when a new home position is set. There does seem to be an issue of accepting invalid missions. see https://github.com/PX4/Firmware/issues/3627\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-29T16:30:13Z",
          "body": "Quick update, here is the log from our last flight: http://logs.uaventure.com/view/4G7pGXVjfMSttAmqPTCDkP\n\nWe had some issues with loading the mission back from QGC, which messed up the transition waypoints (lost the \"frame\"). So this flight http://logs.uaventure.com/view/BCMa7QKdCMgakcGdKFUSSg is actually also good but there was probably something wrong with the forward transition waypoint.\n\nOne or two more checks with latest QGC would be good and I need to go through the rest of the command handling to make sure nothing got lost during the refactoring.\n\nAnd the fix on the position controller is still to be verified further.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-01-29T17:51:05Z",
          "body": "I think the mission feasablity checker needs to run when a mission is uploaded, not just before it gets executed. Otherwise the user doesn't get the feedback in time.\nOr, is this already the case?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-29T18:04:21Z",
          "body": "@julianoes I think both should happen in a different way. I could be loading a mission from home, 10km away from my intended takeoff point. The FC could warn about the location but it should accept the mission. When switching to mission mode it should fail 10km away from the takeoff point. So i think both answers are correct but the feasibility checker should consider it's frame of reference (store or execute)\n\n@AndreasAntener I have a flight window saturday and/or sunday, I will update to the latest QGC. is there anything specific i could test for you?\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-30T09:10:44Z",
          "body": "@sanderux Nothing specific. Would be cool to see this branch working for you as well. Still need to find some setpoint irregularities, curious if they show up in one of your logs as well.\n\nOn the feasibility checker, I think it already works like that. Or somewhat at leas. I was able to load a mission indoors (no position lock) and then go out and fly it. Maybe if you already have a lock it doesn't accept it then. Could you check these cases and open an issue for it? And describe how it should work.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-31T16:25:55Z",
          "body": "Full autonomous mission flown.\nLog: http://logs.uaventure.com/view/5e9jP3aSS7Y4UaUyfqaYR9\nVideo: https://drive.google.com/open?id=0B27AvDmVit4KRVlpYkFMNVpTLWM\n\nSaturation occurred at back transition, likely because the next waypoint commanded decent and the angle placed the vehicle sideways on fair wind. I don't know why the rotations before land occurred.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-01-31T19:37:02Z",
          "body": "I had a quick look through the changes, mostly looking at comments and trying to spot stupid mistakes (without success which is good :smile:)\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-01T07:52:35Z",
          "body": "@AndreasAntener Could you give this another pass? When is the next opportunity to test-fly the final state for you and / or @sanderux? If not today I would prefer to merge as-is to avoid branch drift.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-01T09:16:07Z",
          "body": "Wind conditions will make further testing hard for me this week. I have noticed several irregularities that i can reproduce in sitl. I will create mission files for this and share them with analysis and confirmation of such behavior in actual flight\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-01T10:50:55Z",
          "body": "@julianoes thanks!\n\n@LorenzMeier I cannot test today, but let me correct a few things, also pushing default VTOL acceptance radius to 3m here as it seems that's what hits people currently the most.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-01T19:13:43Z",
          "body": "@AndreasAntener \nWith reference to https://github.com/mavlink/qgroundcontrol/issues/3390 perhaps we could add the info log of the current waypoint as shown here: https://github.com/sanderux/Firmware/commit/c0f0d883eb9f20202708c9ba82ed90cdedcff1ee#diff-9b5a77642a641b107c8f8a966de34acdR821\n\nOr shall i put this in a separate PR after merging this to master? \n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-02T01:25:22Z",
          "body": "@AndreasAntener please review https://github.com/UAVenture/Firmware/pull/2\nthis implements a general failsafe for most corner cases i encountered.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-02T13:15:36Z",
          "body": "Corner case in which the plane continues flight forever.\n\nSITL waypoint file:\n[land-and-then-backtransition.txt](https://github.com/PX4/Firmware/files/113944/land-and-then-backtransition.txt)\n\nThe sequence of mission items may seem unlikely but i will try to motivate my concern.\nA user will experience that the transition command is executed at the start of the next waypoint (it might even seem as if it is executed before this point). The user could therefor attempt what might seem like a shortcut (set land and then transition) to have the plane land in VTOL.\n\nThe current result of this is a plane that continues forward on it's heading until it runs out of power or in to something. \n\nMy suggestion is to have the feasibility checker validate that there will always be a waypoint before a transition command.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-02T20:18:29Z",
          "body": "I'm just tracking down the yawing issues on takeoff/landing and @sanderux FW fly-away, should have an update soon.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-02T23:03:08Z",
          "body": "@sanderux didn't yet find the cause of your landing/transition issue. The fixed wing landing already kicks in there.\n\nFixed a bunch of yawing issues, should be good to merge after another flight test.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-03T06:27:24Z",
          "body": "@AndreasAntener I have created a new PR for the front transition timeout (https://github.com/UAVenture/Firmware/pull/3) where i have integrated your and @LorenzMeier 's comments. \n\nThe weather is very unstable but i will try to get some test flights done soon.\n\nAs soon as things have been tested and merged with master i will start work on mission failsafe (RTH) on failed transitions, improved mission navigation feedback and  i could have a look at MAV_CMD_NAV_VTOL_TAKEOFF / LAND support.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-03T09:07:13Z",
          "body": "I updated the task list for 2 more issues. test can be done by flying this mission in sitl: \n[mission south.txt](https://github.com/PX4/Firmware/files/115354/mission.south.txt)\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-03T17:47:27Z",
          "body": "I added the back transition fix. For corner cases regarding missions \"invalid\" missions we should open new issues.\n\n@sanderux could you give this another SITL test with valid missions?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-03T18:09:28Z",
          "body": "Tested. SITL normal mission looks great, no more unneeded yawing\n",
          "type": "issue_comment"
        },
        {
          "author": "CornerOfSkyline",
          "created_at": "2016-02-05T15:32:47Z",
          "body": "@AndreasAntener \n![2016-02-05 23 34 13](https://cloud.githubusercontent.com/assets/12220448/12850697/077b8ce0-cc61-11e5-96c8-dd385c39d2ea.png)\nI think we should make the velocity commander smooth. When the vtol translate back to the mc, the velocity can not decelerate smaller than the mc max velocity in the several translate back seconds, there will be a huge velocity commander to control the vtol in the mc mode. It cause a big pitch commander and the vtol respond the pitch commander , it looks danger when the vtol translate back.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-05T15:48:43Z",
          "body": "The question is what velocity you commanded - if you command position hold (pitch stick zero) and trigger the velocity you get what you ask for - deceleration with the maximum braking moment. I haven't seen so far anything in real flight or in videos that I would consider extreme.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-02-05T18:20:06Z",
          "body": "Two flights with the current state:\nhttp://logs.uaventure.com/view/VxcqqMHj6cNiuqXDjcA9C7\nhttp://logs.uaventure.com/view/GiVxcx93DbU3W5jFgXZ6Qc\n\nApart from the last bit they went great, there was a waypoint missing on the mission at the end, the climbing I cannot reproduce in SITL\n\n@CornerOfSkyline yes I see pitching as well. Maybe something changed on master, I have a feeling this was better a while back.\n",
          "type": "issue_comment"
        },
        {
          "author": "CornerOfSkyline",
          "created_at": "2016-02-06T02:14:12Z",
          "body": "@LorenzMeier  I test the VTOL auto mission in the gazebo_sitl , the whole fly is in mission mode. There is no manual control.\n\nHere is the log file.\n\nhttp://logs.uaventure.com/view/YNQ9bgD4XmUwt2srbo6whQ\n\n![2016-02-06 10 21 20](https://cloud.githubusercontent.com/assets/12220448/12864038/73d7e73a-ccbb-11e5-8b7e-8102c3d3933b.png)\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-02-06T09:37:24Z",
          "body": "@andreasantener does your last commit fully replace\nhttps://github.com/PX4/Firmware/pull/3660 ?\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-01-31T19:21:30Z",
          "body": "Please add a comment for why this condition is how it is. A reader has no clue what's going on here.\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-01-31T19:22:10Z",
          "body": "Also, this comment is out of sync because it seems it's not just about AUTO.\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-01T07:50:39Z",
          "body": "This is not a critical message.\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-01T07:50:57Z",
          "body": "This is not a critical message.\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the mission-item handling for VTOL transitions/takeoff/landing — clearly addressing incorrect sequencing and state-transition behavior (yaw before/after transitions, move vs descend order) which are logic errors. Review/comment history and SITL/flight logs indicate the fixes resolve prior incorrect behavior (yawing, wrong transition timing, fly-away corner cases), so this is a logic-fix rather than a stylistic or syntax change."
  },
  {
    "title": "Navigator: Do not update a position setpoint for mission items not en…",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3582",
    "number": 3582,
    "created_at": "2016-01-24T16:03:27Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "…coding positions. Fix for #3581 - or at least a step towards it.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T16:04:11Z",
          "body": "@AndreasAntener @tumbili I think you need to do this or more to fix the zero altitude you got. It should at least point you into the right direction.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T16:27:43Z",
          "body": "@julianoes Please don't comment on commits, but on the diff here. Its non-consumable. This patch set is not complete. Its just a first step.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T16:28:28Z",
          "body": "What I fixed is the lower-level routine not having any boundary checks. The _real_ fix is to ensure it never gets called on a non-position setpoint!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T16:33:25Z",
          "body": "@tumbili @AndreasAntener @julianoes The real fix needs to be applied here: Instead of returning a mission item, this routine needs to return the next action and the next 3D position:\nhttps://github.com/PX4/Firmware/blob/6eac78d67529e20c3170092fd271c11c57c70f2f/src/modules/navigator/mission.cpp#L658-L759\n\nThen the action needs to be handled and the next 3D position is fed into the right mission logic. With that change we always have a next 3D position, no changes to the main waypoint code are required and we just need to slightly change the way commands are published.\n\nThe two PRs I submitted could potentially be left out as well. Please make sure you understand the implications before you continue on this.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-31T14:06:08Z",
          "body": "replaced by #3598\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR targets incorrect behaviour where mission items that do not encode positions still update the vehicle's position setpoint (leading to e.g. zero altitude). The author and comments indicate this is a boundary-check/logic issue in a lower-level routine and the change is a step toward the real fix (but not the complete solution), so it is addressing a logic error though the full correct design needs further work."
  },
  {
    "title": "VTOL transition command: Wait for transition to complete before switc…",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3579",
    "number": 3579,
    "created_at": "2016-01-24T13:43:12Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "…hing state. This ensures there cannot be a race condition with acceptance radius handling.\n\n@AndreasAntener This is the last needed bit to secure the acceptance radius handling.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T16:34:54Z",
          "body": "I think we should rather fix it here:\nhttps://github.com/PX4/Firmware/pull/3582#issuecomment-174314142\n\nAnd remove all command handling from inline mission code.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-31T14:05:54Z",
          "body": "replaced by #3598\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly addresses a race condition in VTOL transition handling by waiting for the transition to complete before switching state, which corrects an incorrect timing/state transition that could cause wrong acceptance-radius behavior. The discussion notes this change is intended to secure acceptance radius handling and may be superseded or refactored in a follow-up PR, so while the intent is clearly to fix a logic error the exact implementation details aren't shown here."
  },
  {
    "title": "Reject mission when starting with LAND and vehicle is landed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3571",
    "number": 3571,
    "created_at": "2016-01-23T16:01:21Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "This will reject a mission that starts with a LAND command if the vehicle is not airborn\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-23T16:06:08Z",
          "body": "Nice!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-24T10:19:29Z",
          "body": "Applied on master, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes behavior to reject a mission that begins with a LAND command when the vehicle is already landed, addressing an incorrect state/conditional handling. This corrects an improper state transition (allowing a nonsensical mission) which is a classic logic error."
  },
  {
    "title": "Do change speed support",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3567",
    "number": 3567,
    "created_at": "2016-01-22T12:31:43Z",
    "merged": true,
    "merged_at": "2016-03-13T17:12:39Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-22T12:32:28Z",
          "body": "@MikaelFerland  @tubeme This is now implemented, but UNTESTED. Simulation testing would be appreciated. I will get to test it later this weekend.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-07T17:13:43Z",
          "body": "Support is in for QGC. Just needs to be validated here.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-11T10:50:39Z",
          "body": "Doesn't seem to work yet. Not sure why.\n",
          "type": "issue_comment"
        },
        {
          "author": "MikaelFerland",
          "created_at": "2016-02-11T12:51:13Z",
          "body": "Does it take the speed from an average of GPS data or it uses the ground\nspeed sensor as reference? I have tested over HITL with jMAVSim, but I was\nunsuccesful for me also.\n\nDoesn't seem to work yet. Not sure why.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/PX4/Firmware/pull/3567#issuecomment-182807771.\n",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2016-02-16T13:44:10Z",
          "body": "Does not work in mission. Could not load the mission QGC gave error. I'm using the Latest master with the Intel angle patch from couple of days. PX4 master is 5 days old. \n\n![setspeed](https://cloud.githubusercontent.com/assets/12617619/13077856/145353c4-d4c4-11e5-897b-019862457e6f.png)\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-17T15:52:32Z",
          "body": "@tubeme I've tested it after a few additional fixes successfully in SITL. @dagar Could you test with Gazebo / VTOL sim in fixed wing mode? Then it would be ready for flight tests.\n\n<img width=\"1392\" alt=\"screen shot 2016-02-17 at 16 49 19\" src=\"https://cloud.githubusercontent.com/assets/1208119/13115122/d2b8e4f0-d596-11e5-93b9-ed8fee75b986.png\">\n",
          "type": "issue_comment"
        },
        {
          "author": "MikaelFerland",
          "created_at": "2016-02-17T18:06:30Z",
          "body": "@LorenzMeier Did you see my comments? Addionally, do I will be able to test it with jMAVSim or you guys usually tested it with Gazebo? Because it will fix my setup to get better results. Thank you for your time.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-17T18:09:23Z",
          "body": "@MikaelFerland You would need to re-test with the current state I pushed. Its ground speed based for multicopters, currently airspeed based for planes. We'll clean this up for planes later.\n",
          "type": "issue_comment"
        },
        {
          "author": "MikaelFerland",
          "created_at": "2016-02-17T18:14:05Z",
          "body": "Perfect, to simulate it jMAVSim or Gazebo is prefered?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-17T18:21:24Z",
          "body": "Both works.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-18T05:36:10Z",
          "body": "It seems my old thinkpad is nowhere near fast enough to run the gazebo simulation, so you may have finally given me a reason to upgrade. I'll try it again on a faster machine tomorrow.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-02-18T17:58:25Z",
          "body": "Rebased on master. Needs flight testing. Tested successfully in SITL in multicopter mode.\n",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2016-02-18T21:59:13Z",
          "body": "Do I need the latest master of QGC for this mission or can go with the current version I use from the screenshot?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-19T01:11:21Z",
          "body": "![screenshot from 2016-02-18 20 09 31](https://cloud.githubusercontent.com/assets/84712/13163508/b579da6c-d67b-11e5-9093-381c8c94dcf2.png)\n\nI'm getting airspeed errors in the gazebo simulation now.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-02-19T01:34:06Z",
          "body": "Rebased on master to get airspeed fix.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-13T17:12:54Z",
          "body": "Merged to master.\n",
          "type": "issue_comment"
        },
        {
          "author": "MikaelFerland",
          "created_at": "2016-03-15T02:29:59Z",
          "body": "@LorenzMeier Thank you, we tested it last weekend, and it works very well. We land unsuccessfully, but I think we broke the power plug before the mission start. We will test it again this sunday of the weather permit us.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-07T20:00:19Z",
          "body": "Really? ;) I'd say 10 would be the max acceptable default.\n",
          "path": "src/modules/mc_pos_control/mc_pos_control_params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-07T20:00:38Z",
          "body": "I guess that should be MPC_XY_CRUISE\n",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-03-07T21:59:06Z",
          "body": "Yes indeed.\n",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements support for 'change speed' mission items which previously did not work (users reported it 'doesn't seem to work' and mission loading errors). The conversation shows the author made fixes, successfully tested in SITL (multicopter) and users later confirmed it works, indicating the PR corrects incorrect mission handling logic rather than a syntax/style change."
  },
  {
    "title": "for multicopter landings make sure that the copter moves",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3523",
    "number": 3523,
    "created_at": "2016-01-16T16:29:32Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "to the landing waypoint first before the descending phase starts\n\nFixes https://github.com/PX4/Firmware/issues/3388\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-01-16T16:31:28Z",
          "body": "@LorenzMeier @AndreasAntener This makes sure that the copter first moves to the landing waypoint before it starts to descend. For the approach it will use the altitude specified in the landing waypoint.\nI'm not very sure if this is the correct altitude. What is the meaning of the landing waypoint altitude?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-16T16:49:32Z",
          "body": "From a user standpoint i would agree that the altitude in a land command would mean 'go here at this altitude and then land'. 0 altitude could be interpreted as 'keep current altitude'\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-01-16T17:08:13Z",
          "body": "@sanderux Thanks for your feedback! Makes sense, I can add the logic for the zero case.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-17T09:56:50Z",
          "body": "@sanderux @tumbili We should be careful with special cases that are not clearly documented/specified. It could as well be that 0 is a valid relative landing WP altitude if the target landing point is below home. Because the user always specifies the altitude for a normal WP I would just keep that behaviour consistent as Roman described.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-01-17T10:10:15Z",
          "body": "@AndreasAntener Yes, good argument.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-17T10:34:06Z",
          "body": "Yes, true. QGC (and most GCS i think) maintain the altitude of the last WP when planning a mission so it should not be needed.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-21T17:36:07Z",
          "body": "Tested and working. But before the yaw setpoint changed back to what it had at home for the landing. We can probably take this because we need to have a look at yawing during missions anyway.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes landing behavior so the multicopter first moves to the landing waypoint before starting the descent, which corrects an incorrect state/behavior transition (descent beginning before reaching the target XY). Review comments confirm this was unexpected behavior and testers validated the change, so it fixes a logic error."
  },
  {
    "title": "multirotor mission feasibility checks:",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3518",
    "number": 3518,
    "created_at": "2016-01-15T11:48:39Z",
    "merged": true,
    "merged_at": "2016-01-17T14:43:53Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "make sure that the relative altitude of the takeoff waypoint is\nat least one meter higher than the acceptance radius of the waypoint.\nThis makes sure that the takeoff waypoint is not reached before the vehicle\nis at least one meter in the air.\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-01-17T12:10:49Z",
          "body": "@LorenzMeier Fixed\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-17T12:12:42Z",
          "body": "Is this tested in SITL? If it passes there I would like to merge it. This is something where SITL provides 100% coverage and I can't see why it would be worse than outdoor tests.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-01-17T12:13:37Z",
          "body": "@LorenzMeier Tested in SITL but needs one more test after checks.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-17T14:38:41Z",
          "body": "So can we test and merge (locally, not via github) now?\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-01-17T14:43:48Z",
          "body": "@LorenzMeier Tested it in SITL, works as expected.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-17T11:30:25Z",
          "body": "There is a call to get the default acceptance radius from the navigator. Never use hardcoded numbers.\n",
          "path": "src/modules/navigator/mission_feasibility_checker.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-17T11:31:57Z",
          "body": "`get_acceptance_radius();` in class Navigator.\n",
          "path": "src/modules/navigator/mission_feasibility_checker.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-17T11:32:35Z",
          "body": "Should say \"Mission rejected: Takeoff altitude too low!\"\n",
          "path": "src/modules/navigator/mission_feasibility_checker.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The change enforces a boundary condition: the takeoff waypoint's relative altitude must exceed the waypoint acceptance radius by >=1m so the waypoint isn't considered reached while the vehicle is still on/near the ground. This corrects incorrect behavior (premature reaching of the takeoff waypoint) and was tested in SITL according to the discussion."
  },
  {
    "title": "Properly handle takeoff waypoint when not currently at takeoff location",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3459",
    "number": 3459,
    "created_at": "2016-01-07T16:01:09Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "Fixes #3387 \n\nInstead of taking off like this:\n![screen shot 2016-01-07 at 15 01 38](https://cloud.githubusercontent.com/assets/5750020/12174890/8cb62cd0-b55f-11e5-94e1-05624b7419d4.png)\n\nIt will now do this:\n![screen shot 2016-01-07 at 15 08 12](https://cloud.githubusercontent.com/assets/5750020/12174892/8e6dc330-b55f-11e5-8b6e-1bcc4df9e956.png)\n\nThis should also fix a bug where the \"next\" setpoint kept the type takeoff and just never stopped climbing. Although that one occurred randomly for me and I could never really pin it down.\n\nTested with takeoff WP at current location and away from current location. Fixed-wing should not be affected because the already existing takeoff flag is only set for MC\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-07T21:25:34Z",
          "body": "Applied, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect handling of a takeoff waypoint when the vehicle is not at the takeoff location — a state/conditional logic bug that produced wrong setpoints (wrong climb behaviour and a 'next' setpoint staying as type takeoff and never transitioning). The description and tests indicate it corrects the state transition and waypoint handling for MC takeoffs, so this is a logic fix."
  },
  {
    "title": "VTOL transition helper class",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3426",
    "number": 3426,
    "created_at": "2016-01-03T20:22:51Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "A helper class for VTOL transitions.\nNavigator modified to wait until transition has finished before proceding to next waypoint.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-03T23:26:06Z",
          "body": "Nice! @sjwilks @AndreasAntener FYI\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes navigator behavior to wait for VTOL transition completion before proceeding to the next waypoint, which fixes an improper state/timing transition where navigation could advance prematurely. This addresses a logic error (incorrect state handling/synchronization) rather than a syntax or style issue."
  },
  {
    "title": "Cmd forwarding",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3419",
    "number": 3419,
    "created_at": "2016-01-02T20:21:57Z",
    "merged": true,
    "merged_at": "2016-01-11T07:35:45Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@AndreasAntener @sanderux This should be enough to forward the transition command and allow to embed it into missions. It also prepares everything for camera triggers. QGC should get support for all this also today.\n\nNone of this is tested, so bring up carefully. But it shows at least where to put the plumbing.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-02T20:22:20Z",
          "body": "@SimonWilks This goes pretty far in enabling what we discussed.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-02T20:35:14Z",
          "body": "You can use this QGC branch: https://github.com/mavlink/qgroundcontrol/pull/2510\n\n<img width=\"1144\" alt=\"screen shot 2016-01-02 at 21 32 28\" src=\"https://cloud.githubusercontent.com/assets/1208119/12076012/b25644d6-b198-11e5-910c-c49f5b46fddd.png\">\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-03T13:50:52Z",
          "body": "This is in QGC master and has made it into the daily build.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-03T20:26:12Z",
          "body": "PR https://github.com/PX4/Firmware/pull/3426\nUntested but a basis to expand on.\n\nI will field test this asap. If succesful i will add some more logic like failsafe.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-05T20:16:58Z",
          "body": "@sanderux Before re-working the whole mission / transition logic, should we maybe test this and try to get this in? It should enable transitions already.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-01-05T23:54:05Z",
          "body": "@LorenzMeier The commands where not picked up by the VTOL controller. The current setup doesn't use the helper classes to perform these tasks in missions. (same with takeoff / land).they are only used for navigation modes.\n\nI have added publishing the command and checking transition completion in the current style for missions. I would be an advocate of rewriting this so that the helper classes are used in missions as well. Currently that would mean changing transition, takeoff and land procedures in the mission_block.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-06T07:54:30Z",
          "body": "@sanderux With helper classes I assume you are referring to the independent nav state handlers (takeoff.cpp, land.cpp etc). I agree that we should try to reuse the handling code, like mission item creation which I already refactored for takeoff/land and RTL (common code in the super class mission_block.cpp). That should go into the direction you mean right?\n\nBut generally these navigation states can be executed standalone and therefore have different entry/exit state handling which we cannot merge. Otherwise we need to think about the general approach there.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-01-11T07:33:48Z",
          "body": "I think this can be merged. Just did another test with the rebased version.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-01-11T07:35:47Z",
          "body": "Nice!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR adds forwarding/publishing of the transition command and checks for transition completion so mission-embedded transition commands are actually picked up by the VTOL controller. Comments explicitly state that previously the commands were not picked up and this change implements the missing plumbing, which is a logic bug in command flow (incorrect behavior), though the change was noted as untested in places."
  },
  {
    "title": "Break down sensor combined",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4917",
    "number": 4917,
    "created_at": "2016-06-27T06:30:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "As discussed in https://github.com/PX4/Firmware/issues/4861\n- This reduces the size of `sensor_combined` by a factor of 10 (!) from 790 to 72 bytes.\n- move voting into sensors module. This means that now everyone using `sensor_combined` gets voted data, including ekf2. It also adds voting for the baro.\n- use relative timestamps, necessary for the new logger. Logging `sensor_combined` at full rate now only needs 18KB/s.\n- Memory savings: when using the `q` estimator, we get almost 2kB of additional RAM, with ekf2 it's roughly 0.6kB. This is because ekf2 did not do voting, and voting itself is quite heavy, it requires 1.5kB.\n\nThis introduces a lot of changes at central places, affecting all estimators. Nothing complex, but still, it needs careful review and testing all of the estimators.\n\nI still plan to break up the sensors class into several smaller classes to make things easier to maintain.\n",
      "issue_comments": [
        {
          "author": "bkueng",
          "created_at": "2016-06-28T18:31:59Z",
          "body": "This was flight tested with inav and q estimators.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-06T07:31:55Z",
          "body": "@bkueng What is the value of renaming sensor_accel to sensor_accel_raw? Unless there is clear value on top of just naming I would like to avoid that change.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T07:39:50Z",
          "body": "It makes it more clear that it's the raw sensor data from the driver. Initially I planned to split up sensor_combined into several topics which would have gotten the name `sensor_accel` etc. However as sensor_combined is now really small, it's not necessary to split it, so the topic rename is not strictly necessary either.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-06T08:01:52Z",
          "body": "I don't think that the rename at this point adds significant clarity and I know that a lot of people are using the topics directly. So I think that's a change we shouldn't make at this point.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T08:18:49Z",
          "body": "Fine with me. I'll drop it when rebasing. Do you plan to merge it now?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-06T08:38:18Z",
          "body": "Yes, I think it makes sense to get these in.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T09:16:23Z",
          "body": "rebased & dropped sensor topics renaming\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T13:51:18Z",
          "body": "@julianoes I agree in both cases. I discussed this with @tumbili and he prefered the integral because the estimators use it. But when looking at the overall usage, most places need the value, not the integral. Personally I also prefer the values.\nPlus when thinking about the new logger, the value can be plotted directly.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-07-06T14:11:57Z",
          "body": "I like the changes overall but I would vote to change the sensor_combined struct and make the API as simple as possible for devs.\n\nTherefore, I'd publish the accel/gyro/mag values without integral plus timestamp. If an estimator really wants integrals, it should just multiply the values with delta_t. I think this would make it cleaner and also better performance-wise because it would lead to less divisions.\nI'm just not sold on the idea of integrals instead of intuitive values.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T14:18:24Z",
          "body": "just to be clear, you mean like this? sensor_combined.msg:\n\n```\nfloat32[3] gyro_rad\nfloat gyro_integral_dt # in seconds\n\nint32 accelerometer_timestamp_relative\nfloat32[3] accelerometer_m_s\nfloat accelerometer_integral_dt \n\nint32 magnetometer_timestamp_relative\nfloat32[3] magnetometer_ga  \n\nint32 baro_timestamp_relative\nfloat32 baro_alt_meter      \nfloat32 baro_temp_celcius\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-07-06T14:32:39Z",
          "body": "@bkueng yes that's what I would suggest.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-06T14:56:35Z",
          "body": "Looks sensible to me.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-06T17:04:41Z",
          "body": "ok if no one objects, I'll change this.\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2016-07-07T08:54:19Z",
          "body": "refactored to the above format\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-07T09:36:17Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-07-06T13:18:08Z",
          "body": "Having to add the division through dt everywhere seems painful. Of course, you've done it already, I'm just thinking of devs that will get confused. Are we sure we want to do this?\n",
          "path": "src/drivers/frsky_telemetry/frsky_data.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-07-06T13:23:46Z",
          "body": "I would argue this should be a `float32` in seconds. I'm not completely happy that you need to do `/ 1.e6f;` everywhere below.\n",
          "path": "msg/sensor_combined.msg",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR is primarily a refactor and optimization: it reduces message size, moves sensor voting into the sensors module, adds barometer voting, and changes timestamp representation. The discussion and description focus on API/format changes and memory/performance improvements rather than correcting an incorrect algorithm, conditional, or state transition; it does not specifically state or document a prior logic bug being fixed."
  },
  {
    "title": "Stable",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4895",
    "number": 4895,
    "created_at": "2016-06-24T07:13:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "idandan0924",
      "body": "",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "There is no PR description, code diff, comments, or reviews to indicate any bug fix; the title 'Stable' does not imply a specific logic correction. With no evidence of changed logic or references to incorrect behavior, I cannot determine that this PR fixes a logic error."
  },
  {
    "title": "Fw vtol no airspeed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4813",
    "number": 4813,
    "created_at": "2016-06-14T08:51:44Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-06-14T08:52:49Z",
          "body": "@sanderux I was looking at it and noticed that with this implementation we will not be blending controls during the transition. Might make sense to blend the controls based on time just like it's done for the backtransition.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-15T22:12:04Z",
          "body": "i'll get that in, do you think it's ok to base it on min trans time, or should i add a seperate param?\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T08:35:36Z",
          "body": "@sanderux I think min trans time is ok.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The comments indicate the current implementation fails to blend controls during the VTOL transition (an improper state/transition behavior), and participants discuss adding time-based blending (using min transition time) to correct it. This is symptomatic of a logic error (incorrect state transition/control mixing); however, the PR body/code is missing so I can't verify the exact changes — hence medium confidence."
  },
  {
    "title": "Implement throttle setting for MAV_CMD_DO_CHANGE_SPEED",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4790",
    "number": 4790,
    "created_at": "2016-06-09T23:19:56Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes https://github.com/PX4/Firmware/issues/4786\n\nThis implements the throttle value of the mission command \"Change speed\"\nAttaching this to the no-airspeed PR as it only has (serious) effect when disabling airspeed sensor\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-06-10T07:03:14Z",
          "body": "@tumbili Can you review? Looks good for me.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-06-10T15:58:39Z",
          "body": "Have you flown this outside @sanderux? I'm just curious how consistently you actually keep the desired throttle? If the commanded throttle isn't sufficient for the altitude setpoint it's going to be ignored anyway.\nhttps://github.com/PX4/Firmware/blob/master/src/lib/external_lgpl/tecs/tecs.cpp#L312\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-10T21:56:51Z",
          "body": "@dagar i havent flown it outside yet. it's true that tecs will balance the throttle with the altitude but there does seem to be a limit to that.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-06-21T08:23:43Z",
          "body": "@sanderux Will merge once flown\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T13:10:53Z",
          "body": "@LorenzMeier @sanderux @dagar Did a review and it looks good (did a minor comment on variable naming). So next thing here is a log from a flight test.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T14:04:36Z",
          "body": "@sanderux Personally I think this change will not change much. TECS will adjust its throttle integrator until it's back at the old desired value. You can verify this in SITL by the way.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-06-21T14:55:29Z",
          "body": "Right, it's the same as just changing FW_THR_CRUISE.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-21T19:24:23Z",
          "body": "@tumbili ready to go\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-21T19:31:00Z",
          "body": "@dagar applying this will only make sense when airspeed sensor is disabled. at that point tecs will disregard airspeed and only change throttle if required for altitude. This will enable vtol's with no airspeed sensor to decrease speed before backtransition or increase speed when climbing significantly. a typical mission would be:\n- vtol takeoff 20m\n- throttle to 80%\n- climb to 150m\n- throttle to 40%\n- cruise towards destination\n- descend to 20m\n- throttle to 20%\n- vtol_land \n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T20:59:58Z",
          "body": "Closing in favour of #4770\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T12:49:13Z",
          "body": "@sanderux Why is the argument called 'percent'? Aren't you passing a throttle value?\n",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-21T12:57:27Z",
          "body": "@tumbili no, QGC asks for a percentage. mavlink also specs this: https://pixhawk.ethz.ch/mavlink/#MAV_CMD_DO_CHANGE_SPEED\n\nFW_THR_CRUISE is also a percentage and tecs expects a percentage here\n",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T13:09:42Z",
          "body": "@sanderux Yeah, the mission item holds a throttle percentage but the function 'set_cruising_throttle' takes as argument a throttle value between 0 and 1.\n",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-21T13:11:31Z",
          "body": "Ok, shall i just call it throttle, or value then?\n",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-21T13:12:57Z",
          "body": "@sanderux throttle is good.\n",
          "path": "src/modules/navigator/navigator.h",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR implements the throttle parameter handling for MAV_CMD_DO_CHANGE_SPEED which was previously ignored, i.e. mission-specified throttle values were not applied — that is incorrect behavior (a logic bug). Review comments note TECS/airspeed interactions may limit runtime effect, but that does not negate that the command handling logic was incomplete and is being fixed."
  },
  {
    "title": "Comply with altitude for VTOL_LAND mission item",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4785",
    "number": 4785,
    "created_at": "2016-06-09T09:26:19Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "fixes https://github.com/PX4/Firmware/issues/4784\n",
      "issue_comments": [
        {
          "author": "sanderux",
          "created_at": "2016-06-30T20:59:16Z",
          "body": "@LorenzMeier AFAIK ready to merge\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-10T10:52:13Z",
          "body": "Doesn't look ready. It changes the logic entirely and it makes assumptions about magic values.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-07-10T10:55:15Z",
          "body": "The magic value is in QGC, it defaults the mission_item altitude to 0.\nBut you're right, it should check if it is different from 0, not just below zero.\nor do you think we should ignore the mission_item's altitude all together?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-07-23T23:18:53Z",
          "body": "@LorenzMeier i addressed your comment, can you review bearing in mind that QGC defaults the altitude parameter to 0 on a VTOL_LAND command?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-08-01T06:56:48Z",
          "body": "@LorenzMeier is this ready to merge?\n",
          "type": "issue_comment"
        },
        {
          "author": "PX4BuildBot",
          "created_at": "2016-10-19T19:53:03Z",
          "body": "Can one of the admins verify this patch?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-10-27T00:10:48Z",
          "body": "It seems like MAV_CMD_NAV_VTOL_LAND needs a separate transition altitude and landing altitude.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-10-27T09:04:00Z",
          "body": "@LorenzMeier can you review this again? (note that stable QGC sets altitude to 0 by default for VTOL_LAND)\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-11-08T03:46:52Z",
          "body": "@sanderux does it make sense now that VTOL_LAND specifies the landing coordinates (lat, lon, alt) just like regular LAND? The QGC default is 0 relative to home. Could we add an additional optional param to VTOL_LAND that also specifics the back transition altitude?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-11-08T08:27:57Z",
          "body": "I think we need a different discussion on the meaning of altitude in a land command as it does not seem to perform what i would expect.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-12-20T00:53:13Z",
          "body": "closing in favor of changes pending from https://github.com/PX4/Firmware/issues/5824",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-07-10T10:51:46Z",
          "body": "So if I fly at sea level an altitude request of 0 meters will be rejected? This doesn't look completely thought out.\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR attempts to change VTOL_LAND altitude handling but reviewers flagged it as changing the logic entirely and making unsafe assumptions about a 'magic' default value from QGC. The discussion shows unresolved design questions (separate transition vs landing altitude) and the branch was ultimately closed in favor of a different change, so this PR is not a confirmed fix for a logic error."
  },
  {
    "title": "Enable FW without airspeed sensor",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4770",
    "number": 4770,
    "created_at": "2016-06-08T09:33:06Z",
    "merged": true,
    "merged_at": "2016-06-23T07:28:06Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "Enables flying a fw / vtol without an airspeed sensor.\nThe new mode parameter enables 3 different modes:\n\n1) Use values from airspeed sensor\n2) Approximate airspeed with ground velocity (good if wind-still, e.g indoors with VICON )\n3) Declare airspeed invalid, controllers will assume trim speed (e.g. TECS or fw attitude controller)\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-06-08T11:14:33Z",
          "body": "Jenkins test this please!\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-08T12:51:35Z",
          "body": "Very nice. To enable VTOL transitions without ASPS we need to change the transition logic to consider this param. A new (or existing param) should be used to add a time constant (front transition time).\nAt the moment we have a VT_F_TRANS_DUR (front transition duration) param which in effect is the ramp-up time for the pusher motor. To avoid confusion i propose to rename this to VT_F_TRANS_RAMP and use VT_F_TRANS_TIME as the new constant.\n\nAlternatively we could rely on VT_TRANS_MIN_TM but this will have defaulted to low values by now.\n@tumbili ?\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-08T12:54:12Z",
          "body": "SITL flies very well on mode 2 (disable airspeed) (transition still looks at airspeed) but the FW flights holds well even at very low airspeeds. TECS does respond too slow to compensate for stalls when the throttle trim is too low but it nicely balances banking etc.\n",
          "type": "issue_comment"
        },
        {
          "author": "melisab",
          "created_at": "2016-06-08T16:21:26Z",
          "body": "So, in VTOL we need to use ground speed estimation to replace indicated_airspeed_m_s ? \n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-08T19:24:46Z",
          "body": "@melisab You certainly don't need to do this and if you have an airspeed sensor available I certainly don't recommend you to do this.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-08T21:09:22Z",
          "body": "@tumbili i added initial support for vtol transition based on minimum transition time. Works very nice in sitl. tested a few scenarios, no regression.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-08T21:41:50Z",
          "body": "![image](https://cloud.githubusercontent.com/assets/14801663/15911879/ed479cba-2dd1-11e6-871d-36c8bf01022c.png)\n\nNotes on flying VTOL without airspeed sensor:\n- Make sure your FW_THR_CRUISE is set to a sensible level.\n- Set the airspeed sensor circuit braker\n- Set VT_TRANS_MIN_TM higher (this is the time it will take to transition)\n- Set VT_F_TRANS_DUR lower (this is the time the pusher takes to ramp up, 1 second should be good)\n",
          "type": "issue_comment"
        },
        {
          "author": "melisab",
          "created_at": "2016-06-18T01:38:01Z",
          "body": "The problem with relying on ground speed is that when there is tailwind then there won't be enough lift to transition from MC to FW.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-18T01:43:06Z",
          "body": "@melisab relying on fixed throttle settings is not the same as relying on ground speed. this would however only work when the fixed throttle is significantly above stall speed.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-21T20:03:49Z",
          "body": "@tumbili time based blending is in\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-22T09:16:09Z",
          "body": "@sanderux This needs testing now. I'll do some basic tests in SITL.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-06-22T11:27:10Z",
          "body": "@sanderux Tested all three modes in SITL, works as expected.\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2016-06-22T11:46:16Z",
          "body": "@tumbili considering all these changes only have impact on disabled airspeed sensor i see no possibility for regression. I think it's safe to merge this but i'll leave that up to you. I will test fly but that might be a while.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-06-22T13:43:55Z",
          "body": "@tumbili The publish logic for EKF1 is missing, which is what planes are using still today.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes control logic to handle cases where an airspeed sensor is absent by adding three modes (use sensor, approximate from ground speed, or declare airspeed invalid and use trim). That directly fixes an incorrect/insufficient state-handling behavior where controllers and VTOL transition logic previously assumed a valid airspeed and could behave improperly; comments and SITL tests indicate the new time-based blending/transition changes address those logic shortcomings. (There are notes about remaining work such as EKF1 publish logic, so full correctness depends on those follow-ups.)"
  },
  {
    "title": "Added tracker to navigator to record the recent path.",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4726",
    "number": 4726,
    "created_at": "2016-06-03T12:23:06Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "samuelsadok",
      "body": "A tracker module for the navigator records the recently flown path. A new flight mode is introduced to enable flying back along this path (though it doesn't look smooth yet).\n",
      "issue_comments": [
        {
          "author": "PX4BuildBot",
          "created_at": "2016-10-19T19:53:06Z",
          "body": "Can one of the admins verify this patch?\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-10-19T23:04:13Z",
          "body": "@samuelsadok can you rebase?\n",
          "type": "issue_comment"
        },
        {
          "author": "samuelsadok",
          "created_at": "2016-10-23T13:57:25Z",
          "body": "This pull request is now superseded by #5735. I therefore recommend to focus on that new request and suggest we close this one.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces a new tracker feature and a flight mode to replay a recent path — it describes new functionality rather than correcting incorrect behavior. There is no indication in the title, description, or comments that it fixes an existing logic bug; additionally the author notes the PR is superseded by #5735, suggesting this one is not a bugfix."
  },
  {
    "title": "more follow target updates",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4649",
    "number": 4649,
    "created_at": "2016-05-26T18:47:23Z",
    "merged": true,
    "merged_at": "2016-05-27T20:28:31Z",
    "state": "closed",
    "conversation": {
      "author": "catch-twenty-two",
      "body": "Testing completed ready to merge.  Refactor of follow target module for readability and complexity.  Fixed yaw smoothing.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-27T20:28:35Z",
          "body": "Rebased and applied, thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly states it 'Fixed yaw smoothing' in the follow-target module and includes a refactor and testing prior to merge; this indicates an algorithmic/behavioral bug (incorrect yaw smoothing logic) was corrected rather than a mere style change."
  },
  {
    "title": "stop spamming console with navigator timeout warnings",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4583",
    "number": 4583,
    "created_at": "2016-05-19T20:02:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "kd0aij",
      "body": "report timeout only once per gps loss (added missing line to clear global_pos_available_once, which isn't referenced anywhere else)\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T20:10:43Z",
          "body": "neat!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T20:18:19Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect state handling that caused repeated timeout warnings by adding a missing line to clear the global_pos_available_once flag. This prevents spamming the console and ensures the timeout is reported only once per GPS loss, fixing the logic that tracked/report GPS availability."
  },
  {
    "title": "adjust stack sizes and cleanup ignored warnings",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4581",
    "number": 4581,
    "created_at": "2016-05-19T19:09:46Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "I enabled   CONFIG_ARMV7M_STACKCHECK and adjusted some of the insufficient stack sizes I saw. There are still more modules to check and I still did get the system fully running. Once we have a hardware test harness I think we should have a build with stackcheck enabled. Alternatively if the overhead is acceptable we could keep it enabled on px4fmu-v4.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:43:19Z",
          "body": "Thanks, this is awesome!\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:45:20Z",
          "body": "The main reason to not have it on by default is that it draws a ton of CPU power. But we should indeed have proper test runs. The fact that you adjusted so much clearly shows that we have an unresolved process issue here.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:49:58Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-19T19:56:16Z",
          "body": "The NuttX wiki claims 30% to 35% additional CPU utilization which is huge, but maybe better than the alternative?\n\nI should emphasize this was only with a pixhawk configured for fixed wing and I didn't even get the system fully booted. I'm guessing there's going to be a lot more.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T20:09:06Z",
          "body": "@dagar The other thing to keep in mind is that the instrumentation itself draws memory. So this could be all a false alarm. The reported usage of the high watermarks in top is pretty accurate.\n",
          "type": "issue_comment"
        },
        {
          "author": "davids5",
          "created_at": "2016-05-19T20:34:42Z",
          "body": "@LorenzMeier and @dagar \nI may need revisit the headroom on master....\nThe water mark is large. If we have plenty or RAM then the \"larger than needed headroom\" is moot. If not, the values gleaned from `top` will be a good indicator of penetration just not large chunk overflow.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-19T23:10:44Z",
          "body": "Alright we won't panic over these potential stack issues, but for peace of mind let's work towards a build that runs cleanly with stack check enabled. I've added the idea to the testing wishlist #4532.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:42:14Z",
          "body": "That's a steep increase - does the start handler really need more stack? Or did you intent to increase the main app stack? Which would be in task_spawn, NOT here.\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:47:27Z",
          "body": "Disregard that - I'm pretty sure its valid and intended.\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-19T19:50:28Z",
          "body": "This shouldn't have made it in. When stackcheck is enabled sensors is somehow causing a hard fault when the main exits. I tried throwing a ton of stack at it.\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T19:58:50Z",
          "body": "Are you sure its causing a hard fault or rather entering the stack check trap?\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-19T20:01:37Z",
          "body": "I've reset it for now to 1200. But I would appreciate your feedback.\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-19T23:15:02Z",
          "body": "It was a hard fault in up_switchcontext.S according to the PC.\n",
          "path": "src/modules/sensors/CMakeLists.txt",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR enables stack checking and adjusts insufficient task stack sizes, which addresses a boundary-condition logic error (stack overflow/insufficient stack allocation) that can cause incorrect runtime behavior. However the author notes the system was not fully booted and more modules likely need adjustment, so the fix is partial/incomplete — hence medium confidence."
  },
  {
    "title": "orb macros: cleanup some unused code",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4576",
    "number": 4576,
    "created_at": "2016-05-19T08:17:18Z",
    "merged": true,
    "merged_at": "2016-05-19T09:08:37Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title indicates cleanup of unused code rather than a bug fix and there is no description, comments, or reviews mentioning incorrect behavior, fixes, or changed logic. Removing unused code is typically refactoring and not a correction of program logic; with no evidence provided that it resolves incorrect behavior, it's unlikely this addresses a logic error."
  },
  {
    "title": "Param metadata",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4540",
    "number": 4540,
    "created_at": "2016-05-14T00:32:29Z",
    "merged": true,
    "merged_at": "2016-05-14T09:20:28Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Param metadata cleanup as discussed here. https://github.com/mavlink/qgroundcontrol/issues/3012#issuecomment-219168089\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-14T09:14:53Z",
          "body": "Thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title and description indicate a \"Param metadata cleanup\" and reference a discussion, but they do not mention fixing incorrect behavior or a specific bug. There are no review comments or details showing changed logic, boundary conditions, or state transitions. With the limited information provided, this appears to be maintenance/refactor work rather than a confirmed logic bug fix."
  },
  {
    "title": "Bring SITL back to life",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4533",
    "number": 4533,
    "created_at": "2016-05-13T16:38:30Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "julianoes",
      "body": "Reverted the evil commit, works again.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T18:46:13Z",
          "body": "I'll try to fix it proper. I have flown dozens of times in jMAVSim without any regression - can you explain the steps to repro?\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T18:48:44Z",
          "body": "```\ngit checkout master\ngit submodule update\nmake clean\nmake posix gazebo\n```\n\nThen wait for home, and do `commander takeoff` and it slides along, flips and the estimator goes towards Rapperswil. :smiley: \n\nAnd for jMAVSim, the same, it just doesn't crash as bad but it kinda slides along.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T18:50:08Z",
          "body": "Can you get me a screenshot of the Accel Z measurements of your fixed state? I'd like to see how they look when its idle on the ground.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T18:54:37Z",
          "body": "![terrible_accel](https://cloud.githubusercontent.com/assets/1419688/15258621/e2477eb4-194c-11e6-9ed2-05ac0de5641e.png)\nYer that looks pretty terrible.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T18:56:30Z",
          "body": "That would explain the bad flight performance with lots of slow oscillations in gazebo but that's another issue.\n\nThis is a general takeoff issue that affects definitely both jMAVSim and gazebo.\n\nSome setpoint is not set correctly, because it does the takeoff jump but then just slides along without proper setpoints.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T19:38:58Z",
          "body": "What are the steps with jMAVsim to repro?\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T19:47:21Z",
          "body": "Same thing.\n\n```\ngit checkout master\ngit submodule update\nmake clean\nmake posix jmavsim\n```\n\n```\ncommander takeoff\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T19:51:23Z",
          "body": "Got it. This must actually be much more recent than the commit you bisected. Because I tested that commit that way.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T20:01:58Z",
          "body": "Well I did a bisect and that's what I got.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T20:03:58Z",
          "body": "I was inaccurate. I did fire the takeoff command via QGC, not shell. And it turns out the shell version did not stick to the API. I just fixed that and now things behave.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T20:06:26Z",
          "body": "I also replaced EKF2 with LPE in SITL. You should find your workflow to be back to bearable. Still looking into speeding up boot time.\n",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-05-13T20:09:43Z",
          "body": "Aha, nice catch!\n\nThanks.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR reverts a recent commit that broke SITL takeoff behavior — setpoints were not being applied correctly (causing sliding, estimator drift and bad accel readings). Discussion shows the revert restored correct behavior and the issue was a behavioral/API mismatch rather than a syntax/style problem, so this addresses a logic error."
  },
  {
    "title": "Navigator: Only run FOH logic when in mission mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4494",
    "number": 4494,
    "created_at": "2016-05-10T08:14:16Z",
    "merged": true,
    "merged_at": "2016-05-10T11:59:25Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@tumbili This should fix #4491. Please test in SITL and real flights.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-10T09:18:58Z",
          "body": "Jenkins test this please\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description indicate a change to restrict FOH logic to mission mode only, which addresses incorrect behavior when that logic was previously executed in other modes (referencing issue #4491). That is a change in program behavior/state handling (a logic fix). Confidence is medium because no code diff is provided, but the intent clearly targets an incorrect conditional/state transition."
  },
  {
    "title": "WIP: Pr topic att sp cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4478",
    "number": 4478,
    "created_at": "2016-05-07T12:02:56Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2016-05-07T12:04:35Z",
          "body": "@birchera This is the vehicle attitude setpoint cleanup WIP. For now it compiles but I will go through it and implement functions in the matrix lib which can be used all over the code.\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2016-07-20T13:23:36Z",
          "body": "Replaced by #5105 \n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "There is no evidence in the title, body, or comments that this PR fixes a specific incorrect behavior — it is labeled a WIP cleanup for attitude setpoints and the author notes it merely compiles and will add matrix functions. The PR was also replaced by another (#5105), and no bug, failing behavior, or corrected logic is described, so it does not appear to address a logic error."
  },
  {
    "title": "Param metadata",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4472",
    "number": 4472,
    "created_at": "2016-05-06T22:23:51Z",
    "merged": true,
    "merged_at": "2016-05-11T16:47:26Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This mainly adds increment and decimal to fixed wing params.\n\nOne thing to note is that increment and decimal for `@unit norm` (0-1.0) is somewhat confusing. Those actually apply to the QGC formatted percent (0-100).\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-07T09:06:14Z",
          "body": "Can you fix the decimal and increment to relate to the norm field, not to the percentage? The improper scaling should be fixed on the QGC side instead.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-08T00:49:56Z",
          "body": "Yes that sounds like the better solution. I'll take a look.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-08T09:30:06Z",
          "body": "@dagar Here is the QGC support for that (screenshot included against meta data from master):\nhttps://github.com/mavlink/qgroundcontrol/pull/3346\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-11T07:46:51Z",
          "body": "@dagar Did you get a chance to rework the patch here to have the proper units? The QGC change is in and released, so all that's missing is really getting this PR in.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2016-05-11T16:36:44Z",
          "body": "I fixed the @norm usage. QGC params already looked much better with just your change.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-11T16:49:07Z",
          "body": "Thanks merged!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR corrects a scaling/metadata logic error: increment and decimal were being applied relative to a percentage (0–100) instead of the normalized unit (0–1), causing incorrect displayed/stepped values. The author updated the @norm usage so the metadata now relates to the normalized range (with the QGC side handling percent formatting), fixing the incorrect behavior."
  },
  {
    "title": "Auto take-off corner case: Reset work item type when landed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4420",
    "number": 4420,
    "created_at": "2016-05-03T12:10:25Z",
    "merged": true,
    "merged_at": "2016-05-03T12:13:17Z",
    "state": "closed",
    "conversation": {
      "author": "mswingtra",
      "body": "If the auto mission is paused/aborted during take-off and we land in manual mode, then work_item_type needs to be reset unless we re-power. Otherwise, it is set to WORK_ITEM_TYPE_TAKEOFF, and take-off waypoint is treated as normal position waypoint next time mission is launched. Thus, controller does not use take-off logic but position control logic. \n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-03T12:13:30Z",
          "body": "Thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error: a stale work_item_type (left as TAKEOFF) after an aborted/paused auto takeoff leads the controller to treat the takeoff waypoint as a normal position waypoint on the next mission start. Resetting the work item type on landing corrects the improper state transition/boundary condition so the takeoff logic is applied correctly next time."
  },
  {
    "title": "FW add mavlink NAV_CONTROLLER_OUTPUT",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4363",
    "number": 4363,
    "created_at": "2016-04-25T18:15:08Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This implements mavlink NAV_CONTROLLER_OUTPUT to show altitude and airspeed error for fixed wing.\nhttp://mavlink.org/messages/common#NAV_CONTROLLER_OUTPUT\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-26T07:48:12Z",
          "body": "Looking good. Will merge once we have 1.3.0 out.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-13T10:56:26Z",
          "body": "Rebased and applied.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR implements a new MAVLink message (NAV_CONTROLLER_OUTPUT) to report altitude and airspeed error for fixed-wing vehicles. The description and comments indicate a feature addition rather than a correction of incorrect program logic, and there is no mention of fixing incorrect behavior, state transitions, or boundary conditions."
  },
  {
    "title": "Support for reposition MAVLink command",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4347",
    "number": 4347,
    "created_at": "2016-04-23T18:13:57Z",
    "merged": true,
    "merged_at": "2016-04-24T14:54:11Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@dagar @DonLakeFlyer This implements the reposition command. Now I need QGC support / implementing it in order to finish the testing. Pretty close though and will go into 1.3.0.\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR message indicates it implements support for a new 'reposition' MAVLink command (a feature addition) and requests QGC support for testing. There is no mention of fixing incorrect behavior, a bug report, or correcting prior logic, nor are there comments/reviews indicating a logic flaw was addressed, so this appears to be a feature implementation rather than a logic-error fix."
  },
  {
    "title": "Better granularity for flight failsafe modes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/4344",
    "number": 4344,
    "created_at": "2016-04-23T14:54:59Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@kd0aij Testing this with props off would be great. Main documentation:\n\n``` C++\n/**\n * Set data link loss failsafe mode\n *\n * The data link loss failsafe will only be entered after a timeout,\n * set by COM_RC_LOSS_T in seconds.\n *\n * @value 0 Disabled\n * @value 1 Loiter\n * @value 2 Return to Land\n * @value 3 Land at current position\n * @value 4 Outback Challenge (OBC) rules\n *\n * @group Mission\n */\nPARAM_DEFINE_INT32(NAV_DLL_ACT, 0);\n\n/**\n * Set RC loss failsafe mode\n *\n * The RC loss failsafe will only be entered after a timeout,\n * set by COM_RC_LOSS_T in seconds. If the timeout value is smaller than\n * zero it will never be entered. If RC input checks have been disabled\n * by setting the COM_RC_IN_MODE param it will also not be triggered.\n *\n * @value 0 Disabled\n * @value 1 Loiter\n * @value 2 Return to Land\n * @value 3 Land at current position\n * @value 4 Outback Challenge (OBC) rules\n *\n * @group Mission\n */\nPARAM_DEFINE_INT32(NAV_RCL_ACT, 0);\n```\n\n@DonLakeFlyer The comments above should also be enough to re-do the safety screen. I've broken the param system with this change, I need to think how we address that.\n",
      "issue_comments": [
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T15:09:51Z",
          "body": "For testing this, can \"datalink\" be wifi connection of QGC to pixracer? \n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-23T15:10:30Z",
          "body": "Yes, that should trigger it.\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T15:56:22Z",
          "body": "first test of RC loss with option 3 gave no feedback on console or QGC and motor speed did not change\n\nalso getting this on the console:\n\n```\nWARN  Failed to open MAVLink log: /fs/microsd/msgs_2016_04_23_15_53_43.txt@� errno=22\nWARN  Failed to open MAVLink log: /fs/microsd/msgs_2016_04_23_15_53_48.txt@� errno=22\nWARN  Failed to open MAVLink log: /fs/microsd/msgs_2016_04_23_15_53_48.txt@� errno=22\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-23T16:15:03Z",
          "body": "@kd0aij If you get these you need to wipe your SD card. File system fail.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-23T16:15:58Z",
          "body": "Its possible that the motor speed is not changing if the system believes it already is landed. But I need to check.\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:20:20Z",
          "body": "is there a console or mavlink message indicating failsafe is engaged?\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:27:51Z",
          "body": "refetched, cleaned and reflashed. RC loss results in QGC \"Landing\" mode and much later \"failsafe mode on\". No messages on console. Motors sped up and stayed at that speed for several minutes. What is supposed to happen?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-04-23T16:28:59Z",
          "body": "That sounds about right. It would have landed on-spot.\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:29:47Z",
          "body": "motors never stop?\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:31:31Z",
          "body": "battery voltage reading in QGC is erratic... critical battery warning with FrSky telemetry showing 11.1V\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:32:35Z",
          "body": "I have an ACSP5 on this PixRacer\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T16:37:33Z",
          "body": "Why isn't there an RC failsafe option to kill the motors? Is that the OBC mode?\n@LorenzMeier Does the copter disarm after \"land at current position\" when RC is lost?\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-04-23T17:53:07Z",
          "body": "Killing the wifi link while armed in manual mode didn't appear to do anything, but I guess there's intentionally no feedback on the console?\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-05-02T23:05:08Z",
          "body": "@LorenzMeier I see you merged this with open questions from me... Were there other test results which were more definitive? I tried this again today with the copter tied down, but the \"land at current position\" motor behavior seemed wrong, and it went to high throttle when I turned the TX back on, so I don't trust that option. So as far as I can tell, there's no safe option available to prevent a fly-away on RC loss.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-03T07:44:18Z",
          "body": "You will need to try this on a tether, rather than tied down. If its close to home it will land straight, if it is not close to home it will RTL.\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-05-03T13:23:06Z",
          "body": "is a GPS lock required?\n\nOn Tue, May 3, 2016 at 1:44 AM Lorenz Meier notifications@github.com\nwrote:\n\n> You will need to try this on a tether, rather than tied down. If its close\n> to home it will land straight, if it is not close to home it will RTL.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/PX4/Firmware/pull/4344#issuecomment-216460164\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2016-05-30T14:37:58Z",
          "body": "apparently this needs more testing, but I would need more explanation of expected results to be able to test it safely: https://github.com/PX4/Firmware/issues/4674\n",
          "type": "issue_comment"
        },
        {
          "author": "xn365",
          "created_at": "2016-05-31T13:47:01Z",
          "body": "https://github.com/PX4/Firmware/blob/master/src/modules/navigator/navigator_main.cpp#L344\nI think navigator will not working When we don't have gps.\nCould AUTOLAND or LANDGPSFAIL mode run in this case?\nhttps://github.com/PX4/Firmware/blob/master/src/modules/commander/state_machine_helper.cpp#L615\nWe will chang to DESCEND mode in the case of  RC lost and have no GPS.\nBut this line will never be reached when we have no GPS :https://github.com/PX4/Firmware/blob/master/src/modules/navigator/navigator_main.cpp#L566\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces finer-grained failsafe mode parameters rather than explicitly fixing a logic bug. The author even notes the param system was broken by the change and test comments report unexpected/incorrect behavior (motors staying at high throttle, missing console messages, GPS-dependent logic gaps), so the change appears to introduce or leave unresolved logic issues rather than correcting one."
  },
  {
    "title": "Navigator: some loiter refactoring and fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16646",
    "number": 16646,
    "created_at": "2021-01-25T18:54:31Z",
    "merged": true,
    "merged_at": "2021-01-29T18:37:01Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "**Describe problem solved by this pull request**\r\n- \"unable to reach heading within timeout\" error when loitering to altitude\r\n- \"hacky\" loiter position acceptance (1.2*loiter_radius)\r\n- MAV_CMD_NAV_LOITER_TIME: param2 (heading required) not considered\r\n- exit via tangent (xtrack) broken for NAV_CMD_LOITER_TIME_LIMIT \r\n\r\n**Describe your solution**\r\n- fix \"unable to reach heading\" bug when doing loiter to alt with heading wait \r\n- for loiter acceptance in fixed-wing, it is cleaner to use (loiter radius + L1 acceptance distance) to decide on acceptance, instead of the magic 1.2 factor in front of the loiter radius  \r\n- add ability of \"heading wait\" for NAV_CMD_LOITER_TIME_LIMIT (possible as mavlink/mavlink#1383 was merged)\r\n- enable exit via tangent (xtrack) for both NAV_CMD_LOITER_TIME_LIMIT and NAV_CMD_LOITER_TO_ALT, but let exit back to center connection as default\r\n\r\n\r\nGeneral: \r\n- unify logic inside Navigator for NAV_CMD_LOITER_TIME_LIMIT and NAV_CMD_LOITER_TO_ALT\r\n--> reach position --> start loitering --> reach altitude --> start timer (if applicable) --> reach exit heading (if applicable) --> declare mission item reached.\r\n\r\n- bit of clean up in Navigator, as I find the current structure more complex than needed. E.g. the return of get_acceptance_radius() should either be what's set in the NAV_ACC_RAD for MC, or the L1 distance for FW, as simple as that (unless I missed something?).\r\n\r\n**Test data / coverage**\r\nSITL and flight tested.\r\n\r\n\r\n**Additional context**\r\n\r\nSome screenshots from a SITL mission (standard VTOL) with a Loiter_time with heading wait (3,4), where 4 is with tangential exit, normal waypoints (with big altitude diff between 6 and 7), and a Loiter_Altitude with heading wait and tangential exit path (9). \r\n\r\nold:\r\n![image](https://user-images.githubusercontent.com/26798987/105750226-c5731300-5f44-11eb-90d6-ee52e675d256.png)\r\n\r\n\r\nnew:\r\n![image](https://user-images.githubusercontent.com/26798987/105751030-c48eb100-5f45-11eb-9ace-976df64ab0b7.png)\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2021-01-25T20:38:20Z",
          "body": "This all looks correct, but as per usual with navigator there are a few areas where it's hard to be 100% sure there aren't unintended repercussions. I'll give it another detailed pass and let's try to identify any additional areas of concern that might warrant testing on other vehicle types or less common situations.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2021-01-28T06:52:06Z",
          "body": "@sfuhrer Are you sure that removing this logic does not have any side effects?",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-28T09:11:58Z",
          "body": "@RomanBapst I guess you mainly refer to  `(pos_ctrl_status.timestamp > _pos_sp_triplet.timestamp)`? Do you see a logical reason where this could actually be false?\r\nAt least in SITL it wasn't yet a problem, but this specific part wasn't yet flight tested.",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-28T14:02:35Z",
          "body": "Should this be the parameter (MIS_YAW_ERROR)?",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-28T14:06:04Z",
          "body": "It might be safer if you flip it around so that for FW (and rover) you're using pos_ctrl_status.acceptance_radius, otherwise fallback to using the default acceptance radius.\r\n\r\nI would also keep a minimum pos_ctrl_status validity check, maybe just pos_ctrl_status.timestamp != 0 and finite.",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-29T10:17:08Z",
          "body": "True, think that'd be more consistent. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-29T10:50:36Z",
          "body": "@dagar how about it now? a7a5303bb6a93850c2c373575f5587e15c547dbb",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-29T10:50:44Z",
          "body": "addressed in a7a5303bb6a93850c2c373575f5587e15c547dbb",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "@sfuhrer I had a look at this in detail and the changes look ok.\r\nIt's of course always hard to judge the effects in navigator but I definitely find this cleaner than before.",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes multiple incorrect behaviors and state-transition issues in Navigator (wrong heading-timeout handling when loitering to altitude, incorrect loiter acceptance radius, ignored heading param for MAV_CMD_NAV_LOITER_TIME, and broken tangential exit logic). The author unifies the loiter state sequence (position → loiter → altitude → timer → heading → reached), cleans up acceptance-radius logic, and the changes are SITL/flight-tested with positive reviewer feedback, supporting that these are logic bug fixes rather than style or incidental changes."
  },
  {
    "title": "[WIP] Use gps data with increased precision",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16645",
    "number": 16645,
    "created_at": "2021-01-25T18:31:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "lukegluke",
      "body": "double for lat and lon in degrees, float for alt in meters.\r\n\r\n1. 1e7 deg precision for lat and long can be not enough in several specific cases (for example RTK)\r\n2. In most calculations (especially in ekf) px4 internally already uses lat, lon as doubles converting them on input and output every time back and forward from deg/1e-7deg (and m/mm for alt).\r\n3. 1e7 deg precision is still used as output in legacy things, like current gps mavlink messages.\r\n\r\ntodo: gps drives need to be updated\r\n\r\nAlso dgps_age field added to sensor_gps.msg and vehicle_gps_position.msg  (and filled for MavlinkStreamGPS2Raw). It should be parsed it gps drivers where available. But probably this change should go to separate PR.",
      "issue_comments": [
        {
          "author": "lukegluke",
          "created_at": "2021-01-25T18:32:20Z",
          "body": "Hi @dagar ,\r\n\r\nI made this patch as I mentioned in https://github.com/PX4/PX4-ECL/issues/951#issuecomment-757468006\r\n\r\nIn our project we use only one modified gps nmea driver and have tested only ekf core, we don't use many modules/drivers and don't fly, so in PR I modified several files only theoretical without testing, just by searching strings like: gps.lat, gps.alt, 1.0e7, 1.e7, 1e7, 1.0e-7, 1.e-7, 1e-7. I could easily missed something, especially regarding altitude. It is definitely needs accurately checking and testing.\r\n\r\nThis is the reference point for you. We don't use px4 boards. **I can't maintain and test this PR further**. Please free to edit, move, close this as you wish. Hopes it may help you somehow a little.\r\nThanks for all you work.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-25T20:06:55Z",
          "body": "Thanks @lukegluke, it wasn't clear to me there's any readily available equipment where int32 is limiting.",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2021-02-01T18:16:59Z",
          "body": "@lukegluke could you kindly give us an update on the status of this PR? it looks like it's failing on CI and needs a rebase.",
          "type": "issue_comment"
        },
        {
          "author": "lukegluke",
          "created_at": "2021-02-05T16:56:42Z",
          "body": "@mrpollo sorry for the late reply. As I mentioned this is the kind of aid for Daniel if he is going to increased gps data precision someday. I can't maintain and test this PR, so I'm closing it to not disturb you anyway.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR is an untested WIP that changes data types to increase GPS precision (lat/lon to double, alt to float) and adds dgps_age. That is an accuracy/precision enhancement rather than a fix for a specific incorrect program logic; the author closed it and noted it was not tested, so it does not demonstrably correct an existing logic bug or incorrect state transition."
  },
  {
    "title": "increase vehicle command queue depth and updates modules to consume all available queued commands",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16635",
    "number": 16635,
    "created_at": "2021-01-24T18:44:53Z",
    "merged": true,
    "merged_at": "2021-01-26T17:00:19Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This is to prevent the possible loss of vehicle_commands. At the moment it's likely only problematic in the case of high rate vehicle_commands from things like vmount, but better safe than sorry.\r\n\r\n - fixes https://github.com/PX4/PX4-Autopilot/issues/16630",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR addresses incorrect program behavior where vehicle_commands could be lost due to too-small queue depth and consumers not draining all queued commands. Increasing the queue depth and making modules consume all available commands corrects that flawed data flow/state management and prevents unintended loss of commands."
  },
  {
    "title": "RTL: VTOL: do the land delay loitering (RTL_LAND_DELAY) in fixed-wing flight",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16582",
    "number": 16582,
    "created_at": "2021-01-18T17:24:19Z",
    "merged": true,
    "merged_at": "2021-01-29T12:46:34Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "\r\n**Describe problem solved by this pull request**\r\nhttps://github.com/PX4/PX4-Autopilot/issues/16500 --> for some VTOL applications it is desired if the land delay loitering is done while still in fixed-wing mode, instead of hover. I see these use-cases:\r\n- if there should be a delay before landing, such that pilot could interfere (better do that in FW, as much more energy efficient)\r\n- to estimate wind speed before triggering the backtransition, such that the distance to home can be optimized\r\n\r\n**Describe your solution**\r\nChange RTL state order \r\nold:   (CLIMB-->RETURN-->DESCEND-->TRANSITION-->MOVE_TO_LAND_HOVER-->LOITER-->LAND)\r\nnew: (CLIMB-->RETURN-->DESCEND-->LOITER-->TRANSITION-->MOVE_TO_LAND_HOVER-->LAND)\r\n\r\n**Describe possible alternatives**\r\nSome logic with NAV_FORCE_VT --> e.g. if NAV_FORCE_VT is set to false, then do not execute transition but directly go to loiter and then land in FW. Sounds dangerous to me, would have the advantage that if a user wants to have the loitering done in hover also for a VTOL, that could be set up.\r\n\r\n**Test data / coverage**\r\nSITL tested. \r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "MartinStokelj",
          "created_at": "2021-01-19T07:09:01Z",
          "body": "@sfuhrer If I understand this right it says \"go to loiter and then land in FW\". \r\nWe don't want him to land and also not land him as FW, this would damage the drone.\r\nIf param RTL_LAND_DELAY is set to -1 he should loiter as FW above WP and not auto land or auto transition to MC...",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-19T08:32:52Z",
          "body": "> it says \"go to loiter and then land in FW\". \r\n\r\nWhere does it say that? That's certainly not the idea, but that after the loiter in FW it transitions and lands in hover.",
          "type": "issue_comment"
        },
        {
          "author": "MartinStokelj",
          "created_at": "2021-01-19T10:45:13Z",
          "body": "sorry I misunderstood, it looks ok now with\r\nRTL_LAND_DELAY -1\r\nNAV_FORCE_VT 0\r\nhttps://review.px4.io/plot_app?log=beb86924-b2a7-48f3-8e35-c1723e8b519d\r\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-01-25T05:39:57Z",
          "body": "@sfuhrer SITL tests are failing. Need to have a closer look if related. Otherwise, I agree with these changes.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the RTL state transition order so that the RTL_LAND_DELAY loitering occurs while still in fixed-wing mode (loiter before transition) rather than after transition to hover. This corrects incorrect behavior for VTOLs where the loiter/hold was previously done in hover (inefficient or undesirable) and aligns execution with the intended use-cases; however, some SITL tests reported failures so there's moderate uncertainty about side effects."
  },
  {
    "title": "RTL_LAND_DELAY default to 0 and MIS_DIST_WPS to 5km for VTOL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16550",
    "number": 16550,
    "created_at": "2021-01-13T19:03:10Z",
    "merged": true,
    "merged_at": "2021-01-17T11:05:31Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "**Describe problem solved by this pull request**\r\n- find it annoying that RTL_LAND_DELAY is by default at -1 (do not land but loiter), even though for most applications that's not the default (only for FW usually). For FW, RTL_LAND_DELAY is already set to -1 in the defaults.\r\n- the max distance between waypoints is too low with 900m for VTOLs\r\n\r\n\r\n",
      "issue_comments": [
        {
          "author": "Antiheavy",
          "created_at": "2021-01-13T23:50:41Z",
          "body": "> the max distance between waypoints is too low with 900m for VTOLs\r\n\r\nhow much real world testing do you have on 5000 meter default for this?  I've had conversations with @priseborough in the past about concerns of gyro stability and EKF covariance tracking over long periods of straight and level flight.  There is a lack of \"system observability\" during straight and level flight which allows the gyros to wander without good correction from the accelerometers and other sensors measuring turns.  I know from experience with other systems  (non-px4, non-pixhawk) that this is a well understood concern in the world of kalman filtering.  So, this distance limit is driven as much by the quality of your hardware system (gryos usually) as it is the quality of your EKF and flight software.\r\n\r\nHaving said that we have slowly been increasing MIS_DIST_WPS on our fixed wing aircraft over the years, we make incremental and conservative increase a few hundred meters at a time, then spend months of testing, then eventually release to our users, then we increase again, test, release, repeat.  We are currently at 2500 meters for MIS_DIST_WPS using a FMUv4 based autopilot hardware.  No issues with 1000's of flights.\r\n\r\nIf 5000 meters is super well tested and understood then hooray!",
          "type": "issue_comment"
        },
        {
          "author": "mcsauder",
          "created_at": "2021-01-14T01:27:50Z",
          "body": "Hi @Antiheavy !  I flew a 4kg quad 12km straight-line from takeoff on v1.11.2 a few weeks ago on an exceptionally low wind day, (lack of system disturbance), and I have a handful of hexas that have flown straight line range test flights in the past two months beyond 5km.  From a limited number of flights that I have observed this change seems fairly reasonable to me, but I don't doubt the rationale behind your comment in the least.",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-14T14:39:03Z",
          "body": "@Antiheavy thanks for the input! I actually wasn't aware of this restriction, and seldom have flown with more than 1km between WP. I'll make sure to include that in our testing more regularly. When was the last time you experienced issues on a PX4 based vehicle, and with which release was that?\r\n@priseborough how do you assess the current EKF capabilities, should we be concerned? ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2021-01-17T16:15:08Z",
          "body": ">  I flew a 4kg quad 12km straight-line from takeoff on v1.11.2 a few weeks ago on an exceptionally low wind day, (lack of system disturbance), and I have a handful of hexas that have flown straight line range test flights in the past two months beyond 5km.\r\n\r\n@mcsauder are you able to share what gyro parts were running on your flight controller for these flights?  Just curious.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR changes default parameter values (RTL_LAND_DELAY and MIS_DIST_WPS) rather than correcting incorrect program logic or state transitions. It adjusts configuration/behavior defaults (user-facing tuning) rather than fixing an algorithmic or conditional bug in the code; therefore it is not a logic-error fix."
  },
  {
    "title": "Navigator: VTOL transition command: make transitions smoother",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16499",
    "number": 16499,
    "created_at": "2021-01-06T14:05:26Z",
    "merged": true,
    "merged_at": "2021-05-03T06:40:54Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "**Describe problem solved by this pull request**\r\nThe transition command waypoints, NAV_CMD_DO_VTOL_TRANSITION, are attached to the previous waypoint that contains a location (e.g. normal waypoint). It then triggers a transition as soon as this waypoint is reached, which happens when the vehicle is within L1 distance to it. Is the L1 distance smaller then the needed space for the transition, then the vehicle overshoots. The current logic is that for a transition waypoint, the waypoint has to be reached again in the new VTOL mode (e.g. in hover after a backtransition). Thus, if it overshoots, it turns around to accept it, and only then proceeds to the next waypoint.\r\nI don't really get in which case this would be desired.\r\n\r\nThis can lead to ugly situations like this:\r\n![VTOLtransitionmaster](https://user-images.githubusercontent.com/26798987/103775614-98f76580-502e-11eb-95ef-b0b14f675bba.png)\r\n\r\n\r\n**Describe your solution**\r\nDo not make it accept the waypoint again in the new VTOL mode, but directly proceed to the next:\r\n![vtoltransition_withfixes](https://user-images.githubusercontent.com/26798987/103775628-9e54b000-502e-11eb-860b-d1f55a596d98.png)\r\nThat means that if you don't have the previous, current and next waypoint in one line, it will make a turn while transitioning. I don't think this should be a big issue, and what we on top could do is limiting the max roll angle during the transition.\r\n\r\n**Describe possible alternatives**\r\n\r\n\r\n**Test data / coverage**\r\nBasic SITL testing.\r\n\r\n**Additional context**\r\nhttps://github.com/PX4/PX4-Autopilot/commit/c31d8ce2b6f04c30b2fde6af08040c074e70e762 looks like it only works with this stuff removed. @dagar Am I missing something or could we safely remove it? I don't really get what it was added for.\r\n\r\n",
      "issue_comments": [
        {
          "author": "sfuhrer",
          "created_at": "2021-01-06T14:08:12Z",
          "body": "@ThomasRigi what do you think?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-06T15:10:06Z",
          "body": "> c31d8ce looks like it only works with this stuff removed. @dagar Am I missing something or could we safely remove it? I don't really get what it was added for.\r\n\r\nIt certainly looks safe to remove, but it's sometimes hard to tell in here. Let's do a little software archaeology to be sure.",
          "type": "issue_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-01-06T17:30:46Z",
          "body": "Did some SITL tests, looks good. \r\n\r\n> c31d8ce looks like it only works with this stuff removed. @dagar Am I missing something or could we safely remove it? I don't really get what it was added for.\r\n\r\nSame as you, I don't know why it's there, but I assume that at the time they had a good reason to add it. It may well be obsolete by now though as the way transitions are handled have changed significantly. The code was added almost 5 years ago (https://github.com/PX4/PX4-Autopilot/pull/3598), which is about three years before I started working with PX4. :sweat_smile: ",
          "type": "issue_comment"
        },
        {
          "author": "ghost",
          "created_at": "2021-01-06T19:29:38Z",
          "body": "I tested this just now in sitl, went into something like this. what am i doing wrong in this one?\r\nseems like it undershoots now.\r\nhttps://review.px4.io/plot_app?log=5be75d9d-c111-4b91-82d3-03eb544da898\r\n\r\n\r\n\r\nmy mission is as below.\r\n![image](https://user-images.githubusercontent.com/25317204/103811799-7ba0b680-5083-11eb-9ff6-f5a6975662aa.png)\r\n![image](https://user-images.githubusercontent.com/25317204/103811917-aee34580-5083-11eb-8c05-f299b0d28c3b.png)\r\n",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-06T21:03:48Z",
          "body": "> I tested this just now in sitl, went into something like this. what am i doing wrong in this one?\r\n\r\nI couldn't reproduce. Could you share your mission file please?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "ghost",
          "created_at": "2021-01-07T01:43:40Z",
          "body": "\r\n[undershooting_misssion.zip](https://github.com/PX4/PX4-Autopilot/files/5779025/undershooting_misssion.zip)\r\nhere's the mission file. sorry for the delay",
          "type": "issue_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-01-07T09:59:58Z",
          "body": "@yuthikasagarage Your mission is incomplete for this new way of handling transitions. Add a (Land) Waypoint after the VTOL Transition command and it will work better. \r\n[undershooting_misssion_fixed.zip](https://github.com/PX4/PX4-Autopilot/files/5780696/undershooting_misssion_fixed.zip)\r\nAs you can see I placed WP9 a bit after WP7. This is approx. the extra distance that the drone was overshooting before. \r\nFor illustrative purposes, observe what happens when you badly place the waypoint after the back transition: \r\n[undershooting_misssion_badly_fixed.zip](https://github.com/PX4/PX4-Autopilot/files/5780741/undershooting_misssion_badly_fixed.zip)\r\nAs soon as the WP7 is accepted, the drone starts the back transition and heads towards WP9 during transition.\r\n\r\nWhat happens in your case with the incomplete mission is that as soon as WP7 is accepted with the FW acceptance radius it starts the back transition and completes the mission at the same time.\r\n![image](https://user-images.githubusercontent.com/48206725/103875858-37d59d80-50d3-11eb-8106-69e600c842db.png)\r\nAs the mission is considered finished the vehicle goes into Loiter, but as you're still backtransitioning FW L1 logic is still at work, hence the half-circle. What I find interesting is that after BT is complete the drone doesn't stay where it is or goes to where it was at 1:22, but flies to launch position instead. I guess it's how the end-of-mission-loiter is implemented for MC drones.\r\n\r\n\r\nAdmittedly this PR has the potential to make things worse if used in a non-intended way, but if you are aware of it it gives you more flexibility (e.g. when transitioning with tail wind you can move the next WP a bit further). \r\n --> this means we need to document it well.",
          "type": "issue_comment"
        },
        {
          "author": "ghost",
          "created_at": "2021-01-07T12:29:11Z",
          "body": "@ThomasRigi thanks for the explanation. i can see the logic now.",
          "type": "issue_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-01-29T16:11:59Z",
          "body": "I don't like this new commit: https://logs.px4.io/plot_app?log=9eb1719d-eac8-49b7-9617-83b4e1a3354d\r\n\r\nBy enforcing that during transition it has to move to the waypoint where transition was triggered you kind of take away the point of this PR. ",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-29T17:45:31Z",
          "body": "> By enforcing that during transition it has to move to the waypoint where transition was triggered \r\n\r\nWell it wouldn't have needed to accept the old waypoint anymore like it was prior this PR, but will still keep it as current position setpoint. And after some more SITLing I came to the same conclusion as you, that without the check for the transition_state it's much smoother. Thus removed the last commit again.\r\n\r\n@RomanBapst please approve if you think that it's safe enough like this.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2021-02-15T18:09:33Z",
          "body": "@sfuhrer looks like you are going to need to rebase, the main branch has been moving faster these days 🐇 \r\n",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-02-22T11:16:20Z",
          "body": "@dagar @ThomasRigi Can you guys update your review as well?",
          "type": "issue_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-02-22T13:17:24Z",
          "body": "I'm fine with the changes too, but I would have preferred the symmetric solution that also aims for the next WP in a front transition. This is much less critical than the back transition though, so I'm also happy if it goes in as it is now.\r\n\r\nI still don't see the potential timing issues clearly. But @dagar certainly has a better knowledge about them than I do. From my understanding of the transition logic nothing should break though if we remove L115ff completely instead of checking the RW/FW state",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-03-18T07:35:57Z",
          "body": "@ThomasRigi Have you seen that for the front transition the fixed wing position controller is generating it's own target setpoint irrelevant of what navigator is saying?\r\n\r\nhttps://github.com/PX4/Firmware/blob/40e6958bd994a29ddf73c5546ab6824dbb2ac6b1/src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp#L687",
          "type": "issue_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-04-09T10:48:57Z",
          "body": "Sorry for the slow response. I vaguely recalled something like that, but wasn't aware of the details. ~~Still undeniably there is a difference in how the front transition is handled in the two logs of https://github.com/PX4/PX4-Autopilot/pull/16499#discussion_r553249245... but I have to admit I no longer understand why~~ Ok, it's me who was stupid, the drone was aligned differently before the transition started.\r\n\r\nDo you still think it is better to set this artificial heading hold waypoint for the whole duration of the front transition or could we just have it track the normal waypoints ? And in case it reaches the first FW WP while still in transition move towards the next one.\r\n\r\nI think both ways have advantages and drawbacks. In my dream world the drone can handle any type of turns during transition if needed. But I also see that if you ask for a harsh turn during transition it might not end well - even though so far what I saw looked quite stable in the air with the L1 tracking during transition.\r\n\r\nMy main concern with the \"stubborn\" heading hold is that if you have a tight geofence just flying straight no matter what might get you closer to the geofence than you'd like, e.g. with tail wind. Or also without geofence, if the drone has to do a full bank turn to backtrack just after transition it's not great either. Admittedly, in these cases you can also say badly planned mission.\r\n\r\nOn the other hand we'd have a more reliable planned trajectory if the front transition really tracks the planned WPs (as it now does with the back transition). My main worries are potential hard turns during transition, where again you can say badly planned mission. \r\n\r\nAll in all, I'd have a slight preference to tracking the planned WPs, but it's not something I'd consider blocking for this PR. ",
          "type": "issue_comment"
        },
        {
          "author": "VTOLDavid",
          "created_at": "2021-04-26T11:16:05Z",
          "body": "In my opinion, force the transition to end in a waypoint is a bad idea. In real flight you can have wind gusts, thrust assymentry on the frame, bad compass calibration or just constant wind that make the transition to end in a slightly different point that planned. Try to end in such waypoint may require large control imputs in conditions near stall, that in most airframes can generate aerodynamic control inversion (lowering the aileron to generate lift stalls the wing and generates the opposite effect). So I whould like to have the possibility to dissable that or at least limit the bank angle that this tracking can request.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2021-01-06T15:24:37Z",
          "body": "I think we should keep some form of this, but instead of a timeout explicitly check for the desired VTOL state.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-06T21:04:39Z",
          "body": "Alright, done in 81eceb526b931601840268c9ae92ce4bcd2e7637. Doesn't look nice but I guess that would do the trick.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-01-07T10:43:26Z",
          "body": "On second thought I think we should just delete the lines. IMO they go against the spirit of this PR. And https://github.com/PX4/PX4-Autopilot/commit/81eceb526b931601840268c9ae92ce4bcd2e7637 is asymmetric on front and back transitions, which is weird. For front transitions you only consider the mission item reached when the transition is complete, whereas for back transition it's immediate. (During transitions the vehicle type is VEHICLE_TYPE_ROTARY_WING)\r\n\r\n1. With https://github.com/PX4/PX4-Autopilot/commit/81eceb526b931601840268c9ae92ce4bcd2e7637 : https://logs.px4.io/plot_app?log=f0d5dd0a-14be-47cc-9b08-e99fdadca76d on the front transition the drone doesn't track the path.\r\n2. Without these lines: https://logs.px4.io/plot_app?log=dca29fa0-e3ba-45e0-b8b2-e75414c71077 the front transition tracks the (badly or at least specially) planned path much better.\r\n\r\n[too_short_FT.zip](https://github.com/PX4/PX4-Autopilot/files/5781084/too_short_FT.zip)\r\nThe mission has the first FW WP way too close to the transition start to make my point. IMO the second option is better",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-08T12:28:06Z",
          "body": "Happy to remove the check if we are sure that the command is always correctly propagated (and if not, then better fix that instead).",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-11T13:29:29Z",
          "body": "@dagar what's your opinion on that? Do you have any safety concerns when removing the check again?",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-11T15:45:37Z",
          "body": "Yes, the potential timing issues on a real vehicle vs SITL lockstep. Let's check the remaining navigator VTOL transition logic to see if it matters (the work item after transition cmd).",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-13T17:17:17Z",
          "body": "@dagar so we're afraid that the transition waypoint gets accepted before the transition is triggered in the VTOL_attitude_controller? Could we use that ack https://github.com/PX4/PX4-Autopilot/blob/cabb50a67ba1e95069457649f0f8cf1727eea5f5/src/modules/vtol_att_control/vtol_att_control_main.cpp#L187? \r\n@ThomasRigi I think it would actually be okay with these checks, even though they're asymmetric and that's certainly not nice. Reasoning: For backtransition it would immediately accept the waypoint, and that's required for making the back transition smoother (original goal of this PR). For front transition it wasn't an issue so far that it only got accepted once the transition was finished (this could change fast, I know).\r\n",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "ThomasRigi",
          "created_at": "2021-01-13T17:49:09Z",
          "body": "The PR is called \"make transitions smoother\", so in principle both can be targeted ;) But it's true that the reason for it is the back transition, and this works with the asymmetric behaviour. \r\n\r\nIf there is a reason to be worried that taking this check out might break things on a real drone we should keep the check. If not, I find the symmetric solution more elegant.\r\n\r\nThe way I understand the half a second waiting time is to make sure that `in_transition_mode` was updated so that you can monitor this until the transition is over, and not to make sure that the transition command is actually sent. But to me the recent changes in how transitions are done make it obsolete to wait until the end of the transition (for both ways) to accept the waypoint. It's just that I don't see the danger, but mayhaps that's just my lack of knowledge on some parts of PX4 code. If it helps to bring this PR in, then let's go with the asymmetric behaviour.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-01-29T12:43:03Z",
          "body": "```suggestion\r\n\t\t\treturn _navigator->get_vstatus()->vehicle_type == vehicle_status_s::VEHICLE_TYPE_ROTARY_WING && !_navigator->get_vstatus()->in_transition_mode;\r\n```",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-01-29T12:43:24Z",
          "body": "```suggestion\r\n\t\t\treturn _navigator->get_vstatus()->vehicle_type == vehicle_status_s::VEHICLE_TYPE_FIXED_WING && !_navigator->get_vstatus()->in_transition_mode;\r\n```",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 19,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "@sfuhrer I had a detailed look and I'm good with these changes.\r\n",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes incorrect waypoint-acceptance logic around VTOL transitions. Previously the navigator required re-accepting the transition-triggering waypoint after the vehicle changed VTOL state, which could produce overshoots, forced turnarounds, and unintended mission behavior; the change removes that requirement so the vehicle proceeds to the next waypoint, correcting the prior incorrect state/flow handling. Testers and reviewers confirm this resolves the undesired behavior (with documentation/mission-planning caveats)."
  },
  {
    "title": "Pre-emptive geofence triggering",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16400",
    "number": 16400,
    "created_at": "2020-12-16T13:11:56Z",
    "merged": true,
    "merged_at": "2021-01-13T09:26:11Z",
    "state": "closed",
    "conversation": {
      "author": "jkflying",
      "body": "**Describe problem solved by this pull request**\r\nCurrently, a geofence breach is triggered only after the vehicle is already in violation. This can lead to legal issues if the vehicle ends up outside of the expected area, safety issues if an obstacle is hit that the geofence was meant to avoid, and the vehicle can also be 'stuck' if the breach is continually triggered, overriding attempted user actions.\r\n\r\n**Describe your solution**\r\nPredict the motion of the vehicle and trigger the breach if it is determined that the current trajectory would result in a breach happening before the vehicle can make evasive maneuvers, if it delayed any longer. The vehicle is then re-routed to a safe hold position (stop for multirotor, loiter for fixed wing).\r\n\r\n**Describe possible alternatives**\r\nThere was also the idea of 'shrinking' the allowed flight area, however this would not be robust to different vehicle configurations or tuning.\r\n\r\n**Test data / coverage**\r\nExtensive testing both in SITL and on real vehicles (fixed wing, VTOL and multirotor) inside of Auterion. I haven't tested it yet since upstreaming, and additional testing from anyone else would be appreciated.\r\n\r\n\r\n\r\n**Additional context**\r\n![Screenshot_20201216_141033](https://user-images.githubusercontent.com/1746276/102352838-901ff080-3fa8-11eb-9a96-eb69d8b3d266.png)\r\n\r\n",
      "issue_comments": [
        {
          "author": "jkflying",
          "created_at": "2021-01-12T13:23:12Z",
          "body": "All comments addressed",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-13T07:55:04Z",
          "body": "@jkflying The geofencebreach test is failing in the PR.",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-13T09:25:50Z",
          "body": "> @jkflying The geofencebreach test is failing in the PR.\r\n\r\nYep it seems `clang` is more strict with the implicit conversions from float -> double than GCC - it even complains about constants, not just variables. I've done a workaround here, and made a fix in Matrix that will prevent this for the future.",
          "type": "issue_comment"
        },
        {
          "author": "garfieldG",
          "created_at": "2021-01-28T11:37:59Z",
          "body": "https://github.com/PX4/PX4-Autopilot/issues/16679",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2020-12-16T23:33:25Z",
          "body": "Copyright header",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-16T23:34:56Z",
          "body": "```suggestion\r\n\t~GeofenceBreachAvoidance() = default;\r\n```",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-16T23:37:06Z",
          "body": "Also require `_local_pos.v_xy_valid` here?",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:22:54Z",
          "body": "Can you move this block into a separate method?",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:28:56Z",
          "body": "Instead, pass `this` to `GeofenceBreachAvoidance`: `GeofenceBreachAvoidance(ModuleParams* parent) : ModuleParams(parent) {}`\r\n```suggestion\r\n```",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:30:38Z",
          "body": "```suggestion\r\n\tbool isInsidePolygonOrCircle(double lat, double lon, float altitude) override\r\n```",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:31:16Z",
          "body": "```suggestion\r\n\tenum class ProbeFunction {\r\n```",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:32:20Z",
          "body": "Can you avoid the static and use the correct type?",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:39:25Z",
          "body": "Might be a detail, but this only does what I'd expect from the method name if yaw=0.",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:40:57Z",
          "body": "Can you include the header for these?",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:43:08Z",
          "body": "```suggestion\r\nvoid GeofenceBreachAvoidance::updateParams() override\r\n{\r\n    ModuleParams::updateParams();\r\n```",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.cpp",
          "position": 55,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:46:56Z",
          "body": "This is the same in both cases -> you can move it out of the if and simplify:\r\n```suggestion\r\n\t\t\t\tcurrent_distance = (current_max + current_min) * 0.5f;\r\n```",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:50:41Z",
          "body": "Can you use `GEOFENCE_CHECK_INTERVAL`?",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2020-12-18T09:51:58Z",
          "body": "Same here",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-11T10:19:10Z",
          "body": "This already checks for the GPS being valid via `have_geofence_position_data` , do you think it needs more?",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-12T12:55:49Z",
          "body": "Moved these to a `dataman_mocks.hpp` as well",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-12T13:01:42Z",
          "body": "When you're worried about overflow or floats that implementation can actually be more accurate, but in this case I agree it is overkill.",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/geofence_breach_avoidance.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-12T13:15:38Z",
          "body": "renamed to `XXX_north`",
          "path": "src/modules/navigator/GeofenceBreachAvoidance/fake_geofence.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-13T08:03:08Z",
          "body": "Depending on `GF_SOURCE` (GPS vs global position).",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MikeCharikov",
          "created_at": "2022-11-29T13:47:52Z",
          "body": "@dagar \r\n\r\nLooks like GF_SOURCE logic is broken here. \r\n\r\nhttps://github.com/PX4/PX4-Autopilot/issues/20677",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes the geofence breach detection logic from reacting after a violation to predicting the vehicle trajectory and pre-emptively triggering a breach when evasive action would otherwise be too late. This fixes an incorrect/unsafe behavioral logic (late detection/stuck override) rather than a syntax/style issue; test failures mentioned are about compiler strictness and were addressed separately."
  },
  {
    "title": "Remaining flight range based RTL trigger",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16399",
    "number": 16399,
    "created_at": "2020-12-16T11:15:07Z",
    "merged": true,
    "merged_at": "2021-01-18T15:26:54Z",
    "state": "closed",
    "conversation": {
      "author": "jkflying",
      "body": "**Describe problem solved by this pull request**\r\nCurrently the RTL is triggered by a fixed battery level, irrespective of the distance to home, wind conditions, vehicle flight speed etc. This means that the vehicle could run out of battery during a long RTL, or arrive home with still a large fraction of battery remaining during a short RTL.\r\n\r\n**Describe your solution**\r\nTake into account the flight time home during the RTL. From the RTL viability checks in navigator publish this information saying how long the RTL will take (taking into account vehicle speeds, wind speed and destination distance/direction), and what fraction of the total battery would be used by the RTL. In Commander, subscribe to this and trigger RTL if the current battery level less the battery used on RTL will take the vehicle below the existing low battery thresholds.\r\n\r\n**Describe possible alternatives**\r\nA parameter was used for \"total flight time in RTL\". This could have been taken from the power module / smart battery telemetry of the current and battery capacity values. However, for multirotor that is risky because power usage in forward flight is higher than hover, so a vehicle hovering far away would RTL too late. The parameter approach also lets users set a hard upper limit on the amount of time they would be happy with the vehicle spending in RTL, which might be useful for regulatory or safety reasons.\r\n\r\n**Test data / coverage**\r\nThis was tested extensively in Auterion, but I haven't tested it yet since upstreaming. It should get some SITL time to make sure nothing broke in the transplant, but the concept is quite solid.\r\n\r\nNote: it might be better to squash this on merge",
      "issue_comments": [
        {
          "author": "moreba1",
          "created_at": "2021-01-06T07:18:52Z",
          "body": "> A parameter was used for \"total flight time in RTL\". This could have been taken from the power module\r\n\r\nI think using \"average power consumption\" (mah/km) + \"distance to home\" is better than \"flight time in RTL\".\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/pull/14819",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-12T13:55:22Z",
          "body": "> I think uisng \"average power consumption\" (mah/km) + \"distance to home\" is better than \"flight time in RTL\". #14819\r\n\r\nThat would be a nice improvement, I agree. However, I'd prefer to get this in with the current feature set, and we can work on improving it once people can already use it.",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-13T12:51:56Z",
          "body": "Out of flash again on V2 :cry: ",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-18T13:01:46Z",
          "body": "Re-running CI",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2021-01-18T15:31:35Z",
          "body": "> > I think uisng \"average power consumption\" (mah/km) + \"distance to home\" is better than \"flight time in RTL\". #14819\r\n> \r\n> That would be a nice improvement, I agree. However, I'd prefer to get this in with the current feature set, and we can work on improving it once people can already use it.\r\n\r\nanother potential future future improvement could take into account the wind speed and direction estimate for vehicles that can estimate wind (e.g. those that have airspeed sensors).\r\n\r\nHowever, this PR is a great improvement as a first step as-is.",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-18T16:08:07Z",
          "body": "> take into account the wind speed and direction estimate\r\n\r\nIt does that already :smile: \r\n\r\nEdit: and it can also use the drag fusion wind speed estimate for multirotors without an airspeed sensor.",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2021-04-14T23:16:29Z",
          "body": "@jkflying You wouldn't create a PR without making it possible for people to use it - so can you point me to the docs?\r\n\r\nAssuming not a few questions:\r\n- Does this work on all vehicle types?\r\n- How do you enable/disable this feature? Is it supported in QGC - how?\r\n- How does this work? My guess is that you set low battery action to RTL. Then you set RTL_FLT_TIME to indicate max time expected for RTL. The low battery RTL will then trigger early based on the systems calculation that time taken to get home at cruise speed will trigger low battery RTL within RTL_FLT_TIME. Is that correct? And presumably you can set this to 0 just to ignore it.\r\n\r\nPlaces that might be impacted:\r\n- [Safety > Return mode settings](https://docs.px4.io/master/en/config/safety.html#return-mode-settings)\r\n- [Safety > Low battery setup](https://docs.px4.io/master/en/config/safety.html#low-battery-failsafe)\r\n- [Return mode](https://docs.px4.io/master/en/flight_modes/return.html)\r\n- Maybe some more but ^^^ are the key ones.\r\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2020-12-16T16:52:50Z",
          "body": "units",
          "path": "src/modules/navigator/rtl_params.c",
          "position": 11,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-17T00:05:21Z",
          "body": "vehicle_status_s::VEHICLE_TYPE_UNKNOWN = 0",
          "path": "src/modules/navigator/rtl.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-17T00:08:16Z",
          "body": "```suggestion\r\n\tparam_t _rtl_xy_speed{PARAM_INVALID};\r\n```",
          "path": "src/modules/navigator/rtl.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-17T00:08:28Z",
          "body": "```suggestion\r\n\tparam_t _rtl_descent_speed{PARAM_INVALID};\r\n```",
          "path": "src/modules/navigator/rtl.h",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2021-01-13T12:19:13Z",
          "body": "Is minutes a problem? It is documented in the string. It's just that a number like 15 or 30 is much easier to understand for users than 900 or 1800 if I used seconds instead.",
          "path": "src/modules/navigator/rtl_params.c",
          "position": 11,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-13T15:07:27Z",
          "body": "Minutes is fine, I mean add the unit metadata (@unit).",
          "path": "src/modules/navigator/rtl_params.c",
          "position": 11,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Good to go!",
          "state": "COMMENTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error in the low-battery RTL trigger: previously the system used a fixed battery threshold regardless of distance, wind, or flight time, which could cause late or overly-early RTLs. The change incorporates estimated RTL flight time and battery usage into the decision (publishing RTL time/consumption and triggering RTL when remaining battery minus RTL consumption would cross thresholds), correcting the incorrect conditional/decision logic."
  },
  {
    "title": "Various RTL improvements (mainly VTOL specific)",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16377",
    "number": 16377,
    "created_at": "2020-12-11T15:23:13Z",
    "merged": true,
    "merged_at": "2021-01-04T10:58:17Z",
    "state": "closed",
    "conversation": {
      "author": "sfuhrer",
      "body": "Replaces https://github.com/PX4/PX4-Autopilot/pull/14728.\r\n\r\n**Describe problem solved by this pull request**\r\n- currently landing on the landing pattern doesn't seem to work (land pattern = whatever of the mission is after the DO_LAND_START marker)\r\n- high transition altitude (see https://github.com/PX4/PX4-Autopilot/pull/14728 for context)\r\n\r\n**Describe your solution**\r\nRTL logic with this PR, changes to current logic in **bold**\r\n(assuming RTL_TYPE is set to 1 (VTOL and FW default, using mission landing if available))\r\n- if close to RTL landing position and in hover, use cone RTL logic (if mission landing is planned that one is used)\r\n- if VTOL and in hover mode, use normal MC RTL strategy (climb to `RTL_RETURN_ALT`, come back and land at RTL landing position)\r\n- if DO_LAND_START is set (landing using mission landing): \r\n  - if in FW mode, go to DO_LAND_START marker in FW mode and from there on follow mission landing\r\n  - if in MC mode, go to the Land position and land there (don't follow landing pattern as in FW mode)\r\n-  if DO_LAND_START is not set \r\n   - if VTOL and in FW mode, climb to `RTL_RETURN_ALT`, fly to home, **loiter down until `RTL_DESCEND_ALT` in FW mode**, transition to hover and land\r\n\r\n**Test data / coverage**\r\nSITL tested with Standard VTOL and multicopter. \r\n\r\n**Additional context**\r\nFor VTOL, it is recommended to always fly with a mission landing planned, such that this one can be used during the RTL. Landing approaches using mission landing can be optimized for current wind direction (transition into the wind), and result in less hover time (vehicle transitions over hover, instead of while loitering around home)\r\n",
      "issue_comments": [
        {
          "author": "Antiheavy",
          "created_at": "2020-12-11T23:35:52Z",
          "body": "is this:\r\n\r\n\r\n> For VTOL, it is recommended to always fly with a mission landing planned, such that this one can be used during the RTL. Landing approaches using mission landing can be optimized for current wind direction (transition into the wind), and result in less hover time (vehicle transitions over hover, instead of while loitering around home)\r\n\r\nconsistent with this?:\r\n\r\n\r\n> * if close to home position and in hover, use cone RTL logic\r\n> \r\n> * if VTOL and in hover mode, use normal MC RTL strategy (climb to `RTL_RETURN_ALT`, come back and land)\r\n\r\nHave you considered if there should be a parameter that allows/avoids RTL at the Home location if in MC mode?  I wonder how many VTOL people would always want to use the mission landing if at all possible?  The \"return to home\" fall-back in the RTL_TYPE=1 logic was originally designed for the case when the mission landing accidentally gets deleted or gets overwritten with an infeasible landing pattern (which unfortunately is something that can easily happen).  \r\n\r\nFrom the way this PR is currently written you intend the VTOL vehicle will perform different Return mode behaviors depending on the context.  I wonder if that is how 100% of VTOL users will want it to work.  I'm not a VTOL expert so I'm not advocating one way or another, just curious.",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2020-12-15T10:34:45Z",
          "body": "> Have you considered if there should be a parameter that allows/avoids RTL at the Home location if in MC mode?\r\n\r\nThanks for pointing this out. I actually wrote it down wrongly in the description. It will **always use the mission landing for RTL if RTL_TYPE is 1**. What changes is that it now won't follow the landing pattern (all that is after the DO_LAND_START) in hover, but directly go to Land and descend there. \r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2020-12-29T12:58:36Z",
          "body": "in the master version, VTOL has a dangerous behavior when it reaches VTOL Land.\r\n@sfuhrer \r\nhttps://logs.px4.io/plot_app?log=9df156fc-233e-4b54-ad23-e82017ff47f4\r\n\r\ndesirable behavior is that VTOL transition location be near to land location to minimize power consumption, and the drone doesn't have that much tilt angle and oscillation in MC mode.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-29T17:13:23Z",
          "body": "Rebased on master.",
          "type": "issue_comment"
        },
        {
          "author": "ghost",
          "created_at": "2020-12-31T03:42:06Z",
          "body": "I also noticed that the standard_vtol back transition is behaving dangerously. it's on master and also in this pr,\r\nI noticed this on my flight on the real hardware as well. \r\njust after the back-transition it tries to do a roll maneuver in most of the times,\r\nBut every once in a while, it does a ok back-transition, without trying to roll . \r\n\r\nsame mission, two instances, same-pr (firmware), back-transition behavior is different.\r\nhttps://review.px4.io/plot_app?log=1e1bb5d2-5260-40da-bd7e-46fadf55fc6c ---> rolling\r\nhttps://review.px4.io/plot_app?log=12468162-8610-4965-831c-dd25c8edfeda ---> without roll\r\n\r\nhttps://user-images.githubusercontent.com/25317204/103393299-f0d23000-4b47-11eb-8937-cd642d604219.mp4\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2020-12-31T10:27:09Z",
          "body": "Thanks for reporting - @RomanBapst @sfuhrer could you please follow up?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-04T08:48:34Z",
          "body": "@yuthikasagarage Have you reviewed your flights? It looks like the vehicle is overshooting the transition waypoint (so your plan is \"not doable\") and hence correcting. There is nothing wrong about the control performance, this seems to be more a planning UX / tuning issue than anything else. That still needs to be solved, but not necessarily in the VTOL controller.",
          "type": "issue_comment"
        },
        {
          "author": "ghost",
          "created_at": "2021-01-04T09:29:15Z",
          "body": "i will look into the flights again, and will try to tune the back transition and check whether the issue persists.\r\nhowever, with a bad planning let's say it does a back-transition in some case, i think all the back-transitions need to be on level flight even if it overshoots, just my two cents.  ",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-04T12:40:56Z",
          "body": "@moreba1 \r\n\r\n> in the master version, VTOL has a dangerous behavior when it reaches VTOL Land.\r\n\r\nThis should be fixed with this PR, please re-test.\r\n\r\n> desirable behavior is that VTOL transition location be near to land location to minimize power consumption, and the drone doesn't have that much tilt angle and oscillation in MC mode.\r\n\r\nWith the code from this PR in, it will transition at a distance of the loiter radius from home if no mission landing is planned and the waypoint before the landing waypoint isn't at the transition altitude (RTL_DESCEND_ALT). I'm aware that this isn't optimal for minimized hover time, but at least it should be an improvement to before where it could transition 100m above home and then descend in hover. \r\n",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2021-01-28T16:12:01Z",
          "body": ">     * if in FW mode, go to DO_LAND_START marker in FW mode and from there on follow mission landing\r\n\r\nIs it possible that VTOL first climbs to RTL_RETURN_ALT and keep this attitude until it reaches to landing pattern?",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-28T16:52:58Z",
          "body": ">Is it possible that VTOL first climbs to RTL_RETURN_ALT and keep this attitude until it reaches to landing pattern?\r\n\r\nThat should be the desired behavior. If you noticed something else then let me know, that would indicate a bug.",
          "type": "issue_comment"
        },
        {
          "author": "VTOLDavid",
          "created_at": "2021-02-10T18:34:07Z",
          "body": "> \r\n> \r\n> i will look into the flights again, and will try to tune the back transition and check whether the issue persists.\r\n> however, with a bad planning let's say it does a back-transition in some case, i think all the back-transitions need to be on level flight even if it overshoots, just my two cents.\r\n\r\nI having this problem with a tailsitter with very dangerous turns during transition. Is it possible to disable the navigation during transition? The sugested solution is to give more time to the backtransition?",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-02-11T14:48:08Z",
          "body": "> I having this problem with a tailsitter with very dangerous turns during transition. Is it possible to disable the navigation during transition? The sugested solution is to give more time to the backtransition?\r\n\r\nI don't think this is directly related to this specific PR - would you mind creating a new issue, and include some flight logs in the description? Thanks!",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2021-03-24T06:26:02Z",
          "body": "@sfuhrer @Antiheavy Are there any docs changes related to this for PX4v1.12? My guess is yes, though it is unclear with the long thread, what delivered/what the landing behaviour is (?).\r\n\r\nLooking at the initial post, it is mostly about what should happen if RTL_TYPE is set to use a mission landing (RTL_TYPE=1) and there was no mission landing pattern defined - in which case it should fly down in FW mode to the descent altitude and then switch to MC and descend \"as per usual\". \r\n\r\nThe description is a little flawed because it does not cater for the behaviour with rally points. \r\n\r\nDocs for vtol are here:\r\nhttps://docs.px4.io/master/en/flight_modes/return.html#vtol\r\nhttps://docs.px4.io/master/en/flight_modes/return.html#mission-landing-rally-point-return-type-rtl-type-1",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2020-12-17T00:58:53Z",
          "body": "I'm not sure I follow, how would this fail if the mission landing progress was set to false immediately on first inactivation?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-17T01:01:13Z",
          "body": "```suggestion\r\n\t\t\t// even if current climb altitude is below (e.g. RTL immediately after take off)\r\n```",
          "path": "src/modules/navigator/rtl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-17T01:02:54Z",
          "body": "Now I'm wondering why this wasn't already set by default.",
          "path": "src/modules/navigator/rtl_params.c",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2020-12-18T13:20:04Z",
          "body": "Yes that's a big wonder. I found the cone RTL always really useful so far, both for VTOL in hover and MC.",
          "path": "src/modules/navigator/rtl_params.c",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2020-12-18T13:20:06Z",
          "body": "@dagar This prevents the situation where e.g. you are on a mission landing and then RTL kicks in. You don't want to start from the beginning but continue the mission. However, if e.g. the user takes over in manual during a mission landing and then switches back, you probably want to start he mission landing from scratch, as you have no clue where exactly you are and if you are still aligned with the path.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-18T14:30:06Z",
          "body": "I should have been more specific, the part I don't follow is the magic 2 seconds.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2020-12-21T11:01:58Z",
          "body": "@dagar A long study over many years has calculated this number to be the one and only reasonable value. It's almost like pi....",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-21T15:04:36Z",
          "body": "Why not do it immediately on the actual mission deactivation?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-21T15:06:19Z",
          "body": "This is for mission -> RTL (failsafe, etc) -> mission (planned landing) with little to no delay?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-04T10:57:52Z",
          "body": "Let's track this in a separate issue - we shouldn't be blocking an incremental move towards a much better behavior.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2021-01-05T08:21:41Z",
          "body": "Issue to track that: https://github.com/PX4/PX4-Autopilot/issues/16488",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-01-29T13:06:28Z",
          "body": "@dagar I think I might need to explain this a bit better:\r\nWhen you are executing a mission landing and RTL kicks in due to low battery, then the mode switches from mission to RTL and back to mission (assuming you are executing a mission landing, which is the preferred choice almost always).\r\nTwo the second delay (it actually needs way less) allows the mission to just continue the landing rather than restarting the landing pattern.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2021-01-29T13:06:54Z",
          "body": "@dagar Sorry, I noticed I told you this before. What is the issue here?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-29T14:54:56Z",
          "body": "> @dagar Sorry, I noticed I told you this before. What is the issue here?\r\n\r\nNothing necessarily, I just wanted to make sure there wasn't a potential hole for a hard to reproduce bug down the round. Eg dataman chokes reading the sdcard and there's a one off delay that's much longer than expected. \r\n￼\r\n",
          "path": "src/modules/navigator/mission.cpp",
          "position": 16,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Reviewed, approving after intense flight testing.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes the RTL/landing decision logic for VTOL/MC/FW modes and the handling of DO_LAND_START, addressing incorrect behaviors (mission landing not being used, improper transition/altitude handling and unsafe back-transitions). Multiple reports of dangerous/incorrect RTL behavior motivated the changes and a core maintainer approved after intensive flight testing, indicating the PR fixes the logic error."
  },
  {
    "title": "Fix FOH effects after VTOL front transition",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16373",
    "number": 16373,
    "created_at": "2020-12-11T06:53:01Z",
    "merged": true,
    "merged_at": "2021-01-02T01:19:00Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "This caused the navigator to use the next waypoint (after the vtol takeoff item)\r\nto be used as target during the transition. If the altitude of that waypoint\r\nwas much higher than the takeoff altitude then there were FOH effects\r\nafter the transition which caused the vehicle to first descend before\r\nclimbing again.\r\n\r\nSigned-off-by: RomanBapst <bapstroman@gmail.com>\r\n",
      "issue_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2020-12-11T07:05:15Z",
          "body": "TECS altitude setpoint with this PR:\r\n![image](https://user-images.githubusercontent.com/7610489/101873586-409c8780-3b98-11eb-9759-f49dfec67f8f.png)\r\n\r\nTECS altitude setpoint without this PR:\r\n![image](https://user-images.githubusercontent.com/7610489/101873627-5742de80-3b98-11eb-98fe-b42bf337fe61.png)\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-11T15:01:00Z",
          "body": "You don't ever want to use the next item for transition? The altitude could be adjusted in the next item.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-02T01:19:41Z",
          "body": "You want to keep level during transition. The plot shows that the system is then gaining altitude on the way to the next waypoint.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-02T01:34:38Z",
          "body": "> You want to keep level during transition. The plot shows that the system is then gaining altitude on the way to the next waypoint.\r\n\r\nI know, I was talking about transition towards the next waypoint while keeping the vehicle level. Some people use this to control the direction of VTOL transition. ",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-02T12:58:22Z",
          "body": "We need to get to a point where we set a heading and then let the vehicle transition on that heading. Otherwise we can run into crazy corner cases where someone sets a waypoint 90 degrees to the right or left and then complains that it's \"unstable\" or \"jerky\". So I would consider the transition atomic, configured beforehand and the vehicle comes back onto trajectory control at the end of it. You will need to set the transition up correctly and then let it execute.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-01-02T17:16:23Z",
          "body": "I agree with that I'd just like to see these types of potential behaviour changes (eg transition heading alignment) addressed explicitly rather than something that slipped in as a byproduct of fixing something else (FOH altitude effects) with no mention.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR corrects incorrect navigator logic that used the next waypoint as the target during a VTOL front transition, which produced unintended FOH altitude setpoint behavior (causing a descent before climbing). The change prevents using the next waypoint during the transition so the vehicle keeps level and avoids the undesired altitude jump, fixing an incorrect state/target-selection logic bug."
  },
  {
    "title": "navigator: fix LOITER_TO_ALT",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16371",
    "number": 16371,
    "created_at": "2020-12-10T18:53:31Z",
    "merged": true,
    "merged_at": "2020-12-11T15:28:09Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": " - this was overzealously removed in https://github.com/PX4/PX4-Autopilot/pull/15677\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "Looks good to me and works in SITL.",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and description state that behavior for LOITER_TO_ALT was mistakenly removed and is being restored; that removal would cause incorrect navigator behavior (a logic error). The reviewer confirms it works in simulation (SITL), indicating the change corrects the unintended behavior, so this is a fix for a logic bug."
  },
  {
    "title": "Fix Return issue to landing pattern",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16352",
    "number": 16352,
    "created_at": "2020-12-08T17:38:36Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "moreba1",
      "body": "fix this issue:\r\nhttps://github.com/PX4/PX4-Autopilot/issues/16299\r\n\r\nwhen we have \"land start\" after a survey drone can not return to landing pattern.\r\n\r\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2020-12-08T22:44:05Z",
          "body": "I don't quite follow. Did you see within the if statement it's accessing missionitem_prev.lat, etc? What is the missionitem_prev in your case?",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2020-12-09T06:43:28Z",
          "body": "missionitem_prev is MAV_CMD_DO_SET_CAM_TRIGG_DIST 0 . (take photos distance 0 in QGC)",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-12-15T14:56:52Z",
          "body": "Can you share your mission (image or .mission file)? `DO_LAND_START` is only a marker, it needs to have a position waypoint before it.",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2020-12-16T05:16:42Z",
          "body": "https://docs.qgroundcontrol.com/master/en/PlanView/pattern_fixed_wing_landing.html\r\nfor fixedwing:\r\nThis pattern creates three mission items:\r\n    DO_LAND_START - If you abort a landing it sends DO_GO_AROUND to the vehicle, which then causes the mission to return to this point and try to land again.\r\n    NAV_LOITER_TO_ALT - Start point for landing\r\n    NAV_LAND - End point for landing\r\n",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2020-12-18T18:30:57Z",
          "body": "created by daily build QGC version :\r\n[plan.zip](https://github.com/PX4/PX4-Autopilot/files/5717482/plan.zip)\r\n",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2021-01-01T06:54:06Z",
          "body": "> Can you share your mission (image or .mission file)? `DO_LAND_START` is only a marker, it needs to have a position waypoint before it.\r\n\r\nIf this pull request merged, the landing pattern doesn't need to waypoint before DO_LAND_START. \r\n@DonLakeFlyer what is your opinion?",
          "type": "issue_comment"
        },
        {
          "author": "DonLakeFlyer",
          "created_at": "2021-01-01T19:05:54Z",
          "body": "Seems pretty broken to me. DO_LAND_START should work wherever you place it and whatever is in front of it in mission commands.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2021-01-01T19:16:46Z",
          "body": "> Can you share your mission (image or .mission file)? `DO_LAND_START` is only a marker, it needs to have a position waypoint before it.\r\n\r\nwhy does it need a position waypoint BEFORE it?  It's the position waypoint(s) AFTER the Do_Land_Start that is import.",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2021-01-29T11:28:28Z",
          "body": "can this PR be reviewed?\r\n@dagar  @sfuhrer ",
          "type": "issue_comment"
        },
        {
          "author": "moreba1",
          "created_at": "2021-01-31T20:09:46Z",
          "body": "fixed here https://github.com/PX4/PX4-Autopilot/commit/12875f7869ac547116119ba0fcad7fe3251ae27a",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect runtime behavior: the code was assuming the mission's previous item provided valid position data (missionitem_prev.lat/etc.), which fails when that previous item is a non‑position command (e.g., MAV_CMD_DO_SET_CAM_TRIGG_DIST), preventing return-to-landing. The discussion and referenced commit indicate the change corrects that logic by not relying on a non‑position previous item and thus fixes the landing-pattern return behavior."
  },
  {
    "title": "reenable WV after Front Transition alignment",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16335",
    "number": 16335,
    "created_at": "2020-12-04T17:00:58Z",
    "merged": true,
    "merged_at": "2020-12-09T16:36:21Z",
    "state": "closed",
    "conversation": {
      "author": "ThomasRigi",
      "body": "**Describe problem solved by this pull request**\r\nFixes https://github.com/PX4/PX4-Autopilot/issues/16305\r\n\r\n@sfuhrer @dagar \r\n\r\n**Describe your solution**\r\nReenable Weathervane after front transition alignment also for VTOL Transition item.\r\n\r\n**Describe possible alternatives**\r\n\r\n\r\n**Test data / coverage**\r\nSITL gazebo standard vtol: https://logs.px4.io/plot_app?log=7fa8edf3-84bc-4c9b-918b-a16c53b8d2b0\r\n\r\n**Additional context**\r\n",
      "issue_comments": [
        {
          "author": "xdwgood",
          "created_at": "2020-12-10T01:08:18Z",
          "body": "I think v1.11 also need this",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "sfuhrer",
          "created_at": "",
          "body": "That makes sense to me, thanks!",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the re-enabling of Weathervane after front transition alignment to include the VTOL Transition case, which corrects an incorrect state transition/behavior where WV remained disabled for that transition. The change addresses unintended behavior reported in the linked issue and is validated by SITL logs, so it fixes a logic error (improper state handling) rather than a syntax/style issue."
  },
  {
    "title": "Handle takeoff waypoints for rover",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16297",
    "number": 16297,
    "created_at": "2020-11-28T15:45:06Z",
    "merged": true,
    "merged_at": "2020-11-28T23:08:54Z",
    "state": "closed",
    "conversation": {
      "author": "Jaeyoung-Lim",
      "body": "**Describe problem solved by this pull request**\r\nPreviously, rover vehicles were not able to handle Takeoff waypoints. The behavior when a takeoff waypoint was passed to a rover vehicle was:\r\n- The vehicle would not move since the waypoint was too close\r\n- The takeoff waypoint would not get accepted since rovers are not able to climb and reach the altitude\r\n\r\nI think it might be obvious that one \"should not\" pass takeoff waypoints to a vehicle. However, QGroundControl only lets you plan a mission that starts with a takeoff waypoint. While this should also be an improvement on the QGC side, I think it is still useful to handle this case on the vehicle side so that the vehicle can still progress with the mission even with a takeoff waypoint\r\n\r\n**Describe your solution**\r\nThis adds a special case when handling takeoff waypoints for rover vehicles. The acceptance radius is set to only consider horizontal distance to the waypoint, if the vehicle type is rover.\r\n\r\n**Test data / coverage**\r\n- This was tested in SITL gazebo, with the rover model.\r\n```\r\nmake px4_sitl gazebo_rover\r\n```\r\nThis log shows a full mission successfully finished starting with a Takeoff waypoint and finished with a RTL: https://review.px4.io/plot_app?log=25fe983b-44d0-4a11-a7c2-2ab9662c35d4\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "I see value in this as I expect that the notion of \"known good initial starting position\" does matter for a rover as well. E.g. I could see that in real applications you don't want a rover to drive with its cruise speed from the parking position to the starting position (== too fast if it's moving near people).",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes incorrect waypoint-acceptance logic for rover vehicles: previously the code evaluated takeoff waypoints using full 3D distance (including altitude) causing rovers to neither accept nor progress on those waypoints. The change special-cases rovers to use only horizontal distance for acceptance, correcting the conditional behavior so missions can continue."
  },
  {
    "title": "Modify the method of follow_target.cpp to calculate the expected speed",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16255",
    "number": 16255,
    "created_at": "2020-11-22T14:29:07Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "fanchuannangang1503",
      "body": "If the frequency of sending follow_target orb messages is very high, the dt_ms variable will be a short time, and dt_ms/INTERPOLATION_PNTS will be less than the execution cycle of the FollowTarget::on_active() function, so the actual acceleration will be very slow.\r\n",
      "issue_comments": [
        {
          "author": "mrpollo",
          "created_at": "2021-02-15T18:35:56Z",
          "body": "Hey @fanchuannangang1503 thanks for your suggestion, it looks like you have problems with code formatting, please see my suggestion below on how to fix this. Additionally please rebase this PR since it might be falling behind our main branch.\r\n\r\ncan you please fix the code formatting issues?  Try the following helper and push your changes again. This will clean up your code using `astyle`, and will make the first CI test happy!\r\n\r\n```\r\nmake format\r\n```\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "fanchuannangang1503",
          "created_at": "2021-02-18T12:51:52Z",
          "body": "OK",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2021-06-26T03:10:44Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR description explains that the existing computation (dt_ms/INTERPOLATION_PNTS) can become smaller than the FollowTarget::on_active() execution cycle when messages arrive at high frequency, causing unintendedly slow acceleration — a timing/boundary logic bug. The change to how expected speed is calculated is intended to correct this incorrect behavior, so this is a logic fix. Confidence is medium because the actual code diff is not shown here, so verification of the exact fix is not possible."
  },
  {
    "title": "v1.11.2 cherry-picked bug fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/16175",
    "number": 16175,
    "created_at": "2020-11-12T16:50:17Z",
    "merged": true,
    "merged_at": "2020-11-12T17:57:28Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title only says 'v1.11.2 cherry-picked bug fixes' with no description, diff, or discussion provided. While it likely contains bug fixes, there is no evidence here to confirm they address a logic error specifically, so a definitive determination cannot be made."
  },
  {
    "title": "Geofence",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17362",
    "number": 17362,
    "created_at": "2021-04-08T12:15:33Z",
    "merged": false,
    "merged_at": null,
    "state": "open",
    "conversation": {
      "author": "garfieldG",
      "body": "Hi,\r\n\r\nfollowing https://github.com/PX4/PX4-Autopilot/issues/16679 some changes were made :\r\n-fixed bug that caused a breach of geofence if trying to go above the geofence more than one time\r\n-gf alert will disappear when changing gf action to none\r\n-mission will be accepted if gf action is none or warning",
      "issue_comments": [
        {
          "author": "garfieldG",
          "created_at": "2021-04-11T13:52:40Z",
          "body": "changed to draft due to a bug I found. I Will change it back after fixing it",
          "type": "issue_comment"
        },
        {
          "author": "sfuhrer",
          "created_at": "2023-11-28T12:17:49Z",
          "body": "Hi @garfieldG can you check if your changes are still needed with https://github.com/PX4/PX4-Autopilot/pull/22394?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly states it fixes incorrect geofence behaviors (incorrect breach detection on repeated attempts above the fence, alerts not clearing when action set to none, and mission acceptance logic based on geofence action), which are logic errors affecting program behavior. However the author marked the PR as draft due to a remaining bug and a reviewer asked to verify overlap with another PR, so the fix is not fully validated — hence medium confidence."
  },
  {
    "title": "Predict and use braking distance when Pausing auto modes (for multicopters)",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17269",
    "number": 17269,
    "created_at": "2021-03-30T10:08:47Z",
    "merged": true,
    "merged_at": "2021-06-18T08:45:04Z",
    "state": "closed",
    "conversation": {
      "author": "cmic0",
      "body": "**Describe problem solved by this pull request**\r\nCurrently, when pausing a vehicle during a mission/RTL/Orbit navigator will take the current position of the vehicle as loiter point. This makes the vehicle overshoot the loiter position and then bounce back to the desired setpoint as the braking distance is not taken into account.\r\n\r\n**Describe your solution**\r\nThis PR takes into account the vehicle braking distance to predict and set as loiter point the position where the vehicle will actually be able to stop.\r\n\r\n\r\n**Describe possible alternatives**\r\nIf we had motion primitives in place we could have used those to predict the braking trajectory, but still this implementation is an enhancement compared to the current state.\r\n\r\n**Test data / coverage**\r\nTested in SITL\r\n\r\n**Additional context**\r\nAdd any other related context or media.\r\n",
      "issue_comments": [
        {
          "author": "cmic0",
          "created_at": "2021-03-30T10:09:33Z",
          "body": "FYI @BazookaJoe1900 ",
          "type": "issue_comment"
        },
        {
          "author": "BazookaJoe1900",
          "created_at": "2021-03-30T15:51:52Z",
          "body": "Does the new Break option is documented on mavlink?",
          "type": "issue_comment"
        },
        {
          "author": "Kim-zhi-jiang",
          "created_at": "2021-07-13T03:12:42Z",
          "body": "1.11.3  with Geofence it's work okay ,but 1.20 not work \r\n\r\nGF_ACTION 2 #Default 1 0None 1Warning 2Hold mode 3Return mode 4Terminate\r\nGF_MAX_HOR_DIST 10\r\nGF_MAX_VER_DIST 10",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bresch",
          "created_at": "2021-03-30T13:30:29Z",
          "body": "The jerk parameter used in auto modes is [MPC_JERK_AUTO](https://dev.px4.io/master/en/advanced/parameter_reference.html#MPC_JERK_AUTO)",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "garfieldG",
          "created_at": "2021-05-09T13:05:58Z",
          "body": "@cmic0 it seems that if you want to just move in the yaw axis while in place you can't do it due to this line",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 77,
          "type": "review_comment"
        },
        {
          "author": "cmic0",
          "created_at": "2021-06-17T09:16:23Z",
          "body": "@garfieldG in hold mode you can't control vehicle orientation/attitude, by default we have RC_OVERRIDE enabled which would switch you to Position in case you move the yaw with a stick, or maybe i am not getting your use case :thinking: ?",
          "path": "src/modules/navigator/navigator_main.cpp",
          "position": 77,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "Overall looks good. Just need to change the jerk parameter.",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        },
        {
          "author": "bresch",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR corrects incorrect pause behavior where the navigator used the vehicle's current position as the loiter/hold point, causing overshoot because braking distance wasn't considered. Predicting and using the braking distance changes the control logic/state prediction and prevents the unintended bounce-back, which is a classic logic bug rather than a syntax/style issue."
  },
  {
    "title": "params: ensure short description is only a single line",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17209",
    "number": 17209,
    "created_at": "2021-03-23T13:41:39Z",
    "merged": true,
    "merged_at": "2021-03-23T16:55:12Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "So a UI can display it properly\r\n\r\nThis is less relevant with xml, as QGC is currently showing as long single line, but for json parameter metadata, it messes up the UI.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2021-03-23T14:37:28Z",
          "body": "I'm also wondering if we should try to get the length under control.\r\n\r\nMaybe cap it at the worst case today and gradually ratchet it up until we hit something reasonable?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2021-03-23T15:22:16Z",
          "body": "Yup, I added a limit of 150 for existing and 70 to the yaml, so we can shorten when transitioning.\r\n\r\nThese are the worst cases:\r\n```\r\n80 Minimum landing target standard covariance, uses reported covariance if greater.\r\n81 Airspeed sensor tube diameter. Only used for the Tube Pressure Drop Compensation.\r\n81 Maximum absolute altitude (height above ground level) allowed for range aid mode.\r\n81 Time in seconds we wait on reaching target heading at a waypoint if it is forced.\r\n82 Enable yaw control of the mount. (Only affects multicopters and ROI mission items)\r\n83 Boolean to allow moving into directions where there is no sensor data (outside FOV)\r\n84 Maximum allowed angle the vehicle is allowed to pitch down to generate forward force\r\n84 Terrain altitude process noise - accounts for instability in vehicle height estimate\r\n84 Terrain maximum percent grade, hilly/outdoor (100 = 45 deg), flat/Indoor (0 = 0 deg)\r\n85 Horizontal radius from return point within which special rules for return mode apply.\r\n85 Maximum vertical velocity for which position hold is enabled (use 0 to disable check)\r\n86 Enable publishing of a fake global position (e.g for AUTO missions using Optical Flow)\r\n86 Magnitude of maximum angular flow rate reliably measurable by the optical flow sensor.\r\n86 Minimum time of arrival delta between non-IMU observations before data is downsampled.\r\n87 Maximum horizontal velocity for which position hold is enabled (use 0 to disable check)\r\n89 Time-out to wait when offboard connection is lost before triggering offboard lost action.\r\n90 Auxillary Velocity Estimate (e.g from a landing target) delay relative to IMU measurements\r\n90 Enable PWM input on for engaging failsafe from an external automatic trigger system (ATS).\r\n91 Optical Flow data will only be used if the sensor reports a quality metric >= EKF2_OF_QMIN.\r\n92 Horizontal acceleration threshold used by automatic selection of magnetometer fusion method.\r\n93 Tilt actuator control value commanded when disarmed and during the first second after arming.\r\n93 Upper limit on airspeed along individual axes used to correct baro for position error effects\r\n93 Z position of IMU in body frame (down axis with origin relative to vehicle centre of gravity)\r\n94 Whether to set the external vision observation noise from the parameter or from vision message\r\n94 Y position of IMU in body frame (right axis with origin relative to vehicle centre of gravity)\r\n96 X position of IMU in body frame (forward axis with origin relative to vehicle centre of gravity)\r\n97 Measurement noise for the optical flow sensor when it's reported quality metric is at the maximum\r\n97 Specific drag force observation noise variance used by the multi-rotor specific drag force model.\r\n101 Z position of GPS antenna in body frame (down axis with origin relative to vehicle centre of gravity)\r\n102 Y position of GPS antenna in body frame (right axis with origin relative to vehicle centre of gravity)\r\n103 Average delay of the range sensor message plus the tracking delay of the position controller in seconds\r\n104 X position of GPS antenna in body frame (forward axis with origin relative to vehicle centre of gravity)\r\n107 Enable/disable usage of fixed-wing actuators in hover to generate forward force (instead of pitching down).\r\n109 Z position of range finder origin in body frame (down axis with origin relative to vehicle centre of gravity)\r\n110 Y position of range finder origin in body frame (right axis with origin relative to vehicle centre of gravity)\r\n111 Z position of VI sensor focal point in body frame (down axis with origin relative to vehicle centre of gravity)\r\n112 X position of range finder origin in body frame (forward axis with origin relative to vehicle centre of gravity)\r\n112 Y position of VI sensor focal point in body frame (right axis with origin relative to vehicle centre of gravity)\r\n114 Time constant used by acceleration and angular rate magnitude checks used to inhibit delta velocity bias learning.\r\n114 X position of VI sensor focal point in body frame (forward axis with origin relative to vehicle centre of gravity)\r\n114 Z position of optical flow focal point in body frame (down axis with origin relative to vehicle centre of gravity)\r\n115 Y position of optical flow focal point in body frame (right axis with origin relative to vehicle centre of gravity)\r\n117 X position of optical flow focal point in body frame (forward axis with origin relative to vehicle centre of gravity)\r\n118 Measurement noise for vision angle observations used to lower bound or replace the uncertainty included in the message\r\n121 Measurement noise for vision position observations used to lower bound or replace the uncertainty included in the message\r\n121 Measurement noise for vision velocity observations used to lower bound or replace the uncertainty included in the message\r\n123 Time constant of the position output prediction and smoothing filter. Controls how tightly the output track the EKF states.\r\n125 Minimum duration during which the reported range finder signal quality needs to be non-zero in order to be declared valid (s)\r\n132 Angle left/right from the commanded setpoint by which the collision prevention algorithm can choose to change the setpoint direction\r\n144 Differential gain for horizontal velocity error. Small values help reduce fast oscillations. If value is too big oscillations will appear again.\r\n149 Maximum lapsed time from last fusion of measurements that constrain velocity drift before the EKF will report the horizontal nav solution as invalid.\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-03-23T16:04:47Z",
          "body": "Rebased on master, let's see what CI says.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR enforces that parameter short descriptions are a single line and adds length caps, which fixes incorrect UI behavior caused by multiline/overlong parameter metadata. This is a logic/validation bug fix (data handling/display logic), not just a cosmetic change."
  },
  {
    "title": "Fix first wp too far message overflow",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17128",
    "number": 17128,
    "created_at": "2021-03-15T16:14:40Z",
    "merged": true,
    "merged_at": "2021-03-15T16:40:53Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title ('Fix first wp too far message overflow') suggests a fix for a message overflow (likely UI/layout or string/buffer handling) rather than an incorrect control flow, state transition, or algorithmic decision. With no PR description or code/comments provided, there is no evidence this change addresses a logic error as defined (incorrect conditional/state/algorithm); it appears to be a presentation or bounds-handling fix instead."
  },
  {
    "title": "update UUV and rover controllers to use trajectory_setpoint and cleanup unused position_setpoint fields",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17061",
    "number": 17061,
    "created_at": "2021-03-09T02:52:11Z",
    "merged": true,
    "merged_at": "2021-03-09T15:36:35Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "Jaeyoung-Lim",
          "created_at": "2021-03-09T10:03:56Z",
          "body": "Why are the frame specific for the rover pos control?",
          "path": "src/modules/rover_pos_control/RoverPositionControl.hpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-03-09T14:16:27Z",
          "body": "It's not handled yet, but I'm assuming we're going to add it. Right now ORB_ID(trajectory_setpoint) is always NED, with things like body frame velocity setpoints being converted by the mavlink receiver. I'd like to push all of that into the controllers and keep mavlink as a dumb passthrough.",
          "path": "src/modules/rover_pos_control/RoverPositionControl.hpp",
          "position": 31,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-03-09T14:17:05Z",
          "body": "```suggestion\r\n\t\tif (_velocity_frame == VelocityFrame::NED) {\r\n```",
          "path": "src/modules/rover_pos_control/RoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bresch",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "Jaeyoung-Lim",
          "created_at": "",
          "body": "Thanks! looks good for me!\r\n\r\nJust one minor comment on the velocity frame in rover pos control",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "Assuming `trajectory_setpoint` is set like the few fields of the triplet before it looks good to me 👍 ",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title and reviews indicate a refactor to use trajectory_setpoint and remove unused position_setpoint fields rather than explicitly addressing a reported incorrect behavior. Reviewers only note minor comments (e.g., velocity frame) and there is no mention of a previously failing or incorrect logic path, so there isn't sufficient evidence this change fixes a logic error."
  },
  {
    "title": "Migrate sensors and navigator to use YAML module configuration",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17038",
    "number": 17038,
    "created_at": "2021-03-06T09:10:14Z",
    "merged": false,
    "merged_at": null,
    "state": "open",
    "conversation": {
      "author": "coderkalyan",
      "body": "As discussed on slack, this PR moves the sensors and navigator modules to use the new YAML module configuration for parameter definitions rather than the legacy C API. I'm checking that CI likes this - if so, I can go ahead and convert the others as well in another PR.\r\n\r\nI also fixed a few bugs that I found along the way in the px4parameters build system python scripts.\r\n\r\nFYI @dagar",
      "issue_comments": [
        {
          "author": "coderkalyan",
          "created_at": "2021-03-06T09:21:20Z",
          "body": "Looks like the module config regex is failing. I'll look into that tomorrow. Everything else seems to be fine.",
          "type": "issue_comment"
        },
        {
          "author": "coderkalyan",
          "created_at": "2021-03-10T17:24:38Z",
          "body": "> Did you verify that the generated parameters.xml is the same (or rather contains all expected params)?\r\n\r\nNot yet, but will do.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2021-06-26T03:10:28Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bkueng",
          "created_at": "2021-03-09T08:01:40Z",
          "body": "This could also just be removed",
          "path": "src/lib/parameters/px4params/srcparser.py",
          "position": 48,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2021-03-09T08:05:18Z",
          "body": "```suggestion\r\n  - group: Mission\r\n```",
          "path": "src/modules/navigator/module.yaml",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2021-03-09T08:06:05Z",
          "body": "```suggestion\r\n  - group: Follow Target\r\n```",
          "path": "src/modules/navigator/module.yaml",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2021-03-09T08:09:15Z",
          "body": "multi?",
          "path": "src/modules/sensors/module.yaml",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2021-03-09T08:09:54Z",
          "body": "for multi-instances, you need to add `num_instances: *max_num_sensor_instances`",
          "path": "src/modules/sensors/module.yaml",
          "position": 473,
          "type": "review_comment"
        },
        {
          "author": "coderkalyan",
          "created_at": "2021-03-10T17:24:08Z",
          "body": "Oh whoops completely forgot about using multi there :smile: I'll fix that",
          "path": "src/modules/sensors/module.yaml",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Thanks for going through this. I remarked a couple of things I spotted when looking over it.\r\nDid you verify that the generated parameters.xml is the same (or rather contains all expected params)?",
          "state": "COMMENTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR mainly migrates modules to a new YAML configuration format and mentions fixing some build-system Python script bugs, but there is no concrete evidence in the description or comments that a specific runtime logic error was identified and corrected. A remaining failing module-config regex and lack of verification of the generated parameters.xml suggest the change is incomplete and not clearly resolving an incorrect program behavior."
  },
  {
    "title": "navigator: new navigator_status msg split out of mission_result",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17031",
    "number": 17031,
    "created_at": "2021-03-05T17:26:46Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This is another small step towards turning navigator into a simpler (dumber) mission manager.\r\n\r\nThe `mission_result` contained a mix of general navigation state feedback and actual mission specifics. Now `mission_result` is dedicated entirely to the actual mission.",
      "issue_comments": [
        {
          "author": "stale[bot]",
          "created_at": "2021-06-26T03:10:30Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR describes a refactor that splits navigator state into a new navigator_status message and confines mission_result to mission specifics. There is no mention of a bug, incorrect behavior, or failing condition being fixed in the title, description, or comments—this appears to be architectural cleanup/design simplification rather than a targeted logic bug fix."
  },
  {
    "title": "[WIP]: move \"Follow Me\" out of navigator to flight_mode_manager",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17029",
    "number": 17029,
    "created_at": "2021-03-05T15:30:35Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This is the next little piece on the long road to unified flight mode handling and turning navigator into a simple \"mission manager\".\r\n\r\n - follow navigator navigation state moves entirely into a flight task (flight mode)\r\n - position_setpoint_triplet remove velocity and yawspeed setpoints (now position only)\r\n\r\nTODO\r\n - fully test FOLLOW",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2021-03-30T14:36:38Z",
          "body": "This is awesome Daniel, thanks for doing this! Particularly the reduced number of fields in `msg/position_setpoint.msg`",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-03-30T14:43:19Z",
          "body": "> This is awesome Daniel, thanks for doing this! Particularly the reduced number of fields in `msg/position_setpoint.msg`\r\n\r\nThanks @potaito, any suggestions for testing? I need a simple test case to work through the remaining details and ensure there are no regressions.",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2021-03-31T09:07:41Z",
          "body": "> > This is awesome Daniel, thanks for doing this! Particularly the reduced number of fields in `msg/position_setpoint.msg`\r\n> \r\n> Thanks @potaito, any suggestions for testing? I need a simple test case to work through the remaining details and ensure there are no regressions.\r\n\r\nNo suggestion from me right now. I'm about to test \"Follow Me\" with the old implementation once I figure out how to stream GPS from my ground station to the drone. :sweat_smile: \r\nOnce I have that, I would just hop on a bicycle, go to an open field and have the drone follow me.",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2021-04-01T12:51:25Z",
          "body": "I can test it in simulation. Got a python script with a moving target. Is there any other test that we need @dagar ?",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2021-04-01T13:18:02Z",
          "body": "Hm just tried with jmavsim and the drone did not move after takeoff: https://logs.px4.io/plot_app?log=764e59d1-a728-4aa9-b744-8f8c95bbdc06\r\n\r\nAnd here's the same simulation with current master, where the drone is moving: https://logs.px4.io/plot_app?log=be67163b-dd12-4836-97fd-53004f4946ed\r\n\r\nThe script I used for simulating is this one: https://gist.github.com/potaito/6d1db7471c0428f3a7e2342d6e34130d\r\nJust need `pip3 install mavsdk`",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-04-01T13:23:07Z",
          "body": "> Hm just tried with jmavsim and the drone did not move after takeoff: https://logs.px4.io/plot_app?log=764e59d1-a728-4aa9-b744-8f8c95bbdc06\r\n\r\nI should have been more clear, this is the bulk of the move with a few key pieces of logic still missing before it will actually work. \r\n\r\nhttps://github.com/PX4/PX4-Autopilot/blob/7f4fbc102c60ad6da1130edd036ba44d6486e880/src/modules/flight_mode_manager/tasks/AutoFollowMe/FlightTaskAutoFollowMe.cpp#L215-L219\r\n\r\nMy next step was figuring out how to effectively test in simulation so I could fill in the remaining TODOs. ",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2021-04-01T13:37:40Z",
          "body": "Right, the PR even says \"draft\" :sweat_smile: \r\nThe script I posted above is simply using mavSDK to publish the FOLLOW_TARGET mavlink message for a simulated target.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-04-01T13:41:50Z",
          "body": "> Right, the PR even says \"draft\" \r\n> The script I posted above is simply using mavSDK to publish the FOLLOW_TARGET mavlink message for a simulated target.\r\n\r\nThanks that's exactly what I needed. I'll finish this once v1.12 is out the door.",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2021-08-05T08:36:25Z",
          "body": "Closing in favour of https://github.com/PX4/PX4-Autopilot/pull/18026",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR is a WIP refactor that moves Follow Me logic and reduces fields in position_setpoint, not a targeted bug fix. Comments show key logic is still missing (simulator run showed the drone did not move) and the PR was later closed in favor of another, so it does not resolve a concrete logic error."
  },
  {
    "title": "Try to cleanup some things in mission navigation mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/17017",
    "number": 17017,
    "created_at": "2021-03-03T17:20:43Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "I've did initial testing of this but am not quite done.\r\nStill ready for an initial review.\r\n\r\n@dagar @MaEtUgR ",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "RomanBapst",
          "created_at": "2021-03-03T17:22:03Z",
          "body": "@dagar @MaEtUgR hope I'm not missing anything, but to me this makes no sense. Mission itself just reads from dataman, right?",
          "path": "src/modules/commander/Commander.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2021-03-06T01:17:40Z",
          "body": "It makes sense for air in restore to not have to depend on mavlink, but I think at this point we should get rid of it.",
          "path": "src/modules/commander/Commander.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title and description only mention cleanup and initial testing of 'mission navigation mode' and do not indicate a specific bug fix or corrected behavior. There are no code diffs, comments, or review notes provided that describe fixing an incorrect conditional, state transition, boundary condition, or other logic issue, so there is insufficient evidence that a logic error is being resolved."
  },
  {
    "title": "Make DO_SET_SERVO work",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10320",
    "number": 10320,
    "created_at": "2018-08-24T15:26:45Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "kpetrykin",
      "body": "Hello!\n\nMy goal was to make the mission command DO_SET_SERVO working with the possibility of triggering the servo with RC switch.\n\nFirst, I have found that \"vmount\" module (when enabled) publishes its values to actuator_controls_2 topic all the time. This overwrites all other publications to this topic. That is why DO_SET_SERVO is not working.\n\nI modified \"vmount\" module so that it would publish only if one of the actuator values were changed by RC. In other cases it stays silent.\n\nSecond, I have found that the formula, which translates PWM value from DO_SET_SERVO command parameters to -1..1 range for uORB, does not match the one which translates it back.\n[Original formula:](https://github.com/PX4/Firmware/blob/c997159e32f3870c7fd3202877324b76a62ea610/src/modules/navigator/mission_block.cpp#L433) `actuators.control[(int)item.params[0]] = 1.0f / 2000 * -item.params[1];`\n[Formula, which translates value back](https://github.com/4ert/Firmware/blob/397522d3813924380c209984b47b05bf743c3037/src/lib/pwm_limit/pwm_limit.cpp#L211): `effective_pwm[i] = control_value * (max_pwm[i] - min_pwm[i]) / 2 + (max_pwm[i] + min_pwm[i]) / 2;`\n[New formula](https://github.com/4ert/Firmware/blob/397522d3813924380c209984b47b05bf743c3037/src/modules/navigator/mission_block.cpp#L440): `actuators.control[(int)item.params[0]] = (float)(((float)item.params[1] - (PWM_DEFAULT_MAX + PWM_DEFAULT_MIN) / 2)/((PWM_DEFAULT_MAX - PWM_DEFAULT_MIN) / 2));`\n\nI need to discuss two questions about the formula: \n- to make it work properly we need to get actual \"max_pwm[i]\" and \"min_pwm[i]\" into navigator module. I have found a [way to get them](https://github.com/PX4/Firmware/blob/c997159e32f3870c7fd3202877324b76a62ea610/src/drivers/px4fmu/fmu.cpp#L1678), but I don't understand how to use it correctly\n- when I tested mission with DO_SET_SERVO command, servo works nice only with 1, 3 and 4 aux outputs. The second one for some reason outputs into first. I think there is something wrong with casting here: `(int)item.params[0]`\n\nI have tested everything with 1.7.3 Firmvare (px4fmu-v2_default), but did not save the flight log.\nI will test the last master in a few days.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-24T23:00:07Z",
          "body": "There are a few problems with this PR, but let's take a step back first.\r\n\r\nHow do people want/expect DO_SET_SERVO to even work?\r\n![screen shot 2018-08-24 at 18 55 07](https://user-images.githubusercontent.com/84712/44611459-43a8b980-a7cf-11e8-9266-6aad77f5252a.png)\r\n\r\nWhich servo does it correspond to? What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?\r\n\r\nWhat's the real use case for DO_SET_SERVO? Would we be better implementing a couple higher level commands? payload, gripper, etc\r\n\r\nIf the answer is still DO_SET_SERVO then the right place to implement that command is in the px4io (MAIN pwm) and/or px4fmu (AUX pwm) drivers. Those drivers are the consumers of actuator_controls_{0, 1, 2, 3} and work directly with PWM values.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-26T18:52:17Z",
          "body": "@4ert We need to separate the different actuator groups for good to make this easier. Could you join the PX4 dev call this week?\r\nhttps://dev.px4.io/en/contribute/#dev_call",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T12:16:37Z",
          "body": "- **How do people want/expect DO_SET_SERVO to even work?**\r\nIn our case we want to release a cargo by the mission command. The cargo is locked by the servo which is connected to one of the AUX outputs. We want to use DO_SET_SERVO command to send a PWM signal (parameter 2) to the AUX output from paramter 1.\r\n- **Which servo does it correspond to?**\r\n[As we can see now](https://github.com/PX4/Firmware/blob/bbc0c28c2c07743e489a338677e449a28ab5fd74/src/modules/navigator/mission_block.cpp#L436) the Navigator publish DO_SET_SERVO values to actuator_controls_2 topic. This control group is used to rule gimbal:\r\n![image](https://user-images.githubusercontent.com/161284/44657760-b18af600-aa06-11e8-9fd8-8a5971d51ffe.png)\r\n- **What's the real use case for DO_SET_SERVO? Would we be better implementing a couple higher level commands? payload, gripper, etc**\r\nI think when you use DO_SET_SERVO command - you just want to send an exactly PWM to external servo connected to your controller. If you want to rule gimbal - you will use DO_MOUNT_CONTROL, if you have any flight control mechanizm connected to the AUX - you will want to use some more convenient commands for this.\r\n- **If the answer is still DO_SET_SERVO then the right place to implement that command is in the px4io (MAIN pwm) and/or px4fmu (AUX pwm) drivers. Those drivers are the consumers of actuator_controls_{0, 1, 2, 3} and work directly with PWM values.**\r\nSo, I just made a little repair into an existing WORKING mechanizm. For now, Navigator module publishes into an \"actuator_controls_2\" topic and the px4fmu driver gets values from it and sends to the servos. There's just two things which discourage the process: the vmount driver spamming with its own values to the topic and the formula which translates data wrong. If you switch vmount off (\"vmount stop\" command into a console) and correct the formula - DO_SET_SERVO will work as expected. And don't forget to load a mixer for AUX outputs.\r\n\r\n- **What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?**\r\nI think, this question is up to the one who builds and sets up the specific device. If you connects some critical stuff to the AUX - edit mixers or just don't use DO_SET_SERVO.",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T16:01:36Z",
          "body": "Made a flight, the log is here: https://logs.px4.io/plot_app?log=8fb644ab-1fe4-449a-9b0f-c4656fdae029#Nav-Actuator-Outputs-AUX\r\nThe mission was: \r\n- takeoff to 10 meters \r\n- DO_SET_SERVO on AUX1 1000 PWM \r\n- go to waypoint \r\n- DO_SET_SERVO on AUX1 2000 PWM\r\n- land \r\n- DO_SET_SERVO on AUX1 1000 PWM (example releasing cargo)\r\n- takeoff to 10 meters\r\n- RTL",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-08-27T18:57:12Z",
          "body": "@LorenzMeier my speaking english is not very good but I could try to join the devcall",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-05T14:11:09Z",
          "body": "@kpetrykin  I'm currently trying to get this to work I've used your commit. So I have my Pixhawk connected to a servo and I'm trying to get the servo to move within the mavproxy shell by running servo set 1 1000. However the message I keep getting back is that the command was acknowledged but is unrecognised (result:3) . I can get the servo moving using nuttx shell, but I really want to be able to send a mavlink command to set the servo pwm is there any way of doing this? ",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-09-05T23:19:26Z",
          "body": "@maitham1 It looks like the  MAV_CMD_DO_SET_SERVO is **set in missions** and handled here: \r\nhttps://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L424\r\n(FYI @bkueng  this is related to https://github.com/Dronecode/DronecodeSDK/issues/533)\r\n\r\nI can't find the message being handled outside of missions. While that does not mean it isn't, the fact that you're getting \"unrecognised\" is indicative. \r\n\r\nThere is quite a bit of discussion above about this. @dagar did the devcall come to any conclusions? Is there a short term recommendation on how people should approach this?\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-09-06T00:04:36Z",
          "body": "@dagar regarding https://github.com/PX4/Firmware/pull/10320#issuecomment-415903772 (your questions) there are some good points there. Below are \"in my opinion\". \r\n\r\n> Which servo does it correspond to? \r\n\r\nShouldn't this be defined at the MAVLink/message level by a convention? How about 1-n are the MAIN outputs as labeled on board, and n upwards are the AUX ports, if present? \r\n\r\n> What's supposed to happen in the not entirely unlikely scenario that that PWM channel is already used for something?\r\n\r\nIMO things screw up - it is up to the user of this tool to manage contention. See real use case below. \r\n\r\nDo we actually manage contention otherwise? ie does the system check that we don't have multiple control group inputs assigned to the same output?\r\n\r\n> What's the real use case for DO_SET_SERVO? \r\n\r\nThe real use case is probably the hardware we haven't thought about. Someone has some magic hardware that they want to drive, and a free port. They just want to be able to plug in that hardware and send it a command via MAVLink. They don't want to care about mixers. They are happy to manage contention themselves -  ie they know that nothing else is connected to the port, and if they screw up they screw up.\r\n\r\n> Would we be better implementing a couple higher level commands? payload, gripper, etc\r\n\r\nWe currently have [First Payload](http://dev.px4.io/en/concept/mixing.html#control-group-6-first-payload) which is just a parachute. Yes we should probably define something for a gripper. Not sure it will address the above use case.\r\n\r\nI've read http://dev.px4.io/en/concept/mixing.html and I am not 100% confident that my understanding of how these work is complete. I think that control groups are implemented as UORB topics that something can set (ie a controller). A mixer defines what actuators are set and their values based on these inputs. \r\n\r\nSo essentially you create a control group so that you can arbitrarily map a specific **type** of command to a physical output. For example to use a parachute you write a handler for it in MAVLink that sets the appropriate control group UORB topic. \"Something\" in the architecture then takes the mapping in the mixer file and based on that topic input sets the appropriate PWM output. Is that about right?\r\n\r\nThis is good because your system does not need to know what plugs into the output to implement a parachute or gripper (say). But it does mean that you need a mixer.\r\n\r\nQuestion: Are mixer's additive? Ie I have an airframe which uses the main outputs. I add a parachute. Do I need a completely new mixer file, or can I add my mixer just for my parachute?\r\n\r\nYou could implement this as a servo control group(s). But would be better if the mapping was transparent (ie no specific mixer required). \r\n",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-06T10:16:30Z",
          "body": "@maitham1 this PR is generally about mission's DO_SET_SERVO command.\r\nIt looks like if you want to pass it through mavlink it would not be handled.\r\nYou may experiment with writing your own handler somewhere here: https://github.com/PX4/Firmware/blob/039221fa93303a6840a45c3f8a72580aaaf2d74c/src/modules/mavlink/mavlink_receiver.cpp#L527\r\nOr you may assign an rc trigger for your servo and try to override it with mavlink message, but it is not a good way.\r\nAnd what do you want to do? What is your case?",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-06T10:43:34Z",
          "body": "@kpetrykin Thanks for getting back to me. I want to simply change pwm output from a script. \r\nCurrently I thought this would be possible via sending the MV_CMD_DO_SET_SERVO using pymavlink, \r\nit doesn't seem to be implemented, unless i'm missing something (which is highly likely as this is all new to me) but I'm open to other ways? ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-06T10:59:22Z",
          "body": "@maitham1 so what is your goal of using servo? What you try to do with this?\r\nAnd from what you send MAV_CMD_DO_SET_SERVO using pymavlink? Onboard computer?",
          "type": "issue_comment"
        },
        {
          "author": "maitham",
          "created_at": "2018-09-06T11:32:51Z",
          "body": "@kpetrykin I would like run certain tests to change servo positions, its a static test so nothings flying. I just want the ability to set servos to specific angles and motors to specific speeds within a python script. I don't intend to use it for flying. Its just for testing.\r\n\r\nSending MAV_CMD_DO_SET_SERVO using pymavlink! ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-09-25T11:07:11Z",
          "body": "So, @dagar, @LorenzMeier - what's with this PR? What could i do to improve it?",
          "type": "issue_comment"
        },
        {
          "author": "tubeme",
          "created_at": "2018-10-24T03:53:21Z",
          "body": "Hey @kpetrykin Can you share your mixer that you are using for the AUX channel? I'm trying to follow yur route but cannot make the mixer properly maybe. ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-10-24T09:28:11Z",
          "body": "@tubeme, sure, it's simple:\r\n\r\n```\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 0  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 1  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 2  10000  10000      0 -10000  10000\r\n\r\nM: 1\r\nO:      10000  10000      0 -10000  10000\r\nS: 2 3  10000  10000      0 -10000  10000\r\n```\r\nTo make it work:\r\n\r\n- Place a mixer into a /etc/mixers/pass.aux.mix on your pixhawk's SD card\r\n- Create /etc/extras.txt with the folowing command: `mixer load /dev/pwm_output1 /fs/microsd/etc/mixers/pass.aux.mix`",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-11-07T09:27:43Z",
          "body": "So, @tubeme, did you get the mixer to work?",
          "type": "issue_comment"
        },
        {
          "author": "GaoGeolone",
          "created_at": "2018-12-01T02:17:34Z",
          "body": "@kpetrykin How to make it work, bro?",
          "type": "issue_comment"
        },
        {
          "author": "bys1123",
          "created_at": "2018-12-01T05:59:52Z",
          "body": "Is there any new update?",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2018-12-03T10:29:35Z",
          "body": "@GaoGeolone what have you done already?\r\n@bys1123 no, it's still as it is",
          "type": "issue_comment"
        },
        {
          "author": "GaoGeolone",
          "created_at": "2018-12-04T03:20:49Z",
          "body": "@kpetrykin I think I have already make it work, thank you~I just want to trigger my servo at a certain position. And by making a change to the AUXMIXER pass file , as well as modifying the Formula in Mission_block.cpp.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-04T04:15:20Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-06T13:03:51Z",
          "body": "Hi @kpetrykin , I want to follow what you have done the flight for example takeoff, go to a waypoint and drop a cargo. Now, I am trying to follow and write a same mixer that you provide. But there are some questions that I want to ask:\r\n\r\nQ1) Why do we create a \"extrats.txt\" file  with a command line \"mixer load /dev/pwm_output1 /fs/microsd/etc/mixers/pass.aux.mix\" ?\r\nQ2) Where do we place this \"extrats.txt\" file ? same folder as our mixer file?\r\nQ3) How can we upload the mixer and this \"extrats.txt\" file into our Pixhawk's SDcard? via QGC?\r\nQ4) If QGC is needed, do we need to place these two file into our Firmware before uploading it? \r\n\r\nSorry for asking these silly questions. Thanks. \r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-06T21:25:14Z",
          "body": "@JamesChooWK The Extras.txt is documented here: https://dev.px4.io/master/en/concept/system_startup.html#customizing-the-system-startup\r\n\r\nIt is used for system startup customisations - basically you're adding the mixer at runtime rather than as part of the firmware build. This is much easier for examples, testing,  and when you're doing something that only applies to your setup. \r\n\r\nYou can copy the files onto the card using whatever mechanism you like - ie File explorer on windows. The files need to be present on the SD card before booting PX4. Again, they are not part of firmware, but are loaded as though they were.",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-07T19:36:25Z",
          "body": "@hamishwillee Thanks for answering my questions.  I manage to upload the mixer and Extras.txt file into MicroSD card. \r\n\r\nBut when I tried to push a DO_SET_SERVO command to pixhawk using mavros services(\"mavros/mission/push\") by assigning \"command=183\", it return this error (\" WP: upload failed: command is not supported\")\r\n\r\nI am not sure whether I use the DO_SET_SERVO in (\"mavros/mission/push\") correctly or I have to do it in (\"mavros/cmd/command\") or I have to use mavlink ?\r\n\r\nI am using MAVROS and PX4 native flight stack.\r\n\r\nMany thanks.",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-07T21:16:16Z",
          "body": "@JamesChooWK Did you incorporate this PR? It has the code that is supposed to support  DO_SET_SERVO",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-07T21:45:40Z",
          "body": "@hamishwillee  I am sorry I do not incorporate this PR, but I will do it. If I uses the new code, does it means that I have to build the firmware and load to pixhawk or I can copy the files and paste it into the SDcard like the mixer?\r\nI'm sorry to ask so many questions, I'm a newbie to these sort of things.",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2019-03-07T22:05:01Z",
          "body": "@JamesChooWK So the point of the PR is that the message doesn't work on PX4 right now (as far as I know - I'm guessing based on what I see here).\r\nSo yes, you will have to build PX4 firmware with the changes in this code and upload it as \"custom firmware\". There are conflicts between the changes and master branch, so you might need to do some coding to integrate them.\r\n\r\nAlso note this PR did not get accepted yet - so there is no guarantee that even if you do this it will work. ",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-08T09:14:52Z",
          "body": "@hamishwillee  I will try to amend the code and build the firmware, Thanks for the time answering my questions. Cheers. ",
          "type": "issue_comment"
        },
        {
          "author": "kpetrykin",
          "created_at": "2019-03-11T08:31:46Z",
          "body": "@JamesChooWK this PR does not contain code to accept DO_SET_SERVO from external sourses, it's about command from mission.\r\nIf you want to use external call of this command, you need to add a code to process a corresponding mavlink message.",
          "type": "issue_comment"
        },
        {
          "author": "JamesChooWK",
          "created_at": "2019-03-11T09:54:30Z",
          "body": "@hamishwillee  I will try to amend the code and build the firmware, Thanks for the time answering my questions. Cheers. ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR addresses clear logic errors: vmount continuously publishing to actuator_controls_2 was overwriting DO_SET_SERVO outputs (a data-flow/state conflict), and the PWM-to-normalized control formula in navigator did not match the inverse conversion (an incorrect mapping/algorithm). The changes stop vmount from spamming the topic unless RC changes occur and replace the wrong normalization formula, which directly fixes the unintended behavior."
  },
  {
    "title": "fix loiter yaw error for multirotor(#10262)",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10297",
    "number": 10297,
    "created_at": "2018-08-22T04:26:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "KeyneZzz",
      "body": "**Test data / coverage**\nbefore fix\nhttps://logs.px4.io/plot_app?log=58f3d121-cc66-4b11-9436-3ec3136b23c3\nafter fix\nhttps://logs.px4.io/plot_app?log=8a210ac9-fd87-4f63-8421-03a710e24153\n\nfixes #10262",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-09-16T23:00:53Z",
          "body": "@KeyneZzz could you explain why this is needed? I think the multicopter position controller should be handling yaw setpoints properly.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-09-17T07:07:44Z",
          "body": "In principle it should be possible to set `yaw` to NAN and then the vehicle should keep its heading (https://github.com/PX4/Firmware/blob/master/msg/position_setpoint.msg#L36). \r\nIn the case of loiter, I think that is what's happening:\r\n- yaw-setpoint is set to NAN (https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L604) with the intention that yaw is hold\r\n- in FlightTaskAuto, the heading is mapped as follow: \r\n  - Triplet yaw-flag is valid (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L201): the `yaw_setpoint` will be set to whatever triplet is, even if it is NAN. If the triplet has a finite yaw, then everything willl be handled as expected. If the triplet yaw is NAN (despite the valid yaw-flag), the the position-controller will set the yaw-setpoint to the current yaw (https://github.com/PX4/Firmware/blob/master/src/modules/mc_pos_control/PositionControl.cpp#L195)\r\n  - Triplet yaw-flag is not valid: the heading will be set according to `MPC_YAW_MODE`: https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L223-L277 where a yaw-lock is applied if the vehicle is within the acceptance radius\r\n\r\nBased on the above logic, I think one of the problems here is similar to https://github.com/PX4/Firmware/pull/10294, that  the yaw-valid-flag might be true, but the actual setpoint might still be infinite. \r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "KeyneZzz",
          "created_at": "2018-09-19T03:47:05Z",
          "body": "In my case, i'm not giving any yaw setpoint, but giving a yawspeed setpoint as 0.\r\nI'm not sure if the yaw-valid-flag stuff can solve the problem I met. But the changes I commited can be one of the valid ways to solve it.\r\n\r\nIn fact, my upper FC is always controlling the yaw by sending yawspeed setpoint.\r\nIs it better to use yaw_sp than to ues yawspeed_sp?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-10-30T14:52:03Z",
          "body": "@KeyneZzz Is this an extended fixed wing/vtol fix for https://github.com/PX4/Firmware/pull/10291?\r\n\r\n> better to use yaw_sp than to ues yawspeed_sp?\r\n\r\nFor holding the heading it's better to have a constant yaw setpoint because a yawspeed setpoint can in principle drift.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-16T16:09:13Z",
          "body": "Has this been resolved?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2019-01-29T09:49:18Z",
          "body": "Let's track if the issue was resolved in #10262. I don't think this pr would fix the root cause of the issue because of the same reasons that were already explained in https://github.com/PX4/Firmware/pull/10297#issuecomment-421909966",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR aims to address a loiter yaw symptom, but reviewers indicate the real issue is inconsistent handling of yaw validity/NaN and the difference between yaw setpoints vs yawspeed. Comments suggest this change is a workaround and likely does not address the root logic error (yaw-valid flag vs NaN handling), so it probably does not truly fix the underlying logic bug."
  },
  {
    "title": "navigator: set yaw_valid flag in reposition triplet",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10294",
    "number": 10294,
    "created_at": "2018-08-21T21:00:11Z",
    "merged": true,
    "merged_at": "2018-09-16T23:29:39Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "@dagar @MaEtUgR @Stifael I'm wondering if we need these flags. On one hand we allow the yaw setpoint to be set to NAN on the other hand we still require a valid flag to be set.\nAnd sometimes one means the other like here\nhttps://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L507\n\n@DonLakeFlyer @LorenzMeier FYI\n\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-22T06:38:40Z",
          "body": "@RomanBapst The fixed wing mission test failed.",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-22T06:48:52Z",
          "body": "> On one hand we allow the yaw setpoint to be set to NAN on the other hand we still require a valid flag to be set.\r\n\r\nI think what is missing is clear definition. In addition to NAN and the valid flags, Infinity is also used. ",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-08-26T09:58:29Z",
          "body": "@dagar Any idea what went wrong here? Is it one of those cases where you just need to restart it?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-08-26T09:59:51Z",
          "body": "@dagar From what I see it lost datalink connection. Are these simulations actually using the reposition commands?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-09-12T06:26:05Z",
          "body": "@dagar How do it get the ulog file from a CI run?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-09-16T23:02:28Z",
          "body": "Rebased on master.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an inconsistency between the yaw setpoint value (NaN/Infinity) and the corresponding yaw_valid flag in navigator reposition triplets. That mismatch can produce incorrect behavior (e.g. requiring a valid flag while the setpoint is NaN), so explicitly setting yaw_valid in the reposition triplet corrects the program state and fixes the logic error. Confidence is medium because the patch intent and discussion clearly point to a state/flag logic bug, though the actual diff is not shown here."
  },
  {
    "title": "Navigator: RC loss yaw mission item",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10291",
    "number": 10291,
    "created_at": "2018-08-21T16:17:09Z",
    "merged": true,
    "merged_at": "2018-08-21T19:05:56Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "Added yaw mission item to `rcloss` state in `navigator`. This fixes the issue mentioned #10262 where the vehicle yaws in a seemingly random direction when RC is lost.\n\n**Test data / coverage**\nCurrent behavior:\n![selection_001](https://user-images.githubusercontent.com/37091262/44412682-c3f8c180-a526-11e8-9941-05af1f521a36.png)\nProposed behavior with this PR:\n![selection_002](https://user-images.githubusercontent.com/37091262/44414401-ed1b5100-a52a-11e8-837a-d81ea6349acb.png)\nhttps://review.px4.io/plot_app?log=2e96b2de-f511-49c0-a51a-a34ba7cabc13",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:05:05Z",
          "body": "I didn't know anyone was actually using RC Auto Recovery.",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-08-21T22:52:01Z",
          "body": "Hmm I thought this fixed our problem... but it seems our problem does not happen every time. We are seeing the quad yaw to a random heading when we lose RC  (most of the time). I know this is not the intended behavior in the code, and I've tracked it down to this line. Seems flight_tasks.update() is failing when we lose RC. The vehicle does not actually descend though.\r\n`line 607 in mc_pos_controller_main.cpp`\r\n```\r\n// update task\r\nif (!_flight_tasks.update()) {\r\n\t// FAILSAFE\r\n\t// Task was not able to update correctly. Do Failsafe.\r\n\tfailsafe(setpoint, _states);\r\n\r\n} \r\n```",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-22T06:50:52Z",
          "body": "@MaEtUgR Yaw = NaN is used to signal \"do not change yaw\". Is this maybe not correctly handled in flight tasks?",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-10-30T14:03:25Z",
          "body": "@LorenzMeier For the vehicle_local_position_setpoints which are outputs of the flight task and input to the position control class NAN is defined as a state that has no setpoint and is therefore not controlled: https://github.com/PX4/Firmware/blob/master/msg/vehicle_local_position_setpoint.msg#L2\r\n\r\nIt seems that the navigator sets NAN to hold wherever that is documented and the FlightTaskAuto which handles the hold mode does not translate this correctly. This translation would need to happen here: https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L200\r\n\r\n**EDIT:** Or the meaning of a setpoint being NAN is handeled consistently and the fix is the one from this pr.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR makes the navigator supply an explicit yaw mission item during RC-loss instead of leaving yaw as NaN/unhandled, which was causing the vehicle to yaw to seemingly random headings. The change addresses incorrect state/setpoint handling that produced unintended behavior (random yaw) and the provided test plots show the behavior is corrected."
  },
  {
    "title": "mission:reset mission after finished",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10288",
    "number": 10288,
    "created_at": "2018-08-21T13:24:10Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "jinchengde",
      "body": "vehicle could reset mission after mission finished, change the flight mode to others and back to mission mode, no need disarm, the mission will reset.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:42:34Z",
          "body": "Great! This looks like a safe and simple way to do it.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-01T13:40:17Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-15T13:54:37Z",
          "body": "Closing as stale.\n",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2020-01-13T20:22:26Z",
          "body": "I realize this is old and closed, but after a recent conversation with @jinchengde and after thinking about this a lot, I think this proposed change makes a lot of sense.  @jinchengde I recommend you rebase and reopen this PR.  I can't comment intelligently on the code, but the functionality makes sense.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-21T19:46:59Z",
          "body": "We have to be a little careful here because other parts of navigator set the mission result as well.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-08-22T06:04:38Z",
          "body": "could you help to give some prompt which we need to protect, do we need to confirm vehicle in loiter mode before we reset the mission?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:51:49Z",
          "body": "@jinchengde we need to make sure that the next state after the mission ends does not crash the vehicle. Example: make sure the vehicle changes to HOLD or to LAND.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-11-26T09:52:37Z",
          "body": "OK，I will test for that, and I wish to have another PR for more modify",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "jinchengde",
          "created_at": "2018-12-01T12:48:20Z",
          "body": "@TSC21 I had test in SITL as below\r\n1. automatic takeoff and mission\r\n2. mission end, the vehicle start to circle around the last waypoint\r\n3. change the mode to hold, the vehicle stay current altitude and circle around\r\n4. change the mode to mission, the vehicle fly to the first waypoint\r\nso there is no crash after we change the mode after the mission ends",
          "path": "src/modules/navigator/mission.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an incorrect state transition where a completed mission could be unintentionally reset simply by switching flight modes (without disarming). Reviewer feedback indicates the change is a safe, simple fix to the mission reset logic, so this appears to correct an unintended behavioral bug rather than a style or syntax issue."
  },
  {
    "title": "Add mission reset",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10287",
    "number": 10287,
    "created_at": "2018-08-21T12:06:11Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "jinchengde",
      "body": "after the vehicle finish mission, change the flight mode to others and back to mission mode, the vehicle will reset the mission, no need to disarm vehicle",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses incorrect state handling: after a mission completes the mission index/state should be reset when switching out of and back into mission mode, but previously it only reset after disarming. This is a state-transition/logic fix that prevents unexpected mission behaviour when changing flight modes."
  },
  {
    "title": "Removed condition to move straight to RTL_LAND state.",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10252",
    "number": 10252,
    "created_at": "2018-08-16T21:24:54Z",
    "merged": true,
    "merged_at": "2018-08-16T22:08:47Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "Essentially this not only doesn't work after adding the `_navigator->get_position_setpoint_triplet()->current.valid` check (setpoints are invalidated when navigator changes nav state) but sometimes it DOES work and instead of landing where it is AT (i.e `gpos.lat` and `gpos.lon`) the lat/lon setpoints are `home.lat` and `home.lon`. This is extremely bad, the vehicle just beelines towards `home.lat`, `home.lon`, and `home.alt`.\n\nThis wasn't a problem previously when we were using the `mc_pos_controller` for all the control, as previously the logic for `SETPOINT_TYPE_LAND` within `mc_pos_controller` would just set the lat/lon setpoints to NaN, which then caused the controller to default those setpoints to the current gpos.lat/gpos.lon and just land where it is at. \n\nI hope this didn't impact anyone other than ourselves. We've seen it maybe 5 times total over the course of the last few weeks of consistent flying. I don't know why it sometimes \"works\" and sometimes does not. Either way it needs to be removed!",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-16T22:08:15Z",
          "body": "Thanks for following up and fixing it. We can find another way to accomplish the same (intended) result.",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-08-16T22:17:25Z",
          "body": "Of course. And yes, I think the logic belongs `commander` itself though.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR removes an incorrect conditional that caused the navigator to transition to an RTL_LAND state with invalid/current setpoints, which in some cases made the vehicle use home lat/lon instead of landing where it was. This is a logic bug (incorrect state transition / wrong setpoint handling) and the change restores the intended behavior of landing in place rather than beelining to home."
  },
  {
    "title": "Avoidance Feedback Rebased",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10240",
    "number": 10240,
    "created_at": "2018-08-15T15:21:26Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": " Based on #10037 \n\n- if the vehicle projected position on the line previous-current triplet is past the current triplet, acceptance radius is enlarged such that navigator updates the triplets\n- if the vehicle is within the xy acceptance radius but not inside the z one, enlarge the altitude acceptance radius such that navigator updates the triplets set the feedback yaw acceptance to NAN such that it is ignored by navigator\n\nMissions shouldn't get stuck anymore because a waypoint is not reachable or a waypoint is reached with a heading different from what navigator expects",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T07:49:38Z",
          "body": "@mrivi Could you please rebase one more time and check CI? Flash space is now resolved, so any remaining failures should be real.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T15:29:48Z",
          "body": "Why is this code here just commented out?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-17T15:12:10Z",
          "body": "@dagar how can we bring this in? Could we use this new message only for avoidance and then in a new PR use it for VTOL as well?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-19T09:34:16Z",
          "body": "@mrivi You are not filling the payload of the message but still publishing it below - is this intended?",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-19T14:52:02Z",
          "body": "This was from the original PR https://github.com/PX4/Firmware/pull/10037 where fw_pos_ctrl_status was being generalized. Some of these fields are straight copies of what also goes out in vehicle_attitude_setpoint, so I was going to drop them.\r\n\r\n\r\nLet's finish https://github.com/PX4/Firmware/pull/10037 and rebase.",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-20T13:57:51Z",
          "body": "@dagar I have rebased. ",
          "path": "src/modules/gnd_pos_control/GroundRoverPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes acceptance-radius and yaw-handling logic to avoid the navigator getting stuck on triplet updates (boundary/state transition conditions). It adjusts when the navigator advances waypoints (projected position past current, XY vs Z acceptance) and ignores yaw when appropriate, which addresses incorrect state transitions and boundary condition behavior — i.e., a logic bug."
  },
  {
    "title": "Accept onboard computer heartbeats as telemetry",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10194",
    "number": 10194,
    "created_at": "2018-08-08T15:37:33Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "okalachev",
      "body": "This PR solves #10042 problem, that `STATUSTEXT` messages are not passed, when there is no GCS.\nAlso, this is a partial implementation of #7985.\n\nI pass `telemetry_status`, when OBC heartbeats received, but I changed the commander logic, for not considering OBC as a datalink.\n\nSo `NAV_DLL_ACT`, `COM_DL_LOSS_T`, `COM_DL_REG_T` are only about GCS link, not OBC (not renaming for backwards compatibility).\n\nThe OBC failsafe params, like `NAV_OBC_DLL_ACT`, `COM_OBC_DL_LOSS_T`, `COM_OBC_DL_REG_T` can be added later.\n\n@LorenzMeier , @TSC21 .",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-08-08T15:42:07Z",
          "body": "This looks reasonable and can be extended for an OBC datalink failsafe after. Can you please rebase?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-08T16:02:03Z",
          "body": "@okalachev: http://ci.px4.io:8080/blue/organizations/jenkins/PX4%2FFirmware/detail/PR-10194/2/pipeline#step-205-log-1111",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T16:22:55Z",
          "body": "@TSC21 , thanks, I'll look.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:20:06Z",
          "body": "A few minor comments, but overall looks good.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:20:56Z",
          "body": "@TSC21 , I found the bug.\r\n\r\nThe problem starts, when multiple telemetry \"sources\" are on the same Mavlink instance, so this is the same `telemetry_status` topic instance, and the same \"telemetry\" in commander's `telemetry_data` array.\r\n\r\nSo, I don's see an easy solution yet, looks like a lot of telemetry logic should be changed.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T14:24:24Z",
          "body": "@okalachev that probably means we need a different `telemetry_status` topic instance for each of the telemetry sources. Probably multitopic is required.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:36:01Z",
          "body": "I guess the maximum number of topic instances are `ORB_MULTI_MAX_INSTANCES`, which is 4. But the number of telemetry \"sources\" that way would be something like 255 (systems) * 255 (systems' components).\r\n\r\nSo, maybe not to use multitopic for that. Instead, to add system and component ids to `telemetry_status`? ",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T14:39:52Z",
          "body": "> I guess the maximum number of topic instances are `ORB_MULTI_MAX_INSTANCES`, which is 4. But the number of telemetry \"sources\" that way would be something like 255 (systems) * 255 (systems' components).\r\n\r\nWell I was thinking on limit the telemetry sources based on type and not on sys+comp id. But I guess that would make more sense yes. Can you propose that in a new issue as a RFC? Probably better to have a discussion about it first before one commits to it.",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-09T14:58:37Z",
          "body": "You mean to write an RFC for adding sys and comp ids to `telemetry_status`?\r\n\r\nI'm not sure this is so large change to make an RFC.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-08-09T15:00:39Z",
          "body": "> I'm not sure this is so large change to make an RFC.\r\n\r\nIt's a conceptual/structural change/feature that needs to be discussed.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-08-16T16:35:59Z",
          "body": "Could you please rebase? Thanks!",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-16T16:45:27Z",
          "body": "Unfortunately, it doesn't make sense for now, because this change introduces a new bug, that I described in previous messages.\r\n\r\nI don't see an easy solution yet, without rewriting `telemetry_status` logic.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:07:19Z",
          "body": "@okalachev what's the status of this? Have you thought of a way of bringing this into a state that does work?",
          "type": "issue_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-11-25T21:18:52Z",
          "body": "@TSC21, sorry, unfortunately I haven't worked at this yet. The easy workaround is to send fake GCS heartbeats from ROS code. The conversation can be continued at https://github.com/PX4/Firmware/issues/10042.\r\n\r\nThis PR can be closed I guess, as the implementation is incorrect.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-25T21:25:52Z",
          "body": "The PR is not totally incorrect. It's rather incomplete. But I accept that we can bring a more complete solution in a new PR. Please fill free to close it or maybe we can iterate from here.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T14:53:20Z",
          "body": "Revisiting this idea - https://github.com/PX4/Firmware/pull/10933",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-02-26T15:27:57Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-03-12T16:13:01Z",
          "body": "Closing as stale.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:18:31Z",
          "body": "Is there any reason we can't drop this check entirely now?",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 8,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-08T18:19:25Z",
          "body": "How about ground control instead of GCS?",
          "path": "src/modules/commander/state_machine_helper.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T21:15:23Z",
          "body": "What if there is a heartbeat from another drone (in a swarm network), charging station, or any other device? Should it be considered as a telemetry link?\r\nI don't think so.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 8,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-08-08T21:15:59Z",
          "body": "I don't see a huge difference, but I can change it.",
          "path": "src/modules/commander/state_machine_helper.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR attempts to change how OBC heartbeats are treated (marking them as telemetry but not as a datalink) to forward STATUSTEXT without a GCS, but the author discovered it creates a new logic bug: multiple telemetry sources share the same telemetry_status instance so telemetry_data gets conflated. The author and reviewers conclude the implementation is incomplete/incorrect and would require reworking telemetry_status (or adding IDs), so this PR does not correctly fix the logic error."
  },
  {
    "title": "Smooth auto desired vel",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10193",
    "number": 10193,
    "created_at": "2018-08-08T12:02:53Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "Stifael",
      "body": "Please use [PX4 Discuss](http://discuss.px4.io/) or [Slack](http://slack.px4.io/) to align on pull requests if necessary.\r\n\r\n**Test data / coverage**\r\nLogs uploaded to http://logs.px4.io or screenshots.\r\n\r\n**Describe problem solved by the proposed pull request**\r\nA clear and concise description of the problem, if any, this feature will solve. E.g. I'm always frustrated when ...\r\n\r\n**Describe your preferred solution**\r\nA clear and concise description of what you have implemented.\r\n\r\n**Describe possible alternatives**\r\nA clear and concise description of alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots for the feature request here.\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR contains only a title ('Smooth auto desired vel') and empty template text with no code changes, explanation, or discussion. There is no evidence in the provided description or comments that a specific incorrect behavior or logic was identified or fixed, so we cannot conclude it addresses a logic error."
  },
  {
    "title": "[WIP] Avoidance feedback",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10180",
    "number": 10180,
    "created_at": "2018-08-07T12:37:54Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": "Branch based on #10013 plus #10037 cherry-picked on top. \n- if the vehicle projected position on the line previous-current triplet is past the current triplet, the acceptance radius is enlarged such that navigator updates the triplets\n- if the vehicle is within the xy acceptance radius but not inside the z one, enlarge the altitude acceptance radius such that navigator updates the triplets\n- set the feedback yaw acceptance to NAN such that it is ignored by navigator\n\nMissions shouldn't get stuck anymore because a waypoint is not reachable or a waypoint is reached with a heading different from what navigator expects",
      "issue_comments": [
        {
          "author": "mrivi",
          "created_at": "2018-08-15T15:22:11Z",
          "body": "Closing this in favor of #10240 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The changes adjust waypoint acceptance logic (enlarging xy/z acceptance radii and ignoring feedback yaw) to prevent the navigator from getting stuck when a waypoint is effectively reached but not accepted due to strict acceptance/heading checks. That addresses incorrect state transitions and boundary-condition logic that cause missions to stall. The PR was marked WIP and later closed in favor of another branch, so intent is clear but final implementation details are uncertain."
  },
  {
    "title": "uORB: update msgs fields from camelCase to snake_case",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10077",
    "number": 10077,
    "created_at": "2018-07-29T20:41:28Z",
    "merged": true,
    "merged_at": "2018-07-30T19:40:29Z",
    "state": "closed",
    "conversation": {
      "author": "TSC21",
      "body": "**Describe problem solved by the proposed pull request**\nIn the process of developing a ROS2 package that will be interfacing PX4 with ROS2 through fast-RTPS, I found out that while trying to building the package with the respective ROS msg generation, `rosidl_generate_interfaces()` does not process msg fields which have uppercase letters.\n\n**Describe your preferred solution**\nThis is an harmless PR which changes some message fields that have uppercase letters (or present a camelCase naming convention) so `rosidl_generate_interfaces()` is able to generate code for ROS IDL files. It basically replaces the uppercase with lowercase, and where required, change the naming convention to snake_case.\n\n**Describe possible alternatives**\nNot really much more we can do about it, unless one changes the copied file online during the build process, which is not really efficient.",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-07-29T20:46:10Z",
          "body": "Also, after this gets merged, I think it will make sense to actually have something like a schema validator for uORB msgs, so that we can make sure every new fields that is added follows the same convention (does make much sense to have fields following different naming conventions). This validator would run on CI as a new job, parallel to the style check job for example.\r\n@dagar any thoughts?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:02:42Z",
          "body": "Anything from the ROS world that already solves this problem?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:07:03Z",
          "body": "> Anything from the ROS world that already solves this problem?\r\n\r\nNo. This is actually a requirement for the message generation through ROS IDL generator python scripts.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:16:55Z",
          "body": "Will be issuing a PR against Flight Review so to address these changes as well.",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:49:17Z",
          "body": "Changes on Flight Review addressed in https://github.com/PX4/flight_review/pull/123.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-29T21:50:33Z",
          "body": "@TSC21 Can you add a change that breaks the build if someone re-introduces this? Like a check in the Python generator for PX4 uORB messages?",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-29T21:53:24Z",
          "body": ">@TSC21 Can you add a change that breaks the build if someone re-introduces this? Like a check in the Python generator for PX4 uORB messages?\r\n\r\n@LorenzMeier that's what I was actually referencing here https://github.com/PX4/Firmware/pull/10077#issuecomment-408704710. @dagar believes that clang-tidy could possibly handle this if we actually generate the headers and then do the check against those. Would that be a better alternative to a check in the Python generator?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-30T08:25:45Z",
          "body": "@TSC21 Let's keep it simple so we can merge this: Extend our message generator and throw an error please. I don't want this to start depending on something else and we drag it out weeks.\r\n\r\nThanks!",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-30T14:54:08Z",
          "body": "@LorenzMeier done",
          "type": "issue_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-07-30T20:25:34Z",
          "body": "@LorenzMeier thanks for merging. This does unblock the package development.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:10:41Z",
          "body": "@CarlOlsson did you have opinions about the naming of these fields? If so we might as well tackle that here quickly.",
          "path": "msg/tecs_status.msg",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-29T21:11:27Z",
          "body": "@bresch, @RomanBapst, @tstastny, @philipoe, @acfloria - anyone feel strongly about the naming of these fields?",
          "path": "msg/tecs_status.msg",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes incorrect behavior where ROS IDL generation failed or produced wrong output because message fields used camelCase/uppercase letters that the generator does not accept. Converting fields to snake_case (and adding a generator check to prevent regressions) corrects the message definitions so the build/generation behaves as intended."
  },
  {
    "title": "Land: fix on_active() so mission finishes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10046",
    "number": 10046,
    "created_at": "2018-07-26T00:29:25Z",
    "merged": true,
    "merged_at": "2018-07-26T05:45:01Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nVerified that the mission can actually finish using a print statement and running a test in gazebo.\n\n**Describe problem solved by the proposed pull request**\nNot a problem per se, but it is indeed a bug with `land` from the perspective of a mission. \n\n**Describe your preferred solution**\nUse the function available to us `_navigator->get_land_detected()` to verify that we have indeed landed. The previous implementation was looking for  `is_mission_item_reached()`, which was unreachable because during land the mission item altitude set point was being set to absolute zero.",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error: the mission completion used is_mission_item_reached() which is unreachable when the land setpoint altitude is zero, so missions never finished. Replacing that check with _navigator->get_land_detected() corrects the conditional/termination logic so landing is properly detected and the mission can finish."
  },
  {
    "title": "RTL: If already landing, go straight to RTL_LAND",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10044",
    "number": 10044,
    "created_at": "2018-07-25T20:59:44Z",
    "merged": true,
    "merged_at": "2018-07-26T05:46:26Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nTested issuing a `land` command followed by an `rtl` command in gazebo. Vehicle continues to descend as expected.\n\n**Describe problem solved by the proposed pull request**\nRTL interrupts a land. This is an issue if an operator is trying to land the vehicle and a critically low battery triggers an RTL. We have seen many times the vehicle takeoff back into the air (RTL) when it is about to touch down for landing.\n\n**Describe your preferred solution**\nDo not allow RTL to `CLIMB` if already `position_setpoint_s::SETPOINT_TYPE_LAND`\n\n_I also cleaned up the comments, removed unnecessary includes, and got rid of namepacing_",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-25T22:07:54Z",
          "body": "We actually have to be a little careful here that the current position setpoint is still valid. The other option which might be safer overall is to go straight into RTL land if transitioning from the LAND navigation state.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-26T05:46:21Z",
          "body": "Thanks, perfect!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-25T22:05:47Z",
          "body": "This should be okay if you also check `current.valid`.",
          "path": "src/modules/navigator/rtl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes the RTL state transition logic to avoid climbing when the vehicle is already in a LAND setpoint, preventing an incorrect state transition that would abort an in-progress landing. This directly fixes unintended behavior (taking off again on RTL) caused by improper navigation/state transition logic."
  },
  {
    "title": "Takeoff: Arm occasionally triggers `maybe_landed`",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10043",
    "number": 10043,
    "created_at": "2018-07-25T20:02:09Z",
    "merged": true,
    "merged_at": "2018-07-26T05:49:15Z",
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "**Test data / coverage**\nhttps://review.px4.io/plot_app?log=42ef1074-1762-4a6d-9861-bb0ec3a9ec38\n![takeoff](https://user-images.githubusercontent.com/37091262/43223873-b4b6c390-9011-11e8-9402-eb6985511e7b.png)\n\n\n**Describe problem solved by the proposed pull request**\nVery rarely (1 out of 20) an `arm` command will kick the **`land_detector`** into the  _`maybe_landed`_ state due to the torque from the props. This will cause the vehicle to fail to takeoff. I added the log statement (RESETTING TAKEOFF TO POSITION) at line 524 in `mission_block.cpp` which confirms that land detector thinks we are no longer `landed`.\n\n**Describe your preferred solution**\nCheck that  the vehicle is not  _`maybe_landed`_ as well as not _`landed`_ upon takeoff.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-07-26T05:49:10Z",
          "body": "Thanks! I believe I have experienced these as well with vehicles with longer legs.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR fixes a state-handling bug: transient torque during arming can drive the land detector into a 'maybe_landed' state and cause the takeoff logic to behave incorrectly. The change ensures the takeoff checks consider 'maybe_landed' as well as 'landed', preventing an incorrect state transition that prevented takeoff."
  },
  {
    "title": "generic position controller status/feedback message",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10037",
    "number": 10037,
    "created_at": "2018-07-25T14:34:37Z",
    "merged": true,
    "merged_at": "2018-08-31T18:43:53Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Not done, but should give you an idea.\n\nTODO\n - yaw acceptance (+ error threshold?)\n - z acceptance could come from the position controller\n - eliminate as much vehicle specific code from navigator as possible\n - consider vtol usage for back transition\n - stopping distance (loiter/rtl/geofence braking)",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-26T12:53:34Z",
          "body": "TODO: vtol implications (multi topic).",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-19T16:51:14Z",
          "body": "Ok I think this is everything we need right now. Needs testing and review.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-23T18:15:41Z",
          "body": "@dagar can we get this PR tested?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-25T14:46:21Z",
          "body": "@PX4/testflights could you test this branch on FW or VTOL (must transition to FW)? The test should include at least a couple waypoints. ",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-08-28T23:00:38Z",
          "body": "pr tested on v3 fw\r\nhttps://review.px4.io/plot_app?log=851676a3-f71a-419f-b253-2d5aa822c350\r\nhttps://review.px4.io/plot_app?log=54f1fa1b-25c3-405d-b673-3ea058310f2a\r\nhttps://review.px4.io/plot_app?log=9586fcb4-e87a-4d51-860d-6ca7b709ef45\r\nhttps://review.px4.io/plot_app?log=aa094d9e-68d5-4c01-bf55-22f6a790d1a0",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-29T03:39:52Z",
          "body": "Thanks @dannyfpv \r\n\r\nI did a little more testing in SITL and everything looks good except for a small regression in FW landing abort behaviour that I'll have fixed shortly.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-30T18:03:41Z",
          "body": "@dagar have you made any progress?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-30T19:39:53Z",
          "body": "@mrivi good to go.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-08-31T08:53:39Z",
          "body": "@dagar do we need more tests or can we merge directly?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-31T13:24:22Z",
          "body": "We can merge, but let's wait for master to be unbroken (https://github.com/PX4/Firmware/pull/10379). ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "mrivi",
          "created_at": "2018-08-21T07:14:55Z",
          "body": "`yaw_acceptance` should be feedback into navigator, right? From #10240,  dc99bb088ad9c1a1b28a0db22e00a896bc9355d6",
          "path": "msg/position_controller_status.msg",
          "position": 14,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-08-25T14:43:37Z",
          "body": "Yes.",
          "path": "msg/position_controller_status.msg",
          "position": 14,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "Looks fine in general. I'd like comments what the items in the message mean and what their units are.",
          "state": "DISMISSED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR appears to introduce a new generic position controller status/feedback message and related refactor/features rather than correcting an existing incorrect behavior. The discussion and tests mention validation and a small regression to be fixed separately, but there is no explicit indication that this change resolves a logic bug (incorrect condition/state/algorithm) in the codebase."
  },
  {
    "title": "Yaw remove slewrate",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10003",
    "number": 10003,
    "created_at": "2018-07-23T13:37:17Z",
    "merged": true,
    "merged_at": "2018-08-03T06:24:35Z",
    "state": "closed",
    "conversation": {
      "author": "Stifael",
      "body": "Similar to this [PR](https://github.com/PX4/Firmware/pull/9146) but without manual changes. \nThis PR moves the heading computation from navigator to FlightTaskAuto, which will also remove\nthe continuous triplet update due to heading computation.",
      "issue_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-07-23T13:48:18Z",
          "body": "it is to note that during any ROI mission without gimbal control/rotation, the heading will still continuously be updated by the navigator",
          "type": "issue_comment"
        },
        {
          "author": "ChristophTobler",
          "created_at": "2018-07-24T06:49:45Z",
          "body": "@Stifael Should we wait for https://github.com/PX4/Firmware/pull/10006 first?",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-07-24T06:52:45Z",
          "body": "> @Stifael Should we wait for #10006 first?\r\n\r\nyep, that makes sense. #10006 wasn't there when I created this PR",
          "type": "issue_comment"
        },
        {
          "author": "ChristophTobler",
          "created_at": "2018-08-02T09:11:19Z",
          "body": "@Stifael Do we need additional flight tests?",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-02T09:21:23Z",
          "body": "@PX4/testflights can you please test this PR with different heading settings? \r\nIt would be great to test this branch with a vtol / fixedwing as well.\r\n\r\nHeading settings are controller with: MPC_YAW_MODE",
          "type": "issue_comment"
        },
        {
          "author": "Tony3dr",
          "created_at": "2018-08-02T14:54:19Z",
          "body": "@Stifael did you mean MIS_YAWMODE to control heading during a mission?\r\n",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T15:01:09Z",
          "body": "flashed the pr, i see MPC_YAW_MODE appears in 'other' parameters\r\nwould the value be similar to MIS_YAWMODE?\r\nValues:\r\n0: Heading as set by waypoint\r\n1: Heading towards waypoint\r\n2: Heading towards home\r\n3: Heading away from home",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-02T15:21:58Z",
          "body": "similar: \r\n 0 towards waypoint\r\n 1 towards home\r\n 2 away from home\r\n 3 along trajectory\r\n\r\nSet by waypoint  got removed because if will take precedence over MPC_YAW_MODE. Basically if the mission sends a valid yaw waypoint, then the vehicle will obey that yaw waypoint independent of MPC_YAW_MODE/. ",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T15:26:40Z",
          "body": "thanks for the info, will test shortly",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-08-02T17:57:09Z",
          "body": "**Some flights with pixhawk 4 (V5). Good flights, heading towards waypoint**\r\n\r\nhttps://review.px4.io/plot_app?log=3b1aaa4c-e1df-4a54-811d-1ec7de1270d1\r\nhttps://review.px4.io/plot_app?log=3b1aaa4c-e1df-4a54-811d-1ec7de1270d1\r\nhttps://review.px4.io/plot_app?log=a448d8cb-8654-4596-9d0a-4dae924b78f1\r\n\r\n**Some flights with pixhawk 2.1 (V3). Good flights, heading towards waypoint**\r\nhttps://review.px4.io/plot_app?log=83616e27-9612-4a71-a2a1-f732edf072cb\r\nhttps://review.px4.io/plot_app?log=ea02ff15-43e9-4733-8ff9-f1c92b383257\r\nhttps://review.px4.io/plot_app?log=ea02ff15-43e9-4733-8ff9-f1c92b383257\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-08-02T18:12:35Z",
          "body": "couple flights on a Pixhawk pro (v4):\r\nhttps://review.px4.io/plot_app?log=97f18520-5fd9-4b17-a425-1118e0e051f9\r\nhttps://review.px4.io/plot_app?log=b70f9c01-9a71-4098-943c-98b2862ac486\r\n\r\npixhawk mini:\r\nhttps://review.px4.io/plot_app?log=ef395dc6-785b-4295-97cf-423577d80b74\r\nhttps://review.px4.io/plot_app?log=bafc63ea-e1c2-4b5b-8aa2-e22b7272809b\r\n\r\npixhawk v2\r\nhttps://review.px4.io/plot_app?log=d73899c2-2087-4f62-98fe-0ced68ca7c38\r\nhttps://review.px4.io/plot_app?log=d73899c2-2087-4f62-98fe-0ced68ca7c38\r\nland and rtl working properly\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "santiago3dr",
          "created_at": "2018-08-02T19:48:02Z",
          "body": "Few flights on a pixracer (v4)\r\nmcp_yaw_mode set to 0,1,2,3 respectively per flight\r\n\r\nhttps://logs.px4.io/plot_app?log=aec9e42c-94e9-4b3d-ac34-53113de5a712\r\nhttps://logs.px4.io/plot_app?log=a062494e-114c-4024-b42e-0b006afabc1f\r\nhttps://logs.px4.io/plot_app?log=80fd9e14-0219-47ea-8f0d-ae9f97535b0a\r\nhttps://logs.px4.io/plot_app?log=d14d154f-22b3-442e-b06c-b1dbf8290c1f\r\n\r\neverything looks to be working as expected",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-08-03T06:24:30Z",
          "body": "great thanks",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "ChristophTobler",
          "created_at": "2018-08-02T09:08:12Z",
          "body": "typo: points",
          "path": "src/lib/FlightTasks/tasks/FlightTaskAuto.cpp",
          "position": 56,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "ChristophTobler",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes where heading is computed (from navigator to FlightTaskAuto) to stop continuous heading triplet updates that were being generated by the navigator. That is a behavioral/logic fix (state/update location and precedence of yaw commands) and multiple flight tests reported correct heading behavior, supporting that the incorrect continuous update logic was resolved."
  },
  {
    "title": "Missions: ignore waypoint yaw when avoidance is active",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9880",
    "number": 9880,
    "created_at": "2018-07-11T17:12:51Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": "@dagar  @LorenzMeier @thomasgubler \n\nThis is a sketch of  what we discussed in the dev call. If the avoidance is active and healthy the flag `_waypoint_yaw_reached ` is always set to true.",
      "issue_comments": [
        {
          "author": "mhkabir",
          "created_at": "2018-07-12T03:56:07Z",
          "body": "General question - why should we disregard yaw when in avoidance mode? ",
          "type": "issue_comment"
        },
        {
          "author": "nicovanduijn",
          "created_at": "2018-07-12T05:54:56Z",
          "body": "@mhkabir The navigator usually checks whether the aircraft arrives in the direction from the previous mission item. When in avoidance mode, this is not necessarily true, because there may have been a detour that causes it to fly along a path other than the straight line connecting the two mission items",
          "type": "issue_comment"
        },
        {
          "author": "thomasgubler",
          "created_at": "2018-07-12T07:22:00Z",
          "body": "@nicovanduijn Can you test this? I think you were the one that could reproduce the error symptoms most consistently.",
          "type": "issue_comment"
        },
        {
          "author": "nicovanduijn",
          "created_at": "2018-07-12T08:07:22Z",
          "body": "I'll test this, but cherry-picked onto #9270, since anything else doesn't make sense (If you're not flying OA in mission mode, this has no effect)\r\n\r\nEdit: @thomasgubler I've been running it a few times and it looks good so far. Never seen the problem of mission items not getting checked off so far. This is by no means exhaustive testing though",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-12T08:25:54Z",
          "body": "I didn't put it on top of the avoidance PR because I thought that's going to be merged soon. So it doesn't makes sense to add things and void all the testing done so far.\r\nThe goal was to show what can be achieved easily and discuss the architecture more concretely. I am quite aware that this PR alone doesn't do anything (it doesn't even compile)",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-13T07:01:00Z",
          "body": "Since #9270 got merged, I have rebased this PR on top of master",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-24T11:41:13Z",
          "body": "I have added he proposal from last week dev call:\r\nIf the vehicle projected position on the vector previous-current triplet is past the current triplet or if no progress towards the goal is made for 10 seconds, `_waypoint_position_reached` is set to true which forces the triplet update.\r\n\r\nThis is a proposal to start the the discussion.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-07-26T11:59:20Z",
          "body": "Closing this PR, because the final solution will be based on #10037 . The decision to update the triplet will be take in the position controller and feed it back to navigator thorough uORB. ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "thomasgubler",
          "created_at": "2018-07-12T07:20:34Z",
          "body": "is it a good pattern to return pointers to private members? I see the same on lines below and above so it might not be something that should be fixed in this PR",
          "path": "src/modules/navigator/navigator.h",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-12T15:49:16Z",
          "body": "I believe almost all of these can be changed to return const references fairly easily.",
          "path": "src/modules/navigator/navigator.h",
          "position": 13,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an incorrect navigation condition where waypoint completion required a specific yaw even when obstacle avoidance caused a detour, preventing mission items from being checked off. The change forces the yaw-reached flag when avoidance is active (and also adds progress/timeouts to advance triplets), which directly corrects that flawed logic; reviewers report successful tests, though the final implementation was moved to a different PR."
  },
  {
    "title": "Navigator: Fix fixed-wing first order altitude hold",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9850",
    "number": 9850,
    "created_at": "2018-07-06T15:52:20Z",
    "merged": true,
    "merged_at": "2018-07-16T03:54:09Z",
    "state": "closed",
    "conversation": {
      "author": "philipoe",
      "body": "**Issue**\r\nNavigator's fixed-wing first-order altitude hold (FOH) is currently causing altitude reference oscillations when in any LOITER mode. See screenshot below. Not only altitude, but also pitch and throttle can thus oscillate significantly. We observed this during a recent test flight.\r\n\r\n![image](https://user-images.githubusercontent.com/2565608/42387985-53c6343e-8144-11e8-86d2-a42aecc4c5c0.png)\r\n\r\n\r\nLog file from SITL where this can be seen: https://review.px4.io/plot_app?log=f18c45ab-622e-4b1d-9819-03cfb06af2b5 . Here, after t=3:20 the true altitude setpoint is still the same as before t=2:20 (i.e. 630m AMSL) but the FOH logic just wrongly sets it to 660m and adds slight oscillations on top. The exact amount of oscillations depends on waypoint distance, altitude difference etc, but i have seen altitude ref oscillations of up to 30m, resulting in full pitch up/down of the aircraft.\r\n\r\n**Analysis**\r\nSee the commit for the location of the code where this is happening. Essentially, every time that the loiter radius of any loiter WP is larger than the acceptance radius calculated from the L1 turn distance, then the Navigator FOH would _not_ consider the waypoint reached and would thus not stop modifying the current altitude setpoint. This leads to the oscillations or offsets in the altitude reference. \r\n\r\n**Solution**\r\nIf in any loiter mode, consider the loiter radius times a factor of 1.2 (same as for the waypoint_reached logic [here](https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L217) as the acceptance radius. Tested in SITL, which should be sufficient for this case.\r\n\r\n@acfloria @ryanjAA @antiheavy FYI\r\n@dagar Made this PR as a quick hotfix independently of your PR at https://github.com/PX4/Firmware/pull/8883/files which supposedly also fixes this but is much larger and where it is more uncertain when this would be merged.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-07-06T15:55:52Z",
          "body": "This actually needs a little thought to review. There are a few situations where the position setpoint type and mission_item type are not the same. ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T16:12:36Z",
          "body": "I can of course also check for `(_mission_item.nav_cmd == NAV_CMD_LOITER_UNLIMITED ||\r\n\t\t\t    _mission_item.nav_cmd == NAV_CMD_LOITER_TIME_LIMIT))` if you prefer that... just let me know.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T16:53:41Z",
          "body": "If you can do it entirely from the position setpoint (ignoring mission_item) it should effectively avoid the edge cases (LOITER_TO_ALT, mission work items, etc).",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T17:09:20Z",
          "body": "So you'd also want to use `acc_rad = _navigator->get_acceptance_radius(fabsf(pos_sp_triplet->current.loiter_radius) * 1.2f);` instead of using the mission item loiter radius?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T17:29:28Z",
          "body": "Yes, but drop the mission_item entirely and do a quick skim of the entire altitude_sp_foh_update() to make sure nothing is dependant on the mission item. This is one of the reasons I wanted to move it to the position controller. Multicopter skips this thing entirely.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-06T21:19:54Z",
          "body": "> Yes, but drop the mission_item entirely and do a quick skim of the entire altitude_sp_foh_update() to make sure nothing is dependant on the mission item. This is one of the reasons I wanted to move it to the position controller. Multicopter skips this thing entirely.\r\n\r\nI'll can do this tomorrow if you can't get to it.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-06T21:58:12Z",
          "body": "> I'll can do this tomorrow if you can't get to it.\r\n\r\nSure, I guess you know exactly how you'd like to do it. Let me know if i should retest it afterwards then.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-16T01:29:51Z",
          "body": "> Sure, I guess you know exactly how you'd like to do it.\r\n\r\nNot really, I just see a number of subtle edge cases that make me uncomfortable.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-07-16T03:52:19Z",
          "body": "I played around with this a bit, but there's still another (small) possible hole when the mission item nav_cmd is out of sync with the current position setpoint type.\r\n\r\nLet's merge this now, but work on moving it to the position controller soon. From there it's much easier to safely handle the altitude ramp or hand off between loiter <-> position without fighting to plug numerous holes.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "Possibly not 100% correct in all situations to mix _mission_item and position_setpoints here.",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error where the fixed-wing FOH kept modifying the altitude setpoint because the waypoint-reached test used an L1-based acceptance radius and thus failed to mark large loiter waypoints as reached, producing oscillations. The change to use the loiter radius (with the existing 1.2 factor) corrects the boundary/conditional check and eliminates the incorrect continued altitude adjustments; reviewers note minor edge cases but confirm the fix is appropriate."
  },
  {
    "title": "ROI bugfix and improved precision",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9781",
    "number": 9781,
    "created_at": "2018-06-27T15:00:22Z",
    "merged": true,
    "merged_at": "2018-08-06T14:17:12Z",
    "state": "closed",
    "conversation": {
      "author": "potaito",
      "body": "## The ROI all-zeros bug\r\n\r\nWhen transmitting a mission with QGC, occasionally the ROI waypoints are broken in the sense that the ROI lat/lon is set to `(0.0, 0.0)`. Some digging showed that this only happens when the `MAV_CMD` used to send the mission is in INT mode. The reason is the conversion  from `mavlink_mission` to `mission_item`. In INT mode the latitude and longitude need scaling:\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/mavlink/mavlink_mission.cpp#L1282-L1294\r\n\r\nHowever, further down when setting the ROI parameters for LAT/LONG/ALT, the conversion is missing and the values are simply copied (cast) regardless of `_int_mode`:\r\n\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/mavlink/mavlink_mission.cpp#L1355-L1363\r\n\r\nA proposed fix is in the first commit.\r\n\r\n### Reproducing the issue:\r\nThe bug occurs only when the vehicle already has a mission loaded, with is removed in QGC, and then a new mission is sent containing the ROI. I am not sure why in one case INT mode is used, and in another case it's not...\r\n\r\n## ROI waypoint floating-point precision\r\nLooking at the situation with @MaEtUgR and @julianoes, we noticed that some precision is lost when using the parameter fields (float) of the vehicle message to store/access the ROI latitude and longitude (param 5 and param6):\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/navigator/mission_block.cpp#L445-L463\r\n\r\nInstead, we can just as well use the mission item's latitude and longitude, which are `double`s instead of `float`s:\r\nhttps://github.com/PX4/PX4-Autopilot/blob/bb8e653469e67afb43dbb9ecf3899cf50ef6162f/src/modules/navigator/navigation.h#L135-L153\r\n\r\nThe proposed fix is in the second commit, making the other commit redundant. \r\n\r\n------\r\n\r\n@julianoes Please take a look :)",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2018-07-26T07:32:29Z",
          "body": "@julianoes Could you review the changes? :)",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-07-26T16:06:18Z",
          "body": "Now there are conflicts :cry: \r\nI'll take care of it. ",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-08-06T09:28:29Z",
          "body": "@julianoes Conflicts resolved. They were caused by this commit: https://github.com/PX4/Firmware/commit/cf741668018f17cae47180064ebe2cfd2c9de214#diff-7a824e3d1e9a5420071c8c9bbe27b8e7R455\r\n\r\nWith the changes in this PR there is no conversion required, since the `lat` and `lon` fields are already `double` types:\r\nhttps://github.com/PX4/PX4-Autopilot/blob/e989c80205e22d11e5346bda3d11f90cdf294dfc/src/modules/navigator/navigation.h#L135-L137",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-08-06T09:54:06Z",
          "body": "```\r\n/usr/local/opt/ccache/libexec/c++  -DCONFIG_ARCH_BOARD_SITL -DMODULE_NAME=\\\"navigator\\\" -DPX4_MAIN=navigator_app_main -D__DF_DARWIN -D__PX4_DARWIN -D__PX4_POSIX -D__STDC_FORMAT_MACROS -Dnoreturn_function=\"__attribute__((noreturn))\" -I. -Isrc -Isrc/lib -Isrc/modules -I../../src -I../../src/drivers/boards/sitl -I../../src/include -I../../src/lib -I../../src/lib/DriverFramework/framework/include -I../../src/lib/matrix -I../../src/modules -I../../src/platforms -I../../platforms/posix/include -Iexternal/Install/include -I../../src/lib/ecl -g -fno-exceptions -fno-rtti -std=gnu++11 -fno-threadsafe-statics -DCONFIG_WCHAR_BUILTIN -D__CUSTOM_FILE_IO__ -Wall -Wextra -Werror -Warray-bounds -Wdisabled-optimization -Wdouble-promotion -Wfatal-errors -Wfloat-equal -Wformat-security -Winit-self -Wlogical-op -Wmissing-declarations -Wpointer-arith -Wshadow -Wuninitialized -Wunknown-pragmas -Wunused-variable -Wno-implicit-fallthrough -Wno-missing-field-initializers -Wno-missing-include-dirs -Wno-unused-parameter -Qunused-arguments -Wno-unused-const-variable -Wno-varargs -Wno-address-of-packed-member -Wno-unknown-warning-option -Wunused-but-set-variable -Wno-overloaded-virtual -Wreorder -fvisibility=hidden -include visibility.h -fno-strict-aliasing -fomit-frame-pointer -fno-math-errno -funsafe-math-optimizations -ffunction-sections -fdata-sections -fcolor-diagnostics -O2 -g -DNDEBUG   -fno-strict-aliasing -fomit-frame-pointer -fno-math-errno -funsafe-math-optimizations -ffunction-sections -fdata-sections -fcolor-diagnostics -std=gnu++11 -MD -MT src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o -MF src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o.d -o src/modules/navigator/CMakeFiles/modules__navigator.dir/mission_block.cpp.o -c ../../src/modules/navigator/mission_block.cpp\r\n\r\n../../src/modules/navigator/mission_block.cpp:462:18: fatal error: implicit conversion increases floating-point precision: 'const float' to 'double' [-Wdouble-promotion]\r\n\r\n                        vcmd.param5 = item.params[4];\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-08-06T12:43:19Z",
          "body": "fixed",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2018-06-28T06:38:34Z",
          "body": "I thought here we lose the accuracy yet again but I was wrong.\r\nhttps://github.com/PX4/Firmware/blob/18abeb1118f3db8e4012d290e1b8dc5d0883333a/msg/vehicle_command.msg#L105-L106",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T06:41:34Z",
          "body": "So here we might as well use `item.alt` to be consistent, right?",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T06:51:54Z",
          "body": "True, didn't realize that thanks to the `union` the two fields actually occupy the same bytes. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T06:52:05Z",
          "body": "Right, those two params are the exception. Apparently they are meant for LAT/LON storage :)",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T07:51:37Z",
          "body": "Oh funny.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2018-06-28T07:51:46Z",
          "body": "Yep.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "potaito",
          "created_at": "2018-06-28T08:09:29Z",
          "body": ":heavy_check_mark: ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "julianoes",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "julianoes",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR corrects incorrect data handling logic: a missing INT-mode scaling/conversion caused ROI lat/lon to be interpreted as (0.0, 0.0) in some mission transmissions, and using float param fields caused precision loss. The changes restore the proper conversion for INT-mode coordinates and switch to using the mission item's double lat/lon to preserve precision, which fixes the unintended ROI behavior."
  },
  {
    "title": "Land enhancement",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9772",
    "number": 9772,
    "created_at": "2018-06-26T19:07:03Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dakejahl",
      "body": "This PR fixes two problems with _Land_. See #9691 & #9768\n\n**Problems**\n1. _Land_ can cause vehicle to flip upon land if the command was issued while the vehicle was moving quickly. \n\n2. _Land_ descent velocity was only **MPC_LAND_SPEED**. \n\n\n**Solutions**\n1. Vehicle will return to LAT/LON location where the _Land_ command was issued and begin descending from there. In the future, I want to implement a **_BRAKE_** setpoint type, but this is a good fix until that work is done.\n\n2. The vehicle now respects MPC_LAND_ALT1 and MPC_LAND_ALT2 to control descent velocities.\n\nI have simulation tested and physically flight tested this on our quadcopter and have seen no problems. I would love if someone could please test this with a fixed wing aircraft to verify. \n\nPlease let me know if you have any questions, thanks!\nJake",
      "issue_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-06-27T15:27:06Z",
          "body": "Have you checked that `land` still works during failsafe and no local position available?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T16:47:03Z",
          "body": "@Stifael Behavior in **_mc_pos_control_main.cpp_** remains the same if there is no local position.\r\n```\r\n\t\tif (abs(_local_pos.z) > _slow_land_alt1.get()) {\r\n\t\t\t_vel_sp(2) = _vel_max_down.get();\r\n\r\n\t\t} else if (abs(_local_pos.z) > _slow_land_alt2.get()) {\r\n\t\t\tfloat velocity_scaling = (abs(_local_pos.z) - _slow_land_alt2.get()) / (_slow_land_alt1.get() - _slow_land_alt2.get());\r\n\t\t\t_vel_sp(2) = _land_speed.get() + velocity_scaling * (_vel_max_down.get() - _land_speed.get());\r\n\r\n\t\t} else {\r\n\t\t\t_vel_sp(2) = _land_speed.get();\r\n\t\t}\r\n```\r\n\r\nDoes a failsafe event override navigator modes?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T16:50:53Z",
          "body": "Actually, the way the code is _currently_ it seems like if local position was lost it would never make it into the first `if` statement for `land`\r\n\r\n```\r\n\tif (_pos_sp_triplet.current.valid\r\n\t    && _pos_sp_triplet.current.type == position_setpoint_s::SETPOINT_TYPE_LAND) {\r\n```",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T22:43:57Z",
          "body": "@dagar ",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-06-28T05:53:06Z",
          "body": "@dakejahl with your changes, the first stages are not of type `SETPOINT_TYPE_LAND`, they are of type `SETPOINT_TYPE_POSITION` (https://github.com/PX4/Firmware/pull/9772/files#diff-7a824e3d1e9a5420071c8c9bbe27b8e7R643). \r\nHave you tried in SITL to do fast forward flight and then turn of GPS?",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-28T17:26:43Z",
          "body": "@Stifael _\"Have you tried in SITL to do fast forward flight and then turn of GPS?\"_\r\n\r\nJust tested this, does not work. Thanks for the advice! Let me see what I can do. I am going to try to implement the braking feature in `mc_pos_control`. If I can't get this to work I will try to make it work from `navigator`. I'll report back once I have something. :grin:\r\n",
          "type": "issue_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-06-29T05:54:18Z",
          "body": "a break would also be helpful for this \"feature\" request: https://github.com/PX4/Firmware/issues/9741#issuecomment-399912835",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-29T18:10:29Z",
          "body": "Please see #9804",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "MaEtUgR",
          "created_at": "2018-06-27T11:52:06Z",
          "body": "This whole block is duplicating the existing functionality: https://github.com/PX4/Firmware/blob/master/src/modules/mc_pos_control/mc_pos_control_main.cpp#L2439-L2443\r\nDid it not work correctly for you?",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 6,
          "type": "review_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-06-27T14:57:02Z",
          "body": "Look at the one liner that I removed.\r\n\r\n _vel_sp(2) = _land_speed.get();\r\n\r\nClearly this is overriding the current Z vel setpoint when the setpoint type is LAND.\r\n\r\nAlso, always limiting veritial velocity based upon height does not seem right. Those parameters are specified with the word 'LAND' and thus should only affect flight characteristics while in the LAND mode (this is my opinion).",
          "path": "src/modules/mc_pos_control/mc_pos_control_main.cpp",
          "position": 6,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "The position controller changes are in my eyes duplicate.",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR targets incorrect landing behavior (vehicles flipping when a fast-moving Land command is issued) and wrong descent-speed logic (only using MPC_LAND_SPEED). Those are classic logic errors and the changes explicitly alter setpoint/velocity logic to address them. However, reviewers report and the author confirms an unresolved edge-case around setpoint types and loss of local position/failsafe (possible regression), so while it fixes the stated logic bugs it is not fully validated for all failure modes."
  },
  {
    "title": "mission feasibility: add small tolerance to fw landing slope alt",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9753",
    "number": 9753,
    "created_at": "2018-06-24T09:14:25Z",
    "merged": true,
    "merged_at": "2018-06-29T12:10:54Z",
    "state": "closed",
    "conversation": {
      "author": "tstastny",
      "body": "Once sent from QGC to pixhawk, the fixed-wing landing pattern coordinates are again converted to local distances for feasibility checks, where small floating point errors can cause a rejection -- and the need to modify and resend the waypoints (somewhat tedious on the field). This PR simply adds a small tolerance to the check condition to avoid this.\n\n(also open to recommendations on the value of this tolerance, I just put 1m for now)\n\nPartially addresses #9472.",
      "issue_comments": [
        {
          "author": "tstastny",
          "created_at": "2018-06-26T07:20:48Z",
          "body": "@dagar @LorenzMeier ok to merge? or any other thoughts?",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-29T10:50:40Z",
          "body": "@dagar @LorenzMeier LGTM given that all checks have passed?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses a boundary-condition logic bug where tiny floating-point conversion errors caused valid fixed-wing landing patterns to be (incorrectly) rejected by feasibility checks. Adding a small tolerance to the comparison prevents false negatives due to precision errors, which is a correct logical fix for this unintended behavior."
  },
  {
    "title": "[WIP] mission_result split into mission_status and navigator_status",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9747",
    "number": 9747,
    "created_at": "2018-06-23T03:03:24Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "The navigator message `mission_result` has become overloaded to contain both general navigator status, mission feasibility, and mission status. This has resulted in some confusion in both logs and usage from commander.\n\nThis PR splits mission_result into a general navigator_status message, and a mission_status that's specific to the planned dataman stored mission.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-23T12:51:56Z",
          "body": " - fixes https://github.com/PX4/Firmware/issues/9746\r\n - possibly fixes https://github.com/PX4/Firmware/issues/9515 (TBD)",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-01-20T04:33:43Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2019-01-20T15:29:39Z",
          "body": "this PR is still valid, or at least the part the tries to fix this current bug:  https://github.com/PX4/Firmware/issues/9746",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-05T21:08:38Z",
          "body": "Needs to be rebased badly.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-10-13T17:18:05Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-10T17:51:22Z",
          "body": "Closing as stale.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses an overloaded navigator message (mission_result) that mixed general navigator status, mission feasibility, and mission-specific state — a classic logic/state-reporting error that can cause incorrect behavior and confusion in other modules (e.g. commander). Splitting the message into navigator_status and mission_status corrects the improper conflation of states and should resolve the unintended/ambiguous behavior, although the change is marked WIP/stale and would need rebasing/merging to fully take effect."
  },
  {
    "title": "Mission feasibility checker remove 2/3rds distance warnings that don't reject a mission",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9743",
    "number": 9743,
    "created_at": "2018-06-22T15:04:55Z",
    "merged": true,
    "merged_at": "2018-06-23T14:39:23Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Could we review the need for these mission feasibility distance warnings? In practice they can be problematic.\n\n![image](https://user-images.githubusercontent.com/84712/41783807-cf8db7c0-760b-11e8-9718-e162f3b479e1.png)\n\nDo we even need these warnings PX4 side? I think of the mission feasibility checker as the last line of defence for loading something bogus. If we also want it to return helpful warnings it needs a better interface.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-23T13:12:35Z",
          "body": "Yes, we need them. Mostly because people are stupid and produce fly-aways by “fat finger planning”.\r\n\r\nTime again for the events interface discussion.\r\n\r\nIn the meantime I would just increase the distance considerably. Most of the times people hit a completely wrong location many miles away, not something close. That is what we want to prevent.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-23T13:39:34Z",
          "body": "Actually I'm only talking specifically about the warnings that are 2/3rds of the error. I don't have a problem with the feasibility checker rejecting a mission that actually exceeds the parameter value. What I don't see is the value in a mavlink critical warning when the mission is still going to be accepted.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-23T14:21:26Z",
          "body": "Fair!",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-23T14:39:29Z",
          "body": "Thanks for the review.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR removes or adjusts warning-level checks that trigger at two-thirds of a distance threshold but do not cause mission rejection. This is a user-facing behavior/UX change to avoid misleading warnings rather than fixing incorrect program logic that produces wrong acceptance/rejection or state; the core feasibility logic (rejecting missions that exceed the parameter) remains unchanged."
  },
  {
    "title": "Fixed-wing autoland improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9698",
    "number": 9698,
    "created_at": "2018-06-16T11:02:49Z",
    "merged": true,
    "merged_at": "2018-08-24T14:13:08Z",
    "state": "closed",
    "conversation": {
      "author": "philipoe",
      "body": "Fixed-wing autoland seems quite suboptimal at the moment. We have had very mixed results during flight tests so far, i.e. while on small foamy-like platforms or when landing on huge runways you may not have any issues, on short-field landings with larger and more complex (e.g. different flap configurations, wide airspeed range) platforms in challenging environments you will definitely see the shortcomings of the current autoland. This PR therefore introduces some improvements:\n\n### Improvements\n\n1. **Airplane landing configuration activated during loiter down (commit 2448863)**\n_Issue_: The landing configuration (i.e. setting the flaps and changing the airspeed from nominal to landing speed) was previously performed only when entering the final approach, i.e. at relatively low altitude above ground (15m is a good rule). In our flight tests, the flap and airspeed changes caused huge altitude errors (+5m), and the aircraft corrected by pitching down significantly and nearly slamming into the ground (alos because the integrators can wind up). This is extremely unsafe. _Solution_: The mode change (flaps, airspeed) is now performed when approaching the loiter-down WP, i.e. usually at much higher altitude of 50m+. The discontinuity is of course still there, but it happens at an altitude where it is safe and the controller (especially the integrators) still have plenty of time to adapt to this new configuration.\n\n2. **Separate and tigther gains for landing (commit 2448863)**\n_Issue_: To avoid motor wear and to allow a good flight efficiency, one usually wants to somewhat relax the TECS throttle time constant (FW_T_THRO_CONST). However, the alt/airspeed control may then not accurate enough for landings anymore. _Solution_: Introduced a throttle time constant scaling factor which is ONLY activated during landings (and loiter-down-to-landing) and is 100% by default such that it doesnt make a difference by default. Note that I am still debating a bit whether we should introduce even more landing-specific parameters (for example, the pitch setpoint offset FW_PSP_OFF changes quite a lot with flaps on our platform), but tried to reduce the amount of additional parameters in this PR. Any thoughts on that?\n\n3. **Tighter altitude acceptance radius for landings (commit https://github.com/PX4/Firmware/commit/d8cc40c67c521ef35cf74d41ee28b7adb8fe0c11)**\n_Issue_: Currently, the final decision on whether to enter the landing approch or not uses the standard altitude acceptance radius parameter for fixed wings (see [here](https://github.com/PX4/Firmware/blob/master/src/modules/navigator/mission_block.cpp#L255). This parameter is 10m by default, and we often set it to 20m because at higher altitudes it just does not matter. This is however not accurate enough for autolandings: Imagine you want to enter the landing approach at hAGL=15m, then the plane would still initiate the autoland at hAGL=5m...25m. Very unsafe and potentially not even feasible for the plane due to sink/climb rate constraints! _Solution_: A \"relative\" altitude acceptance radius, i.e. we assume a 30% error w.r.t. the remaining altitude difference to the landing waypoint can still be handled by the plane. Assuming hLandingApproach=15m, this means 4.5m of altitude acceptance radius. We of course constrain the altitude acceptance radius (see code).\n\n4. **ALWAYS flare when close to the ground (commit https://github.com/PX4/Firmware/commit/02e380af538ea8ef80a433da8fa63f63ed7601fb)**\n_Issue_: During previous flight testing, we were surprised to _sometimes_ see nice flares from the aircraft and sometimes not (i.e. the aircraft just impacted the ground with nominal sink speed of 0.5-0.8m/s). We always thought it is a tuning issue, but turns out it is also because the airplane _only_ flares when it is horizontally close enough to the landing waypoint. This can a) mean that the aircraft (e.g. simply due to errors in the altitude control) never really flares or b) that it will always flare at different altitudes AGL, so the impact velocity is always different. _Solution_: ALWAYS flare when close to the ground, thus guaranteeing a smooth landing in all cases. Note that the motor still _only_ shuts off when we are close to the land WP such that, e.g. if a downdraft pushed the aircraft too close to the ground, the aircraft still continues to fight that downdraft using the motor.\n\n### Notes\n - These are simple effective fixes that make autoland better without changing its overall structure. I know it can be improved a lot, but I think implementing these improvements as a first-shot solution is very important.\n - This was discussed with @dagar already. @priseborough @tstastny @LorenzMeier I am looking for feedback on why the changes I propose would NOT be suitable/better than the current implementation (or what could be improved quickly and effectively without changing the overall code too much)\n - Tested extensively in HIL already, i.e. that all mode changes and parameter changes work. The final tests (both HIL + flight testing) will be performed after feedback from you guys and the respective code changes.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:52:38Z",
          "body": "@antiheavy FYI",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:14:49Z",
          "body": "Some great ideas here.  We do a lot of fixed wing landings with our 2kg class flying wing and would be excited to test some of this.  Here are some initial comments:\r\n\r\n\r\n\r\n> Airplane landing configuration activated during loiter down\r\n\r\nI couldn't tell how this works from your code link.  My concern is how are you handling generic landing pattern use cases beyond the QGC built in landing pattern?  For example, people often manually plan a box-type landing pattern with traditional downwind, base, and final approach segments, they might place additional waypoints along the way to control the altitude, and place a DoLandStart command and the front of this to define it as the landing pattern in the mission. \r\n\r\nAlternate approaches to the \"integrators fighting flaps problem\" might include:\r\n- a slew rate parameter to slow down flap deployment allowing time for the integrators to adjust, this has the added benefit of allowing the roll integrator time to adjust to inadvertent differential flap deployment rates too.\r\n- a feed-forward type parameter for the pitch offset similar to what you mentioned.\r\n\r\n\r\n\r\n> Separate and tigther gains for landing\r\n\r\nYes!  I think something along these lines would be of great benefit to manage landing energy.  Might also consider some soft of pitch gain and maybe roll gain scaling. \r\n\r\n\r\n\r\n\r\n> Tighter altitude acceptance radius for landings\r\n\r\nI like the goal here, but I have concerns on the implementation.\r\n\r\nDo I correctly understand that the hard coded 30% value will be constrained to not exceed NAV_FW_ALT_RAD?  I think it is important that the hard coded 30% value doesn't inadvertently exceed the normal waypoint acceptance distances.\r\n\r\nMy bigger concern here is what is the behavior if the altitude is missed?  does the vehicle do a turn-around to try to get back to the waypoint? This could be very bad in the case where someone has placed a waypoint to start the final descent at low altitude very close to the Land waypoint (below trees, etc).  I see that you hard coded a 3m minimum, but even that is very difficult for most fixed wings to actually achieve.  I'm not sure the right answer here, but maybe instead of hard coding 30% there should be a separate parameter for landing approach WP vertical error, different from NAV_FW_ALT_RAD?\r\n\r\n\r\n\r\n> ALWAYS flare when close to the ground\r\n\r\nI agree we should get rid of the distance from land waypoint thing for Flare.  However, I'm unsure about the throttle piece you've added.  There is already a FW_LND_TLALT parameter which I feel should be respected no matter what (e.g. we don't want throttle kicking in when very close to the ground in case of propeller strike, etc).",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-17T00:06:45Z",
          "body": "@dagar @antiheavy thanks for your feedback! I adapted the code, see the comments. Answers to some remaining questions below.\r\n\r\n>>Airplane landing configuration activated during loiter down\r\n\r\n>I couldn't tell how this works from your code link. My concern is how are you handling generic landing pattern use cases beyond the QGC built in landing pattern? For example, people often manually plan a box-type landing pattern with traditional downwind, base, and final approach segments, they might place additional waypoints along the way to control the altitude, and place a DoLandStart command and the front of this to define it as the landing pattern in the mission.\r\n\r\nGeneric landing patterns which do NOT involve a LOITER_TO_ALT waypoint before the final approach are handled exactly as before. So they still work, but do not profit from improvement 1 (like activating flaps + different airspeed earlier) in this PR. Two potential solutions:\r\n\r\n1. Just check whether the next_wp is a NAV_LAND WP independently of whether the curr_wp is a LOITER_TO_ALT WP. I am a bit concerned about cases like curr_wp=takeoff and next_wp=land however. So one would need to really carefully look for potentially dangerous corner cases.\r\n2. Alternatively, one could use the DO_LAND_START mission item to trigger the landing configuration. However, this is a mission item that is only known to NAVIGATOR (as far as i know), so we cannot handle this in the FixedWingPositionControl. And even _if_ we had the DO_LAND_START information where we need it, the question is still: What happens if a user forgets to set a DO_LAND_START mission item -> The same as if he does not use the LOITER_TO_ALT waypoint, i.e. the landing is still going to work but is not going to benefit from the improvements above.\r\n\r\n_General note:_ I really feel like a loiter-to-alt is _the_ waypoint type to use before an approach because it guarantees that _both_ your altitude _and_ heading are perfectly (within the acceptance tolerances of course) aligned with the landing approach. We also used the \"downwind, base...\" approaches before but always placed a loiter-to-alt (just a semi-circle, which does not even need to involve altitude changes btw.) directly before the landing approach because of the advantages mentioned above. \r\n\r\n>Alternate approaches to the \"integrators fighting flaps problem\" might include: a slew rate parameter to slow down flap deployment allowing time for the integrators to adjust, this has the added benefit of allowing the roll integrator time to adjust to inadvertent differential flap deployment rates too.\r\n\r\nDepends. If you start flap deployment at the same time as before (i.e. when entering the landing approach) but just deploy the flaps slower, then this is actually worse because you are shifting the time when the flaps are fully deployed even closer to the ground. So doing these configuration changes as early as possible is the way to go (unless you have a model-predictive controller or similar feed forwards).\r\n\r\n\r\n>>Tighter altitude acceptance radius for landings\r\n\r\n>I like the goal here, but I have concerns on the implementation. Do I correctly understand that the hard coded 30% value will be constrained to not exceed NAV_FW_ALT_RAD? I think it is important that the hard coded 30% value doesn't inadvertently exceed the normal waypoint acceptance distances.\r\n\r\nCorrect.\r\n\r\n> My bigger concern here is what is the behavior if the altitude is missed? does the vehicle do a turn-around to try to get back to the waypoint? This could be very bad in the case where someone has placed a waypoint to start the final descent at low altitude very close to the Land waypoint (below trees, etc). I see that you hard coded a 3m minimum, but even that is very difficult for most fixed wings to actually achieve. I'm not sure the right answer here, but maybe instead of hard coding 30% there should be a separate parameter for landing approach WP vertical error, different from NAV_FW_ALT_RAD?\r\n\r\nWith the QGC fixed-wing landing pattern (or a manually-set loiter-to-alt WP) the vehicle just does one other turn in the loiter circle. This is perfectly safe. For a standard waypoint, the airplane may turn back to track that WP, yes. But again, standard WPs don't seem optimal for me there: If you don't hit the altitude acceptance, then the airplane will do crazy stuff, so you have to set a large NAV_FW_ALT_RAD to avoid this -> This then however means that the landing approach altitude is potentially very inaccurate, which is again unsafe. So it's _only_ a tradeoff between two potentially dangerous situations! The much cleaner way is to use loiter-to-alt WPs. Still, i could of course also live with using an additional landing-altitude-acceptance-radius parameter (the disadvantage there concerns the _scale_ of your problem: So say for a landing approach from 15m AGL a 5m altitude acceptance radius might be fine, but if you then land from 100m AGL then 5m altitude acceptance radius is overly tight because your vehicle could easily compensate for say up to 30m altitude error during the landing approach -> This is exactly the reason for using the 30% relative acceptance altitude). Maybe @dagar can comment on what general Pixhawk fixed-wing users would prefer?\r\n\r\n>>ALWAYS flare when close to the ground\r\n\r\n> I agree we should get rid of the distance from land waypoint thing for Flare. However, I'm unsure about the throttle piece you've added. There is already a FW_LND_TLALT parameter which I feel should be respected no matter what (e.g. we don't want throttle kicking in when very close to the ground in case of propeller strike, etc).\r\n\r\nI did not change the throttle behavior at all! The limitation that throttle is NOT being cut off by the autoland logic when we are too far way from the waypoint was already there before, and i somewhat understand the reason for having it there: Of course, there is a certain risk of a propeller strike close to the ground, but if you deactivate that throttle too early you might not only loose your propeller but your whole plane. There is the tradeoff again ;) Note that the land-detector will shut down the throttle _after_ landing, so at least that is somewhat safe.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T17:37:45Z",
          "body": "@philipoe A couple more questions:\r\n\r\n1) what happens if the vehicle flies very high/long past the Land waypoint, but has not yet begun to flare?  Will the flare still happen?  How will throttle behave in this scenario?\r\n\r\n2) Do I understand the following statement correctly? \r\n - \"A tighter exit criteria tolerance of 30% of the landing height applies only in the case when there is a Loiter-to-Alt waypoint followed by a Land waypoint?  This is limited between 3 meters and NAV_FW_ALT_RAD\"\r\nIf so, I think that is okay as long as that special case gets documented appropriately.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T19:51:22Z",
          "body": "> what happens if the vehicle flies very high/long past the Land waypoint, but has not yet begun to flare? Will the flare still happen? How will throttle behave in this scenario?\r\n\r\nIf you pass the landing waypoint at an altitude that is much higher than FW_LND_FLALT, then, just as before, it is not going flare above the landing WP but only later should it descend to FW_LND_FLALT. Of course externally there might be some go-around logic that triggers, i'd need to check that later.\r\n\r\n> \"A tighter exit criteria tolerance of 30% of the landing height applies only in the case when there is a Loiter-to-Alt waypoint followed by a Land waypoint? This is limited between 3 meters and NAV_FW_ALT_RAD\"\r\nIf so, I think that is okay as long as that special case gets documented appropriately.\r\n\r\nNo, as it is implemented right now this tighter acceptance radius applies for _every_ waypoint type which is followed by a NAV_LAND waypoint type. This can of course be changed. But where do you see the advantage of using standard WPs instead of loiter-to-alt WPs (or: The QGC standard fixed-wing landing pattern)? I guess the question we had before, i.e. whether to use either the relative \"30% of the remaining descent altitude\" rule or introducing a separate parameter is another question for @dagar .",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T20:56:23Z",
          "body": "> as it is implemented right now this tighter acceptance radius applies for every waypoint type which is followed by a NAV_LAND waypoint\r\n\r\nAh, well my concern here is exactly what you said previously: \"...If you don't hit the altitude acceptance, then the airplane will do crazy stuff...\".   I like your tighter criteria when using loiter-to-alt waypoints prior to NAV_LAND because, as you pointed out, it we behave predictably and safely.  I'm concerned about the use case when a normal waypoint is used prior to NAV_LAND and the vehicle may not behave predictably and safely.\r\n\r\n\r\n\r\n> where do you see the advantage of using standard WPs instead of loiter-to-alt WPs\r\n\r\nWhen landing in areas that have rows of trees, power lines, or other challenges that do not allow good use of the standard QGC Landing Pattern.  We use the standard QGC landing pattern 95% of the time, but we also need safe and predictable landing behavior for the cases when we need to use Box patterns or custom patterns to avoid trees, etc.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T21:01:25Z",
          "body": "> When landing in areas that have rows of trees, power lines, or other challenges that do not allow good use of the standard QGC Landing Pattern. We use the standard QGC landing pattern 95% of the time, but we also need safe and predictable landing behavior for the cases when we need to use Box patterns or custom patterns to avoid trees, etc.\r\n\r\nWhich means that you define safe as \"do not do crazy maneuvers in the horizontal direction\", but you do not care as much (or have a platform that has a lot of robustness) about the vertical direction, right?",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-18T21:05:25Z",
          "body": "> Which means that you define safe as \"do not do crazy maneuvers in the horizontal direction\", but you do not care as much (or have a platform that has a lot of robustness) about the vertical direction, right?\r\n\r\ncorrect.  I mean, of course I would want both, but horizontal/lateral variability is worse than vertical/longitudinal variability.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T21:26:06Z",
          "body": "> correct. I mean, of course I would want both, but horizontal/lateral variability is worse than vertical/longitudinal variability.\r\n\r\nOK, i feel like handling all waypoint types before a NAV_LAND wp the same is more important than saving one parameter and having this \"dynamic\" calculation ... so if @dagar has nothing against that I will introduce a separate land altitude acceptance parameter that is then going to apply to every single landing approach. ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-19T00:50:24Z",
          "body": "@philipoe is there a thought that maybe loiter-to-alt waypoints could have a tighter altitude acceptance than normal waypoints in general?  I mean they are special in the way that their altitude is a specific part of what they are.\r\n\r\nAlternately, what if you kept the dynamic calculation and improved the fixed wing behavior if the vehicle missed a normal waypoint?  e.g. auto-abort the landing?  I generally dislike auto-aborted landings, but that would be better than \"do crazy things\" in this case.\r\n\r\nI really like your goal here, and I would totally use a dynamic tighter acceptance criteria for our loiter-to-alt landings if the safe behavior problem with other waypoints could be solved.\r\n\r\nEven if you make a separate vertical tolerance parameter for the waypoint before the NAV_LAND, we will need to set that tolerance large because the behavior will still be bad if a normal waypoint is used and it misses.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-19T04:23:04Z",
          "body": "What happens in instances where the setup is for flaps trigger airbrakes (ailerons)? That’s how we have it set up and my concern would be if you are not able segregate only the flaps (which I believe is currently the case), you’d inadvertently end up with crow being deployed which would be a problem at any altitude given the added drag. Ran into this on full wing flaps (which also could be something great for landing very slowly [or heavy]). \r\n\r\nReally like what you’ve done here. We have planes flying autoland flights daily and while it works well as is, more granularity to tune further or even more so having something more robust is great. We’ll get testing on this soon and we definitely see the pitch up when flaps are deployed. ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T17:50:52Z",
          "body": "> Alternately, what if you kept the dynamic calculation and improved the fixed wing behavior if the vehicle missed a normal waypoint? e.g. auto-abort the landing? I generally dislike auto-aborted landings, but that would be better than \"do crazy things\" in this case. I really like your goal here, and I would totally use a dynamic tighter acceptance criteria for our loiter-to-alt landings if the safe behavior problem with other waypoints could be solved.\r\n\r\nOptimizing the behavior after the waypoint was reached can be quite involved. I therefore disabled the dynamic acceptance radius calculation again and introduced a separate altitude-acceptance-before-landing parameter (NAV_FW_ALTL_RAD). This should solve your issues as it gives you full configurability for your autolands.\r\n\r\n>What happens in instances where the setup is for flaps trigger airbrakes (ailerons)? That’s how we have it set up and my concern would be if you are not able segregate only the flaps (which I believe is currently the case), you’d inadvertently end up with crow being deployed which would be a problem at any altitude given the added drag. Ran into this on full wing flaps (which also could be something great for landing very slowly [or heavy]).\r\n\r\nThe flaps (and thus your drag-producing airbrakes) will _only_ trigger earlier with this PR _if_ you use a loiter-to-alt WP before the landing. Given that loiter-to-alt is effectively used to burn your excess altitude the additional drag should not matter. Standard WPs before a landing will not trigger your airbrakes, so you won't have a problem.\r\n\r\n@Antiheavy @ryanjAA @dagar Is this OK with the last fixes/commits that I made or is there any concerns left on your side? If so, then i will do extensive testing tomorrow, you guys could then also test if you like and we can then merge afterwards.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T18:17:10Z",
          "body": "@philipoe just so i'm clear, loiter to alt would also include (or basically also is) fixed wing landing pattern? We have to enable airbrakes and keep them quite highly engaged (lots of drag) to simply slow down so we cant fly with them on, full throttle I suppose might keep it there in calm conditions but it really is like throwing a drag chute out the back when they activate. Maybe we are an edge case scenario but any high aspect ratio wing that inherently will tip stall makes me worry about inducing that much drag while banking. I am worried about either that or having tecs have to near full throttle it to keep it in the air to then shut it back down quickly (ramp up and down). Again, might work in calm conditions but we'd essentially be eliminating the available power overhead budget for windy situations if near full throttle due to airbrakes out. Yesterday comes to mind, we were flying in 12-15 m/s winds and on the landing pattern, there was plenty of overhead to speed up in a hurry during pattern land but remove that ability and now we're close to the ground and going to have a much higher probability of not being able to avoid a stall.\r\n\r\nDon't get me wrong, i really like this since we spend the vast majority of the time setting and testing autolanding up under different scenarios, I'm just trying to highlight some issues I can see. I think we need to simply segregate the _att_sp.apply_flaps = true flag from putting on the airbrakes which will also take some thought on the mixer side of things but overall, if people are always stuck with flaps and airbrakes then more creative things like you're doing are going to have potential unforeseen flaws.\r\n\r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T19:43:56Z",
          "body": "> @philipoe just so i'm clear, loiter to alt would also include (or basically also is) fixed wing landing pattern? \r\n\r\nWhen we talk about QGC, then fixed-wing landing pattern = 1) loiter-to-alt + 2)landing waypoint.\r\n\r\n> We have to enable airbrakes and keep them quite highly engaged (lots of drag) to simply slow down so we cant fly with them on, full throttle I suppose might keep it there in calm conditions but it really is like throwing a drag chute out the back when they activate. Maybe we are an edge case scenario but any high aspect ratio wing that inherently will tip stall makes me worry about inducing that much drag while banking.\r\n\r\nI am not sure i completely understand what the problem is: You are saying that in straight level flight (i.e. during the landing approach) you are not afraid of stalling, right? But then you are saying that you are afraid to bank. You are aware that the fixed-wing controller automatically increases the airspeed reference depending on your bank angle, see [this code](https://github.com/PX4/Firmware/blob/master/src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp#L853) ? You are also saying you would need throttle to keep your airspeed when the airbrakes are out due to the drag, but the great thing in the loiter-to-alt (=down) mode is that you don't even need throttle but will keep your airspeed because you are descending anyways (and the sink rate can be configured of course). With all that said, maybe a video from your exact landing sequence would better help me to understand your approach/issues?\r\n\r\n> Don't get me wrong, i really like this since we spend the vast majority of the time setting and testing autolanding up under different scenarios, I'm just trying to highlight some issues I can see. I think we need to simply segregate the _att_sp.apply_flaps = true flag from putting on the airbrakes which will also take some thought on the mixer side of things but overall, if people are always stuck with flaps and airbrakes then more creative things like you're doing are going to have potential unforeseen flaws.\r\n\r\nOf course we can talk about separating flaps and airbrakes, but i personally wouldnt do this in this PR. Still, i dont fully understand _why_ you'd like to separate them right now, given that until now (i.e. during the landing approach) you have also always used them together, right? And as mentioned, flaps+airbrakes would then _only_ deploy in a loiter-to-alt waypoint, but in no other type of waypoint (apart from NAV_LAND as before).\r\n\r\nIf it helps, feel free to write me on slack...",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:16:31Z",
          "body": "I can write you on slack but essentially we have a high aspect ratio wing and the characteristics of any high aspect ratio wing are that they are prone to tip stalling (as you probably know) so during bank at reduced speeds (near stall/landing speed) that concern or even issue becomes very pronounced, ie less room for error. Slowing down in a straight line with even the hint of a stall is easily managed by tecs and pitch but the concern is not the code to increase speed, that works great, it's that when you're creating so much more drag, the true ability to quickly increase speed is diminished and you are close to the ground. Recovering is potentially not an option at that point. As for why to separate the flaps, because anything that forces on flaps and in many cases airbrakes as well is not ideal. I wouldn't deploy airbrakes ever until I have exited my loiter tangent to the landing waypoint. \r\n\r\nLanding sequence is pretty standard, fixed wing pattern then once exited flaps and airbrakes come on and we see nose up for a moment if pitch correction isnt set and then glide down. This is more about forcing one action actually forces two (flaps and airbrakes) and anything to hinder the ability to stay in the air is a concern and when that limit is power overhead which we are reduced due to increased drag essentially just limits what can be flown in safely or in edge cases if can even be used at all. The more I think about it the more it makes me think that the power system needs to be able to easily overcome drag forces but also raises the questions of what do having airbrakes out do aerodynamically when trying to bank which would be a concern since ailerons will already be deployed. Airbrakes really shouldn't come on until we are in a straight line.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-20T20:22:27Z",
          "body": "Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:23:53Z",
          "body": "Sounds good!",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-20T20:25:44Z",
          "body": "> Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?\r\n\r\nI honestly think this is too much of a corner case to be of concern for the PX4 dev call. Also, this is in one week, right? I think we should solve this faster than that. Or am i misunderstanding anything? Skype or slack would be an alternative...",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-20T20:38:29Z",
          "body": "I think maybe my comment regarding high aspect ratio wings limits the scope and pushes things more specific to wings of that type but realistically even in the case of non high aspect ratio wings I wouldnt deploy airbrakes until lined up with the landing waypoint which I believe is the same in most full size planes (not all). I suppose the best fix is to either to be able to turn off the functionality or separate the flaps and airbrake call.",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-21T14:09:31Z",
          "body": "> Gentlemen, to make this more efficient and fun how about you all join the next PX4 dev call and we will schedule time for this - yes?\r\n\r\nRyan and myself discussed on slack yesterday, and we concluded that fixed-wing landings are so heavily aircraft configuration dependend that we basically need parameters to let the (pro-)user configure the landing process. \r\n\r\n@ryanjAA @Antiheavy I have included the parameter FW_LND_EARLYCFG which enables/disables the early use of the landing configuration (flaps+airspeed change) during the loiter down. Does anyone of you want to test this? Another testing feedback i'd be extremely interested in is whether choosing a different FW_PSP_OFF increases altitude tracking accuracy for your platforms during landing! Could you try to test this too? Of course the FW_INTEG_GAIN needs to be zero such that one can see the differences. For me, in our HIL model, having a different FW_PSP_OFF helps a lot during loiter down and landing (reduction of steady-state altitude tracking error by >50%, i.e. from 6m to <2m). I will also test this on our planes in the next days.",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-22T16:41:18Z",
          "body": "Yep - sounds great. Cool feature, will definitely try it out. We keep FW_PSP_OFF at 1 as knowing the true offset does help quite a lot (we could probably calculate for people/airframes that don't know it if set to 0, fly level and see if we are pitching up/down at cruise). FW_T_INTEG_GAIN is at 0.1 but will try at 0 and see.  ",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-27T13:30:01Z",
          "body": "Tested in flight, no issues. Also tested in HIL. GTM from my side.\r\n\r\n@ryanjAA @Antiheavy Tested on your side too and/or are you OK with merging this?",
          "type": "issue_comment"
        },
        {
          "author": "ryanjAA",
          "created_at": "2018-06-28T03:37:08Z",
          "body": "Good to know no issues on your end. I haven’t tested yet. Enabled crow the other day and couldn’t climb with full power so still a bit reluctant to rely on TECS stall code with our crow setting deployed. I know we wouldn’t be ascending but still concerned some. I’ll try as soon as possible though. Will do it when we have some lower winds. ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-28T08:18:01Z",
          "body": "I’m interested in testing either in SITL or flight test or both. Unfortunately I probably cannot get to it until after the 4th of July holiday as I’m out of the office until then.   The flare always and setting a slightly tighter altitude tolerance for the landing pattern are both of interest to us.  I also want to verify no change to landings speeds or other vehicle settings since we don’t use flaps.  ",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-28T08:18:53Z",
          "body": "FYI @kjkinney",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-08T20:45:06Z",
          "body": "@Antiheavy Tested? We should merge relatively quickly if this is OK because other PRs relating to flap configuration are coming up (e.g. https://github.com/PX4/Firmware/pull/9858/files).",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-09T15:40:20Z",
          "body": "@philipoe I just returned from vacation today.  I will see if we can make a firmware build with this pulled in to flight test tomorrow.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-11T13:38:55Z",
          "body": "@philipoe We test flew a build with this PR on our fixed wing (elevons+rudder) and didn't notice any negative effects.  I'll post logs later today once we've had a chance to review them in detail.",
          "type": "issue_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-07-11T19:32:40Z",
          "body": "Here is our flight testing log.  It is a short flight with two landing approaches with an abort in-between.  Everything looks nominal as far as I can tell.  We didn't excercise any of the new parameters.  Mostly just wanted to ensure the default settings didn't negatively impact our use case.  Take a look at let me know what you think.  Thanks!\r\n\r\nhttps://review.px4.io/plot_app?log=cb831133-4e76-4be7-806f-facac345cdb9",
          "type": "issue_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-07-11T22:28:36Z",
          "body": "Looks good/nominal! Thanks for testing! Seems like your airspeed sensor is still a bit off, and i also did not see any \"[Landing] Flaring\" and \"[Landing]: Killing throttle\" messages in your logged messages, but it might be that this is fine (did you see a flare+truttle cut off?) and these are only transmitted via telemetry... So overall good to merge @dagar  ?",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:46:30Z",
          "body": "Maybe we should be doing this within TECS entirely? TECS internally already has modes which could be expanded as needed for LANDING. We shouldn't have to be continuously setting TECS parameters outside of normal parameter changes.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:51:26Z",
          "body": "Keep in mind that you might be outside of an actual loiter while still in the SETPOINT_TYPE_LOITER handling. \r\n\r\nWhat do you think about waiting to enter the actual loiter (requiring `_l1_control.circle_mode()` here).",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:54:21Z",
          "body": "Fine for debugging, but can you drop these messages before merge? PX4_INFO isn't even logged.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T14:58:24Z",
          "body": "This is a copy (extra work), use a const reference instead. In c++ you also don't need the \"struct\".\r\n`struct position_setpoint_s next_sp` -> `const position_setpoint_s& next_sp`",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-16T15:05:26Z",
          "body": "Looking at how navigator overall works it would be cleaner to move this into a new `MissionBlock::get_altitude_acceptance()` that checks the vehicle type and setpoint triplet. All callers except for one (feasibility) are MissionBlocks.\r\n\r\n`Navigator::get_altitude_acceptance_radius()` could become `Navigator::get_default_altitude_acceptance_radius()` for grabbing the param values.\r\n\r\nThat would also give us a good mechanism for tightening the altitude acceptance during takeoff.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:15:41Z",
          "body": "> Maybe we should be doing this within TECS entirely?\r\n\r\nThat was my thought as well.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "Antiheavy",
          "created_at": "2018-06-16T15:18:06Z",
          "body": "I don't think it is valid to assume that all FW landings are preceded by a loiter.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:18:43Z",
          "body": "With \"modes\" you mean these guys https://github.com/PX4/ecl/blob/1a1106878d6ab1cc48565bef9b25b07d626c5d0b/tecs/tecs.h#L94 ? Yes, this does not contain any LANDING state yet, so that would need to be extended, and i did not want to change @priseborough 's TECS too much here. I agree that if one changes multiple parameters for the landing then TECS should handle this, but i think for a single parameter the current solution would work. ",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:18:56Z",
          "body": "Changed.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:09Z",
          "body": "Changed, must have slipped through somehow...",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:14Z",
          "body": "Changed.",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-16T23:19:43Z",
          "body": "Changed, but a bit differently than you proposed: I put everything into the respective `Navigator::get_altitude_acceptance_radius()` and `Navigator::get_default_altitude_acceptance_radius()` functions because the \"sister\" functions (`get_acceptance_radius()` and `get_default_acceptance_radius()` ) are also located in Navigator, and i don't think we should have one of them in MissionBlock and one in Navigator. But you could now easily integrate all take-off altitude acceptance radius related checks into `Navigator::get_altitude_acceptance_radius()`.\r\n\r\nBtw: This current implementation means that for _every_ waypoint type (not only loiter-to-alt) we enter the function that checks whether the next WP is a land WP. I quickly looked through the whole code and think this is fine however. ",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "philipoe",
          "created_at": "2018-06-18T09:02:52Z",
          "body": "See reply in my big comment.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR corrects multiple logic-level problems: the landing configuration (flaps/airspeed) was triggered too late causing integrator windup and unsafe altitude response, the altitude-acceptance/exit criterion used an inappropriate global tolerance leading to poor/unsafe entry to landing, and the flare was conditionally gated causing inconsistent touchdown behaviour. The changes move configuration earlier (loiter-down), add landing-specific control scaling, introduce a dedicated landing altitude acceptance parameter, and always trigger flare near ground — all addressing the described incorrect state transitions and boundary-condition logic."
  },
  {
    "title": "ecl: update submodule",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9685",
    "number": 9685,
    "created_at": "2018-06-15T09:24:54Z",
    "merged": true,
    "merged_at": "2018-06-15T13:53:29Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "contains:\n- https://github.com/PX4/ecl/pull/460\n- https://github.com/PX4/ecl/pull/462\n\nAlso changes a critical RTL message that does not need to be critical to an info.\n\nFixes  #9527",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR description only states an ecl submodule update (including two upstream PRs) and a change of a critical RTL message to an info level. Changing message severity is not a program logic fix, and no details are provided about code changes in the referenced ecl PRs. Because there is no concrete evidence in this PR text that it corrects an incorrect algorithm, state transition, boundary condition, or similar logic bug, I cannot conclude it fixes a logic error (low confidence due to lack of detail)."
  },
  {
    "title": "Precland fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9668",
    "number": 9668,
    "created_at": "2018-06-13T21:36:33Z",
    "merged": true,
    "merged_at": "2018-06-14T03:32:52Z",
    "state": "closed",
    "conversation": {
      "author": "okalachev",
      "body": "This PR addresses two precland-related isses:\n\n1. When the copter switches to the horizontal approach state, the check of landing target pose validity is not fully correct: an old message (when the landing target is seen the last time) can switch the state.\n\n2. When downloading mission with a precision landing waypoint from the copter, the precision land parameter is lost.\n\n@ndepal",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "ndepal",
          "created_at": "2018-06-14T07:53:01Z",
          "body": "Why is this necessary? `_target_pose_updated` is only true if we got a new message in this `on_active()` call. In this case, the timestamp of the message is recent, so `_target_pose_valid` is always true if `_target_pose_updated` is true.\r\n\r\nIt's only possible for `_target_pose_valid` to be true and `_target_pose_updated` false (due to `_param_timeout`), but not the other way around.",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "okalachev",
          "created_at": "2018-06-14T12:01:29Z",
          "body": "Unfortunately, no. When testing we have met situations, when the copter sees the landing marker, when not in Precland mode (so Precland's `on_active` is not called). Then, for example, the copter flies from another point to the landing point. And then, \"sees\" the marker (actually just gets and old message).",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "ndepal",
          "created_at": "2018-06-14T12:08:31Z",
          "body": "Ah I see. Thanks for the fix!",
          "path": "src/modules/navigator/precland.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "mhkabir",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes incorrect program behavior: (1) a wrong state transition where a stale landing-target message could trigger the horizontal-approach state (a state/validation logic bug), and (2) loss of the precision-landing parameter when downloading missions (incorrect data handling/parameter propagation). Both are classic logic errors and the PR description indicates they are being corrected."
  },
  {
    "title": "Do not set the closest mission item in normal mission mode",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9646",
    "number": 9646,
    "created_at": "2018-06-12T08:34:45Z",
    "merged": true,
    "merged_at": "2018-06-12T16:11:14Z",
    "state": "closed",
    "conversation": {
      "author": "acfloria",
      "body": "As requested in [#9606](https://github.com/PX4/Firmware/issues/9606).\n\nTested in SITL for normal mission flight and RTL.\n\n@potaito can you confirm that now it works as you expect?",
      "issue_comments": [
        {
          "author": "potaito",
          "created_at": "2018-06-12T09:33:54Z",
          "body": "Tested in HITL and it works as expected:\r\n\r\n![1](https://user-images.githubusercontent.com/3762382/41282367-2ec80694-6e34-11e8-8ed0-8c1ea1e87f1c.png)\r\nTakeoff performed and then created mission.\r\n\r\n----\r\n\r\n![2](https://user-images.githubusercontent.com/3762382/41282359-266e6af6-6e34-11e8-85d3-ea1f04a04698.png)\r\nStarted the mission, flying towards the first waypoint.\r\n\r\n----\r\n\r\n![3](https://user-images.githubusercontent.com/3762382/41282374-30f090a8-6e34-11e8-9d45-73d275d789be.png)\r\nAll waypoints passed in correct order :+1: ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-12T14:55:30Z",
          "body": " - fixes https://github.com/PX4/Firmware/issues/9606",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-12T16:11:20Z",
          "body": "Thanks!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "potaito",
          "created_at": "",
          "body": "LGTM, thanks @acfloria ",
          "state": "APPROVED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the change prevents incorrectly setting the 'closest' mission item in normal mission mode, which caused missions to start at the wrong waypoint/order. The PR references and closes issue #9606 and multiple testers (SITL/HITL) confirmed correct mission behavior, indicating a logic bug was fixed rather than a style or syntax change."
  },
  {
    "title": "replace geo _wrap_pi with matrix::wrap_pi",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/9630",
    "number": 9630,
    "created_at": "2018-06-09T21:24:21Z",
    "merged": true,
    "merged_at": "2018-06-12T07:00:54Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Requires https://github.com/PX4/Matrix/pull/68 and https://github.com/PX4/ecl/pull/456 to be merged first.",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-06-10T21:12:37Z",
          "body": "This looks wrong.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-06-11T00:52:14Z",
          "body": "Good catch, fixed.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Looked good except for the one line. Given how critical these are I would like to have another review pass tomorrow.",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR title and description indicate a replacement of a local geo _wrap_pi implementation with matrix::wrap_pi (a refactor to use a shared function) and do not mention fixing incorrect behavior, bugs, or wrong output. The lone review comment requests another pass due to criticality but does not identify a logic error; with the available information it's more likely a code consolidation/refactor than a targeted logic bug fix."
  },
  {
    "title": "WIP: HEARTBEAT and commander failsafe handling cleanup",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10933",
    "number": 10933,
    "created_at": "2018-11-28T14:51:09Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "For discussion of expanded failsafe handling WRT mavlink HEARTBEAT (https://github.com/PX4/Firmware/pull/10841).\n\n - mavlink update telemetry_status with all HEARTBEAT timestamps\n - let commander decide which HEARTBEATs to use\n - optimizations to avoid unnecessary state and subscribing to all telemetry_status and iridiumsbd instances (saves ~1.5kB of RAM)\n - simplifies convoluted commander data link handling\n\n Related\n - https://github.com/PX4/Firmware/pull/10841\n - https://github.com/PX4/Firmware/pull/10194\n - https://github.com/PX4/Firmware/pull/9473\n - https://github.com/PX4/Firmware/pull/7985",
      "issue_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-11-29T13:02:22Z",
          "body": "@baumanta your commit looks really good. But it's failing for a specific target: http://ci.px4.io:8080/blue/organizations/jenkins/PX4_misc%2FFirmware-compile/detail/pr-heartbeat_failsafes/5/pipeline#step-533-log-407",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-04T10:52:02Z",
          "body": "@dagar I quickly checked, so far no conflict with #10907 😅 ",
          "type": "issue_comment"
        },
        {
          "author": "baumanta",
          "created_at": "2018-12-05T12:51:45Z",
          "body": "@dagar are there any updates on this?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:30:13Z",
          "body": "TODO: double check the iridium behavior  ",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-13T14:40:10Z",
          "body": "I'll try to resurrect this and get it in incrementally. \r\nPart 1 - https://github.com/PX4/Firmware/pull/11454",
          "type": "issue_comment"
        },
        {
          "author": "jkflying",
          "created_at": "2019-06-04T11:50:07Z",
          "body": "I guess this is all in now and can be closed?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-06-04T14:16:18Z",
          "body": "Yes, thanks everyone!",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:06:24Z",
          "body": "If this came to the commander param list, why not change the suffix to `COM`?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:06:33Z",
          "body": "Same thing here",
          "path": "src/modules/commander/Commander.hpp",
          "position": 12,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:08:57Z",
          "body": "so for an `_obc_datalink_loss`, we need to add new params right?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:12:14Z",
          "body": "@baumanta ",
          "path": "src/modules/commander/Commander.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:12:25Z",
          "body": "They've already effectively been commander params for several releases. The only reason I didn't do the rename is that users will lose existing settings. This is the type of thing we can do for a release with proper migration documentation.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:12:31Z",
          "body": "See previous comment.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 12,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:16:40Z",
          "body": "One more time for clarity, how would you like it to work?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:20:54Z",
          "body": "For example: I have a GCS link and a OBC link. I want the OBC link, if failing, to trigger a failsafe, but if the GCS link fails, I just want it to send a mavlink_log warning me, but not triggering a failsafe. Or, I may want them to both trigger a failsafe, or want that none trigger a failsafe but at least warn me this also applies to the high latency case.\r\n\r\nImagine we have 3 links. I would like to state which ones do trigger failsafes in the case of failure, but want to all of them to tell at least warn me in the case of a failsafe.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "TSC21",
          "created_at": "2018-11-28T15:30:01Z",
          "body": "It can make sense to be more atomic and say: OBC triggers a RTL failsafe, while GCS triggers a land failsafe",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-28T15:39:08Z",
          "body": "TODO: we need to be careful for the scenario where a single mavlink connection will have multiple HEARTBEATs (eg companion also routing to GCS). I'll make sure that each received HEARTBEAT results in a telemetry_status publication.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 9,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-30T15:51:57Z",
          "body": "I'm wondering if we can drop the sysid check entirely now.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:27:29Z",
          "body": "We need to preserve the ability to build px4 without the multicopter controllers. \r\n\r\nOne option is to use the older c param api for MPC_OBS_AVOID, but now that I'm looking at this again I'm wondering if it's needed at all. You could either have an independent set of commander parameters analogous to datalink loss, but specifically for avoidance loss (COM_OBS_LOSS_T), or perhaps have the position controller put something in `position_controller_status` (https://github.com/PX4/Firmware/blob/master/msg/position_controller_status.msg) indicating that an avoidance system is required.",
          "path": "src/modules/commander/Commander.hpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-12-17T05:32:53Z",
          "body": "```suggestion\r\n\r\n```",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 13,
          "type": "review_comment"
        },
        {
          "author": "baumanta",
          "created_at": "2018-12-19T12:29:54Z",
          "body": "@dagar I just switched the definition of the parameter from position controller to commander. Now the parameter is called COM_OBS_AVOID. As commander is build anyway for all the boards this should solve our problem. Anyway I think this is the better location for this parameter as the decision on whether to use obstacle avoidance is rather a commander matter then a position controller choice. What do you think, would that be ok for you?",
          "path": "src/modules/commander/Commander.hpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly targets HEARTBEAT and commander failsafe handling, moving heartbeat timestamp tracking into telemetry_status and letting the commander decide which heartbeats to use; these are behavior-level changes that address incorrect or convoluted decision logic for data links and failsafes. The description and comments indicate it simplifies and corrects how failsafe state is determined (avoiding incorrect subscriptions and state), which corresponds to fixing a logic error rather than just style or syntax."
  },
  {
    "title": "[WIP] DO_CHANGE_SPEED work across LOITER, MISSION, RTL",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10912",
    "number": 10912,
    "created_at": "2018-11-25T19:04:26Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "Opening for further discussion and testing, please do not merge.\n\nTODO:\n - review behaviour wrt VTOL transitions\n - define mission behaviour\n   - debatably, the speed should be set as a property of the current mission\n   - example: setting mission speed, temporarily leaving leaving mission mode, then resuming",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-11-25T19:08:19Z",
          "body": "@sanderux do you have any input here? This might be a good time to review and document your requirements (current and desired).",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-25T19:16:08Z",
          "body": "@superware",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-25T22:50:26Z",
          "body": "A quick pass looks good to me.",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-11-26T16:44:12Z",
          "body": "does this work for setting cruise throttle? (disabled airspeed sensors)",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-11-26T16:47:33Z",
          "body": "our use case for changing speed would be \r\n- from an onboard computer monitoring vehicle behavior and detecting a requirement for more speed\r\n- custom behavior: change flight setting from efficient to performance and back\r\n- custom behavior: Quick RTL / Bird strike avoidance\r\n\r\nSo for us it is not so much a mission setting but a way for external systems (or perhaps in the future through QGC) of defining the vehicles speed.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-07-10T17:37:03Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-10-23T09:12:29Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "superware",
          "created_at": "2019-10-23T10:44:16Z",
          "body": "Hi @julianoes, can you please reopen?",
          "type": "issue_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2019-10-25T11:57:22Z",
          "body": "> Hi @julianoes, can you please reopen?\r\n\r\nIt's still open.",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2020-01-24T03:36:30Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2021-01-10T17:49:45Z",
          "body": "Closing as stale.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR is a WIP feature/behavior change to make DO_CHANGE_SPEED apply across LOITER, MISSION, and RTL and mainly contains discussion and TODOs rather than a concrete bug fix. There is no clear description of a previously incorrect program logic or a concrete code diff demonstrating a corrected conditional/state transition; it reads as a feature enhancement and design discussion rather than a targeted fix for a logic error."
  },
  {
    "title": "Landing gear improvement",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10842",
    "number": 10842,
    "created_at": "2018-11-14T11:09:17Z",
    "merged": true,
    "merged_at": "2018-12-10T15:17:24Z",
    "state": "closed",
    "conversation": {
      "author": "MaEtUgR",
      "body": "**Test data / coverage**\nSITL/HITL and field tested ~20 flights in H520 Firmware before cherry-picking.\n\n**Describe problem solved by the proposed pull request**\nControlling the landing gear is tied to the attitude setpoint message which is just misusing an existing message that lead to a lot of problems when implementing landing gear behaviour according to product requirements.\n\n**Describe your preferred solution**\nWe took the time to solve these problems and make it more flexible and want to contribute this architecture.\n\n**Additional context**\nThere were conflicts with #10805. (FYI @bkueng)\n\n---\n\n**State:** I'm still porting commits.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-11-14T17:10:53Z",
          "body": "What do you think about getting landing gear out of control group 0?\r\n\r\n![image](https://user-images.githubusercontent.com/84712/48499335-33204200-e806-11e8-84a4-18b9ac9f231e.png)\r\n\r\nLater that could facilitate handling landing gear entirely outside of the position and attitude controllers.\r\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-14T22:41:51Z",
          "body": "I recall having discussed that and I think that is necessary.",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-15T10:25:05Z",
          "body": "Sure, this is just a **first step** of detaching the landing gear out of the attitude setpoint because it really has nothing to do with the attitude and its controller. These changes were necessary to **solve our nasty dependency issues** because of product customization that lead to a severe maintenance effort to keep **up to date with PX4** and that's why we wanted to contribute. Any further work in this direction is appreciated. The only obstacle I see with removing it from the control group is messing with the IO which usually takes more time but that should not hinder us after all.",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T14:26:21Z",
          "body": "I rebased because there were conflicts in the position controller because of my own pr https://github.com/PX4/Firmware/pull/10831",
          "type": "issue_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-10T14:02:07Z",
          "body": "Rebased without conflicts, any reason this is waiting?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-12-10T14:17:17Z",
          "body": "No, good to go.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "Stifael",
          "created_at": "2018-12-04T14:41:32Z",
          "body": "`_gear_switch_old = landing_gear_s::GEAR_KEEP `?",
          "path": "src/lib/FlightTasks/tasks/Manual/FlightTaskManual.hpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "Stifael",
          "created_at": "2018-12-04T14:44:03Z",
          "body": "Am I correct with the assumption that the publication of landing-gear is only required for logging?",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T13:18:51Z",
          "body": "No, to detect the transition of the RC **switch** controlling the landing gear (if there is any) like the word `switch` suggests.\r\nIt's states are defined according to: https://github.com/PX4/Firmware/blob/0c60fff6bd0e09db9b4fc716472849978a60516f/msg/manual_control_setpoint.msg#L3-L6",
          "path": "src/lib/FlightTasks/tasks/Manual/FlightTaskManual.hpp",
          "position": 4,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T13:24:13Z",
          "body": "~Your curiousity saves lives, good catch 👍 I'll fix this malicious publication.~",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-12-06T14:21:52Z",
          "body": "I recalled my changes which were done during the rebase because the attitude controller had conflicts caused by https://github.com/PX4/Firmware/pull/10805. The landing gear field is not in the attitude setpoint anymore and @bkueng 's pattern here https://github.com/PX4/Firmware/pull/10805/files#diff-6e842349b82ef0b37ba6161a6d0f85c3R167 is to publish the attitude setpoint out of the same loop that polls on it (I find that confusing and improvable as well). So to enable landing gear operation in stabilized mode I had to follow the same pattern.\r\n\r\nFor the landing gear this might actually make a lot of sense because in the future the execution of the landing gear message should not be in the attitude controller anymore. And for the attitude I discussed with @Stifael it would make sense that the position controller sends thrust and yaw while the attitude controller converts either the input from the position controller or from the sticks to an attitude setpoint (quaterion) executes and publishes it for logging.",
          "path": "src/modules/mc_att_control/mc_att_control.hpp",
          "position": 28,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "Stifael",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly removes the landing-gear control from the attitude_setpoint message (a misuse) and re-architects it so gear behaviour is handled separately. That addresses an incorrect coupling/logic in the control flow that caused undesired behaviour and maintenance issues; reviewers agree and the author reports SITL/HITL and flight testing."
  },
  {
    "title": "[DO NOT MERGE] introduce vehicle_thrust_setpoint",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10832",
    "number": 10832,
    "created_at": "2018-11-12T20:46:39Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "For discussion only at this point (not complete or tested).\n\nIf this is viable we might be able to drop the virtual attitude setpoints entirely. Then we can lean on thrust setpoints for coordination between position controllers. This should also lead to it being possible to drop virtual actuator controls.",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-12T23:17:34Z",
          "body": "Nice! This is going in the right direction. We might want to do this in stages though (with the original PR going in first, then this on top of it).",
          "type": "issue_comment"
        },
        {
          "author": "bresch",
          "created_at": "2018-11-13T13:17:57Z",
          "body": "@dagar We won't be able to drop the virtual attitude setpoints because during the transition of a standard VTOL, since we want pitch and thrust_x from TECS, roll from L1 and thrust_z from the multicopter position controller. Besides that, splitting the thrust setpoints from the attitudes ones is the right way to go :)",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T14:32:06Z",
          "body": "@bresch yes, we'd still need a mechanism to combine orthogonal thrust setpoints (MPC altitude controller). This is one of the reasons I asked about the control allocation idea.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2019-02-05T21:06:48Z",
          "body": "Revisit for v1.10.0",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR is an architectural/feature proposal to introduce vehicle_thrust_setpoint and refactor how thrust and attitude setpoints are handled rather than a patch for a specific incorrect program behavior. The discussion indicates design decisions and limitations (e.g. VTOL transition needs) and the author notes the work is incomplete and untested, so it does not present a clear fix for a logic bug."
  },
  {
    "title": "VTOL rate control improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10819",
    "number": 10819,
    "created_at": "2018-11-08T09:59:50Z",
    "merged": true,
    "merged_at": "2018-11-22T01:32:41Z",
    "state": "closed",
    "conversation": {
      "author": "RomanBapst",
      "body": "Replaces #9190",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-11-08T10:06:17Z",
          "body": "Not merging just yet!",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T10:43:46Z",
          "body": "@LorenzMeier yes, please don't! It breaks Flight Review :)",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:50:23Z",
          "body": "Once this is good to go I'll squash the commits.",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T14:09:09Z",
          "body": "@PX4/testflights Any chance you can test fly this. It touches multirotor, vtol and fixed wing.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-14T16:34:49Z",
          "body": "@PX4/testflights please try this on all VTOLs, as well as regression testing on MC and FW platforms.",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-11-15T20:06:50Z",
          "body": "I tested this PR on convergence Vtol, it took off well in the mission but did not do the transition, when I aborted the mission the VTOL it fell and crashed. And did not save the log.\r\n\r\n![vtol1](https://user-images.githubusercontent.com/12182176/48578779-6f6ba500-e8cf-11e8-9cfb-3eb29464a8e2.jpg)\r\n![vtol4](https://user-images.githubusercontent.com/12182176/48578781-6f6ba500-e8cf-11e8-8957-ba55a8bcb41b.jpg)\r\n\r\n\r\n\r\n\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-11-15T20:17:36Z",
          "body": "test on pixhawk 1 and crash on stabilize mode\r\nhttps://review.px4.io/plot_app?log=8f5cbf75-cb1f-4fd3-88ed-d18d425c7cfb\r\n\r\non pixhawk v4 pro crash on stabilize mode\r\nhttps://review.px4.io/plot_app?log=014173eb-4156-4828-a97d-492c417f3577",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-15T20:30:14Z",
          "body": "@dannyfpv Hi! Thanks for testing and sorry for the crash. I checked the log and I already found the bug. Unfortunately, there was sign error in throttle in stabilized mode that was introduced during the lasted rebase on master. SITL did not catch that bug because it does not use test stabilized mode.\r\nHowever, in future I suggest to bench test PRs which introduce massive changes like this one does before actually flying the vehicle. In this case you would have had no throttle in stabilized mode.\r\nAnyway, I hope the convergence is not broken too badly...",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2018-11-15T20:40:09Z",
          "body": "Thanks for the feedback @RomanBapst, don't worry about the convergence it fulfilled its duty! Now let's make sure we have tests for stabilized mode, should I open an issue for tracking @dagar or is this covered somewhere already?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-15T20:42:53Z",
          "body": "@mrpollo I was already thinking about this. I think it would not be too hard to use the dronecode SDK in the CI and actually 'simulate' a human flying with a radio controller. That would just be a sluggish controller outputting RC commands. ",
          "type": "issue_comment"
        },
        {
          "author": "dannyfpv",
          "created_at": "2018-11-21T22:19:01Z",
          "body": "tested on pixhawk v4 pro, good flights no noticeable issues.\r\nhttps://review.px4.io/plot_app?log=482daec6-d8b5-416f-bb3c-e57782fec3bd\r\nhttps://review.px4.io/plot_app?log=4fc131d3-e215-4188-895c-d59a7161747d",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-22T01:30:28Z",
          "body": "I took another pass and this looks good. Let's merge and keep going.",
          "type": "issue_comment"
        },
        {
          "author": "mrpollo",
          "created_at": "2018-11-22T16:33:50Z",
          "body": "Great team work everyone 🎉 ",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:22:06Z",
          "body": "```suggestion\r\n\t\tif (orb_copy(ORB_ID(vehicle_attitude_setpoint), _att_sp_sub, &_att_sp) == 0) {\r\n```",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:25:57Z",
          "body": "```suggestion\r\n\treturn _parameters.airspeed_trim / math::max(airspeed,  _parameters.airspeed_min);\r\n```",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:32:28Z",
          "body": "Why is this removed?",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:37:38Z",
          "body": "Can you add a `using namespace matrix` on top? Should become more readable w/o `matrix::` everywhere.",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-11-08T12:43:06Z",
          "body": "Is x here correct? Further down it's using z.",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T12:46:12Z",
          "body": "Note to myself: change to _thrust_sp",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:08:58Z",
          "body": "@bkueng Mistake during rebase",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:10:25Z",
          "body": "@bkueng Sure, good idea as it's not a header file.",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:44:51Z",
          "body": "Fixed",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:44:59Z",
          "body": "Done",
          "path": "src/modules/vtol_att_control/tailsitter.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:45:25Z",
          "body": "Fixed, for now use thrust_z as offboard is used for multicopters",
          "path": "src/modules/mavlink/mavlink_receiver.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-08T13:45:33Z",
          "body": "Fixed",
          "path": "src/modules/mc_att_control/mc_att_control_main.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-08T16:01:21Z",
          "body": "It seems obvious that this is only done in fixed wing mode but where is that decision?",
          "path": "src/modules/navigator/gpsfailure.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-08T16:11:59Z",
          "body": "I strongly suggest that we use arrays to store vecotrs inside uORB messages like here:\r\nhttps://github.com/PX4/Firmware/blob/master/msg/vehicle_local_position_setpoint.msg#L20",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-10T15:53:04Z",
          "body": "@MaEtUgR The gpsfailure class is only used for fixed wing. It's executed if the navigation state is set to NAVIGATION_STATE_AUTO_LANDGPSFAIL. If you go look into the commander you'll see that it's only used for fixed wing.",
          "path": "src/modules/navigator/gpsfailure.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-11-10T16:16:02Z",
          "body": "@MaEtUgR Done!",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-10T18:21:22Z",
          "body": "@RomanBapst I believe this is the issue. Clang doesn't let you use static constexpr with these template functions.",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T01:32:30Z",
          "body": "@RomanBapst I believe this change was done intentionally ~~for flaps deployment~~ to fix rudder stuttering in manual mode with FW_RLL_TO_YAW_FF. I'll track down the original so we can make sure the intended fix is preserved.",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-11-13T01:33:25Z",
          "body": "https://github.com/PX4/Firmware/pull/9607",
          "path": "src/modules/fw_att_control/FixedwingAttitudeControl.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "MaEtUgR",
          "created_at": "2018-11-20T16:40:40Z",
          "body": "Perfect thanks!",
          "path": "msg/vehicle_attitude_setpoint.msg",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "bkueng",
          "created_at": "",
          "body": "Looks good generally. Flight Review is fine too, it's using the thrust from actuator_controls.\r\n\r\nIs the uavcan submodule update on purpose?",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "MaEtUgR",
          "created_at": "",
          "body": "The multicopter part looks good, the fw, vtol as well for the part that I can still follow.",
          "state": "COMMENTED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "This reverts https://github.com/PX4/Firmware/pull/9607",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR addresses a functional bug: reviewers and the author identified and fixed a sign error in throttle for stabilized mode (introduced during a rebase) that caused incorrect vehicle behavior and crashes. Testers reported failures which were resolved after the fix, and reviewers confirmed the changes correct VTOL/MC/FW control behavior."
  },
  {
    "title": "Format strings",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10773",
    "number": 10773,
    "created_at": "2018-10-27T09:00:27Z",
    "merged": true,
    "merged_at": "2018-10-27T10:44:52Z",
    "state": "closed",
    "conversation": {
      "author": "m-ou-se",
      "body": "In #10766, I forgot a `%s` in a format string. Surprisingly to me, the compiler didn't warn me.\n\nThis PR enables GCC's `__attribute__((format))` which will make it validate the format strings, to prevent this kind of bugs.\n\nBy enabling it, I found (and fixed) many simliar bugs already in the code:\n\n- A `%d` for a pointer (replaced it by `%p`)\n- 2 cases of `%d` for a `ssize_t` (replaced it by `%zi`)\n- 18 cases of `%d`, `%u` or `%i` for a `size_t` (replaced it by `%zu`)\n- An unused formatting argument (removed it)\n- A missing `%d` (added it)\n- 2 cases of `%llu` for a `uint64_t` (replaced it by `\"%\" PRIu64`)\n- 6 cases of giving a string directly as format string, which would break if the string would contain any `%` signs. (replaced it by `(\"%s\", string)`)",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T09:11:24Z",
          "body": "One more required (uncovered by this PR): ```\r\nsrc/modules/uORB/CMakeFiles/modules__uORB.dir/uORBDeviceMaster.cpp.obj -c ../../src/modules/uORB/uORBDeviceMaster.cpp\r\nIn file included from ../../src/platforms/px4_defines.h:42:0,\r\n                 from ../../src/drivers/drv_orb_dev.h:43,\r\n                 from ../../src/modules/uORB/uORBCommon.hpp:37,\r\n                 from ../../src/modules/uORB/uORBDeviceMaster.hpp:38,\r\n                 from ../../src/modules/uORB/uORBDeviceMaster.cpp:34:\r\n../../src/modules/uORB/uORBDeviceMaster.cpp: In member function 'void uORB::DeviceMaster::showTop(char**, int)':\r\n../../src/platforms/px4_log.h:282:40: error: unknown conversion type character '-' in format [-Werror=format=]\r\n   px4_log_raw(level, fmt, ##__VA_ARGS__); \\\r\n                                        ^\r\n../../src/platforms/px4_log.h:429:33: note: in expansion of macro '__px4_log_raw'\r\n #define PX4_INFO_RAW(FMT, ...)  __px4_log_raw(_PX4_LOG_LEVEL_INFO, FMT, ##__VA_ARGS__)\r\n                                 ^~~~~~~~~~~~~\r\n../../src/modules/uORB/uORBDeviceMaster.cpp:371:4: note: in expansion of macro 'PX4_INFO_RAW'\r\n    PX4_INFO_RAW(CLEAR_LINE \"%*-s INST #SUB #MSG #LOST #QSIZE\\n\", (int)max_topic_name_length - 2, \"TOPIC NAME\");\r\n    ^~~~~~~~~~~~\r\ncompilation terminated due to -Wfatal-errors.\r\n```\r\n\r\nSee CI output for more. Thanks!",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:15:38Z",
          "body": "Interesting. That file uses `%*-s`, but `#ifdef`ed to only do that on NuttX. On other platforms, it uses `%*s`.\r\n\r\n`%*-s`, however, is invalid. I guess `%-*s` was meant? My best guess is that NuttX accepts this invalid specifier too, but other platforms don't, and that's why the `#ifdef` is there to begin with. If this is the case, we can just remove the `#ifdef`s completely, and use `%-*s`. I'm now trying to find the history of when those `#ifdef`s were added to check if there's another reason i'm missing.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:20:09Z",
          "body": "Found the commit: f601428e821bcc781e1ae3a858035fc804e2027a adds those `#ifdef __PX4_NUTTX`'s, but the commit is rather large, and the message doesn't say anything specific about the format specifier:\r\n\r\n> add ifdef's where necessary to mitigate diffs between nuttx & posix\r\n\r\nI'll just assume `%-*s` was meant, and remove the `#ifdef __PX4_NUTTX` there.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:28:17Z",
          "body": "Looks like there are many more of them, which are not found by a simple build on/for Linux.",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T09:35:10Z",
          "body": "```make px4fmu-v5_default``` will likely uncover many of them. But I don't want to put that burden on you - we can distribute the effort. If you want to continue using that build command feel free to patch all of them.",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T09:55:50Z",
          "body": "That target doesn't build on my computer right now, so I'll just stay on the Posix target. Do you want to fix it for all other platforms before merging this? Or should we merge the fixes, but not the `__attribute__` yet? Or should we only enable the attribute, or enable/disable the `-Wformat` warning, on some specific targets?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T10:30:03Z",
          "body": "The fmuv5 target is building successfully on my machine with your latest commit - I haven't checked out the attributes you set in detail, but you haven't disabled the checks, have you?",
          "type": "issue_comment"
        },
        {
          "author": "m-ou-se",
          "created_at": "2018-10-27T10:31:49Z",
          "body": "Nothing disabled. Just fixed a few more of them. Maybe those were the last?",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-27T10:35:38Z",
          "body": "This is looking pretty good now.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "Awesome, thanks for these fixes!",
          "state": "DISMISSED",
          "type": "review"
        },
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes incorrect format-string usage (missing or wrong conversion specifiers, invalid specifiers like \"%*-s\", wrong size modifiers for size_t/ssize_t/uint64_t, and unsafe use of strings as format strings). These are logic bugs that lead to incorrect output or undefined behavior; enabling __attribute__((format)) and correcting the specifiers addresses those logic errors."
  },
  {
    "title": "fix reposition: set acceptance radius",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10760",
    "number": 10760,
    "created_at": "2018-10-25T15:02:47Z",
    "merged": true,
    "merged_at": "2018-10-25T15:05:28Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "Previously the acceptance radius was 0, so the FlightTaskAutoLine was\r\nrandomly changing yaw and sometimes going into a random direction (see  #10757).\r\n\r\nThere is still something else wrong in there, but this patch avoids the reposition bug. I see 2 problems:\r\n- The FlightTaskAuto contains states and resets certain attributes when switching (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/Auto/FlightTaskAuto.cpp#L468). In case of the reposition, the switches were random due to numerical inaccuracies. If possible we should avoid these states.\r\n- FlightTaskAutoLine uses _target and _prev_wp to determine the velocity direction (https://github.com/PX4/Firmware/blob/master/src/lib/FlightTasks/tasks/AutoLine/FlightTaskAutoLine.cpp#L79). However this might not reflect where the vehicle currently is (I guess the states are meant to prevent this, but it doesn't seem to work).\r\n\r\nThe combination of all these led to the unexpected behavior.\r\n\r\nFixes #10757\r\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": [
        {
          "author": "LorenzMeier",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic/boundary-condition error: the acceptance radius was previously set to 0, causing spurious state transitions and incorrect yaw/direction decisions due to numerical inaccuracies. Setting a non-zero acceptance radius prevents those unintended transitions and resolves the reposition bug described in #10757 (the author notes other issues remain but this change addresses the incorrect behavior)."
  },
  {
    "title": "Mission Log",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10738",
    "number": 10738,
    "created_at": "2018-10-22T11:09:20Z",
    "merged": true,
    "merged_at": "2018-10-26T06:02:43Z",
    "state": "closed",
    "conversation": {
      "author": "bkueng",
      "body": "This adds a new log file to the SD card configurable via `SDLOG_MISSION` parameter.\n\n### Use-cases\nIt's also a ULog file, but only contains minimal information for the following use-cases:\n- geotagging/survey (more generally: extract data collected by the pixhawk during a mission and needed for post-processing)\n- cloud upload & statistics: keeping track of where and how long a vehicle has flown, and if there were problems.\n- regulation: keeping a small log to show where a drone was flown, what failures happened etc.\n\nIt is stored in another directory (`mission_log`) to keep the logs separate from the normal flight logs.\n\n@dogmaphobic This will need an interface update on the QGC side, and maybe changes/extensions to the log download. I have not looked into that yet.\n\n### Implementation\n- the general structure of the logger is the same, but the mission logs use a separate independent write buffer.\n- optimization to reduce the header size: now only the message formats are written for messages that are actually logged. Reduces the header size by about 13KB for a normal log.\n- due to other optimizations, RAM usage does not increase if the mission log is disabled.\n  If enabled, only the additional buffer of 300 bytes is required.\n\n### Testing\nI ran a stress-test on a low-quality SD card for 1h:30min with 90KB/s normal logging rate and enabled mission log with 5Hz camera capture publication. There were no drops for the mission log, and the maximum used buffer was 200 bytes, so 300 bytes buffer size will be enough.\nCPU load minimally increased from 5.6% + 1.7% to 5.7% + 1.8% for the main and writer threads.\n\nFixes https://github.com/PX4/Firmware/issues/10189.\n\nI enabled the mission log by default so that we get it field-tested. But it does not have to be enabled later on.",
      "issue_comments": [
        {
          "author": "hamishwillee",
          "created_at": "2018-10-23T01:19:35Z",
          "body": "Looks cool. I commented on the parameter doc.\r\n\r\nCan we also update the user guide with this and also cover the other SDLOG_ params? Proposal is that this should be added in user guide https://docs.px4.io/en/getting_started/flight_reporting.html\r\n- Add a section on \"Configuring logging\" covering all the params\r\n- Explain which logs can be used for what - for example, is Mission Log useful in Flight Reporting?\r\n\r\nI thought it would be good to add a link to the geotagging log in geotagging docs, but we don't have any. Do we need a page that covers what we offer in this area? If so, what would such a page offer?\r\n\r\nLast of all, I looked at the devguide logging topic https://dev.px4.io/en/log/logging.html\r\nMy guess is that the logger is set up with all the rates information etc when the board is set up - and the user guide people don't need to know about this?\r\nShould we perhaps just add a note in that logging topic about the SDLOG parameters. ",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-23T10:12:13Z",
          "body": "> Can we also update the user guide with this and also cover the other SDLOG_ params? Proposal is that this should be added in user guide https://docs.px4.io/en/getting_started/flight_reporting.html\r\n\r\nOk.\r\n\r\n> Explain which logs can be used for what - for example, is Mission Log useful in Flight Reporting?\r\n\r\nNo.\r\n\r\n> I thought it would be good to add a link to the geotagging log in geotagging docs, but we don't have any. Do we need a page that covers what we offer in this area? If so, what would such a page offer?\r\n\r\nYes we should have that. But I don't know of anything that exists already either.\r\n\r\n> My guess is that the logger is set up with all the rates information etc when the board is set up - and the user guide people don't need to know about this?\r\n\r\nYou generally don't have to change anything, since the defaults are good for general log analysis. Special use-cases that differ from that include:\r\n- ekf2 replay\r\n- enabling the high-rate logging profile for PID & filter tuning\r\n- if you want your own set of logged topics.\r\n- thermal temperature calibration",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-10-24T01:44:58Z",
          "body": "Thanks @bkueng . I'll look into updates to those docs once this is merged.",
          "type": "issue_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-24T07:42:21Z",
          "body": "CI fails:\r\n> remote file operation failed: /tmp/jenkins/workspace/irmware-compile_mission_log-VMOKXZB2XWPNUMKC2VMXOFD4RIUCZ46BF3YVCQJRPP6QGICMO3JA@tmp/durable-cb023d6c at hudson.remoting.Channel@61b65624:ec2_docker_slave (i-0001bbab6136cffbf): java.nio.file.FileSystemException: /tmp/jenkins/workspace/irmware-compile_mission_log-VMOKXZB2XWPNUMKC2VMXOFD4RIUCZ46BF3YVCQJRPP6QGICMO3JA@tmp/durable-cb023d6c: No space left on device\r\n\r\n@dagar can you look into it?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T14:30:12Z",
          "body": "@bkueng we had a zombie ec2 slave. I'll restart these jobs now.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:36:02Z",
          "body": "~~Some may want vehicle_attitude as well. Pix4d can optionally use roll, pitch, yaw.~~\r\n\r\nNevermind, just reviewed the contents of camera_capture.",
          "type": "issue_comment"
        },
        {
          "author": "Avysuarez",
          "created_at": "2018-10-25T20:12:19Z",
          "body": "I tested in pixhawk 4 and pixhawk 4 mini in both created a folder with the name of mission_log.\r\npixhawk 4 log\r\nhttps://review.px4.io/plot_app?log=eaed8008-87c9-40a3-b209-d23c50208f5f\r\npixhawk 4 mini log\r\nhttps://review.px4.io/plot_app?log=f074290a-4f59-4cff-9a05-23adf99b21ef",
          "type": "issue_comment"
        },
        {
          "author": "hamishwillee",
          "created_at": "2018-10-26T03:53:16Z",
          "body": "@bkueng OK, docs for this waiting in https://github.com/PX4/px4_user_guide/pull/372 . Note that they are only peripherally about the mission log - without a topic about something that uses it (e.g. geofencing) there isn't much to say about it yet. So consider this \"a start\".",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "hamishwillee",
          "created_at": "2018-10-23T01:00:59Z",
          "body": "HOw about:\r\n\r\n```\r\n/**\r\n * Mission Log\r\n *\r\n * If enabled, a small additional \"mission\" log file will be written to the SD card.\r\n * The log contains just those messages that are useful for tasks like \r\n * generating flight statistics and geotagging.\r\n *\r\n * The different modes can be used to further reduce the logged data\r\n * (and thus the log file size). For example, choose geotagging mode to\r\n * only log data required for geotagging.\r\n\r\n * Note that the normal/full log is still created, and contains all\r\n * the data in the mission log (and more).\r\n */\r\n```\r\n\r\nThe `@value 1 Complete` was also a little confusing to me when I first saw it, because I thought maybe this meant \"full log\", rather than just \"Complete mission log\".\r\nMaybe it is ok. Alternative: \r\n```\r\n * @value 0 Disabled\r\n * @value 1 All mission messages\r\n * @value 2 Geotagging mission messages\r\n```",
          "path": "src/modules/logger/params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-23T10:11:44Z",
          "body": "Thanks, updated accordingly.",
          "path": "src/modules/logger/params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:27:09Z",
          "body": "Picky minor side note - we should have some basic float literal guidelines. Inconsistent use of `0.f`, `0.0f`, `0.0F` throughout the codebase should be an easy eyesore to avoid.",
          "path": "src/modules/navigator/navigator.h",
          "position": 25,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-24T16:31:50Z",
          "body": "vehicle_status is published at 1Hz or when something changes.",
          "path": "src/modules/logger/logger.cpp",
          "position": 167,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-25T07:26:41Z",
          "body": "I saw that, but I wanted to be explicit/conservative here in case something changes in commander.",
          "path": "src/modules/logger/logger.cpp",
          "position": 167,
          "type": "review_comment"
        },
        {
          "author": "bkueng",
          "created_at": "2018-10-25T07:26:43Z",
          "body": "Yeah. I have no problem overlooking those though.",
          "path": "src/modules/navigator/navigator.h",
          "position": 25,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces a new mission log feature and optimizations (separate log file/buffer and reduced header size), i.e. a new capability rather than a correction of incorrect program logic. The discussion and tests focus on functionality, docs and CI issues (disk space), and there is no indication it fixes an unintended behavior, incorrect conditional/state handling, or other logic bug."
  },
  {
    "title": "fixes cherry-picked to stable",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10726",
    "number": 10726,
    "created_at": "2018-10-19T14:21:59Z",
    "merged": true,
    "merged_at": "2018-10-20T00:11:15Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "https://github.com/PX4/Firmware/issues/10064\n\n@PX4/testflights please test this pull request, it will become the v1.8.1 release.",
      "issue_comments": [
        {
          "author": "Avysuarez",
          "created_at": "2018-10-19T18:45:08Z",
          "body": "**> Some flights with pixhawk 4 mini (v5)** \r\n\r\nGood flight, but in altitude mode their was a delay in the throttle to rise.\r\nhttps://review.px4.io/plot_app?log=d511ed58-1d33-4177-bfe1-76acb8686c44\r\nhttps://review.px4.io/plot_app?log=8902f3b5-a550-46ce-89a2-77d4d082a12b\r\nhttps://review.px4.io/plot_app?log=61bfd603-50d1-4e8e-af2b-3c42d9116e21\r\n\r\n**> Some flights with pixhawk 4 (v5)**\r\n\r\nGood flight, no issues.\r\nhttps://review.px4.io/plot_app?log=49b0015c-92f3-4998-b606-b3acd1f7c277\r\nhttps://review.px4.io/plot_app?log=ae2fa213-b0ad-4ff8-acd6-a2c040fb187e\r\nhttps://review.px4.io/plot_app?log=05643504-de97-47ae-86ac-42f148358866\r\n\r\n### **Some flights with pixhawk 2.1 (v3)**\r\nGood flight, no issues\r\nhttps://review.px4.io/plot_app?log=7c160989-2153-44ea-a333-e168a1fbe9eb\r\nhttps://review.px4.io/plot_app?log=2d2d2700-104f-46e4-9591-1891b83fd5e7\r\n\r\n**Some flights with Pixracer (v4)**\r\nGood flight, no issues.\r\nhttps://review.px4.io/plot_app?log=0325ff4e-4176-4a2e-a536-f1a5d7a8f5bc\r\nhttps://review.px4.io/plot_app?log=0ad44079-a441-40be-bce5-76b473bb248b\r\nhttps://review.px4.io/plot_app?log=961df6e1-7354-423b-8a88-f5af71c6c4d0",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-20T00:11:05Z",
          "body": "Thanks for the summary @Avysuarez. These look consistent with v1.8.0 stable, which still needs a few more commits for full pixhawk 4 mini support.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "The PR is described as cherry-picked fixes for a stable release but the discussion shows the reported throttle-delay issue still appears on Pixhawk 4 mini and that additional commits are required for full support. There is no explicit mention that this PR changes the control logic or fixes the observed incorrect behavior, so there is no clear evidence it resolves a logic error."
  },
  {
    "title": "ekf2: increase min value of MAG_YAWLIM",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10721",
    "number": 10721,
    "created_at": "2018-10-18T15:42:35Z",
    "merged": true,
    "merged_at": "2018-10-22T13:26:07Z",
    "state": "closed",
    "conversation": {
      "author": "CarlOlsson",
      "body": "- Some fixed wing platforms require a higher value of EKF2_MAG_YAWLIM in order not to constantly switch mag fusion mode during straight lines in gusty weather. [Relevant commit](https://github.com/PX4/Firmware/commit/1cdfaaf2e19d1a8fb988679d968c68ae0b0d1742)\n- Also fixed some typos",
      "issue_comments": [],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-10-18T16:53:40Z",
          "body": "Just a personal preference? I've added some other perf counters with spaces in the name, but don't really care either way.",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 5,
          "type": "review_comment"
        },
        {
          "author": "CarlOlsson",
          "created_at": "2018-10-18T18:26:12Z",
          "body": "I was doing some tests and noticed that all others had underscores so thought it was inconsistent. But if that is not the case, yes I would prefer underscores ",
          "path": "src/modules/fw_pos_control_l1/FixedwingPositionControl.cpp",
          "position": 5,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — raising the minimum MAG_YAWLIM addresses unintended behavior (frequent mag fusion mode switching) caused by an overly low parameter threshold. This is a boundary/ state-transition bug (incorrect behavior under gusty conditions), so changing the limit fixes a logic error rather than a stylistic issue."
  },
  {
    "title": "DeltaTag: enhanced geo-referencing survey images",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10715",
    "number": 10715,
    "created_at": "2018-10-17T22:02:25Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "DeltaTag provides an alternate method to geo-referencing images from survey missions.\r\nIt uses the delta in seconds between the images and the delta between the triggers to \r\nmatch geo information with pictures, allowing for mission images.\r\n\r\nIt uses the last image and last trigger event as a calibration point as errors are\r\nmore likely to arrise in the first images (test triggers, booting cameras, etc)\r\n\r\nNote: DeltaTag does not make copies, it writes the Exif information directly to the images\r\n\r\nInstall: sudo pip install pyulog piexif Pillow\r\nRun: python deltatag.py [logfile] [image dir] (optional offset)\r\neg: python deltatag.py mylog.ulg ./images\r\n\r\nParameters\r\nlogfile: a ulog formatted logfile containing camera_capture events (survey missions)\r\nimage_dir: the directory where the images are located\r\noffset (optional): skip [offset] triggers to reference the last image\r\n                   0 means the last trigger event equals last image (default)\r\n                   1 means the second last trigger event equals last image\r\n                   ...etc",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": false,
    "logicErrorDescription": "This PR introduces a new utility/method for geo-referencing images (DeltaTag) and describes an alternative matching strategy (use last image/trigger as calibration). It reads like a feature/enhancement rather than an explicit fix to incorrect program logic; there is no mention of an existing buggy conditional/state transition or a specific prior incorrect behavior being corrected, nor are code changes or reviews provided to indicate a targeted logic bug fix."
  },
  {
    "title": "Triplets  acceptance radius",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10632",
    "number": 10632,
    "created_at": "2018-10-03T14:09:28Z",
    "merged": true,
    "merged_at": "2018-10-09T16:01:46Z",
    "state": "closed",
    "conversation": {
      "author": "mrivi",
      "body": "**Describe problem solved by the proposed pull request**\nThe `acceptance_radius` field of a triplet is set only when explicitly setting param2 in the mission item (see https://github.com/PX4/Firmware/pull/10413#discussion_r218913242). When using the default `NAV_ACC_RAD`, the field in the triplet is always `0.0`.\nThis PR sets the triplet  `acceptance_radius` to the default `NAV_ACC_RAD` unless the mission item has a param2 different from zero. The triplet field is checked in the Auto FlightTasks instead of the parameter. \n\n**Test data / coverage**\nOnly tested on SITL.",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:46:27Z",
          "body": "It's not clear to me how acceptance radius not set is supposed to be expressed. This is the type of thing that's unclear in the mavlink spec. At the moment I'm guessing 0 or NAN could both be used.\r\n\r\n![image](https://user-images.githubusercontent.com/84712/46418202-4b764a80-c6f9-11e8-9841-e26b0f2e9b52.png)\r\n\r\nhttps://mavlink.io/en/messages/common.html#MAV_CMD\r\n\r\n@DonLakeFlyer could you provide any insight here?",
          "type": "issue_comment"
        },
        {
          "author": "DonLakeFlyer",
          "created_at": "2018-10-03T16:04:45Z",
          "body": "QGC sets to 0 to mean not set.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-10-03T16:04:55Z",
          "body": "@dagar Right now, param2 is zero when not set",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-10-08T09:16:30Z",
          "body": "careful: VTOL_LAND sets a dynamic acceptance radius on the setpoint.",
          "type": "issue_comment"
        },
        {
          "author": "mrivi",
          "created_at": "2018-10-08T09:35:19Z",
          "body": "@sanderux could you please point me to where the acceptance radius is dynamically changed?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-09T16:01:41Z",
          "body": "@sanderux we need to fix and review that for VTOL regardless.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-10-03T19:57:17Z",
          "body": "To be paranoid (until it's documented) could you check ISFINITE as well? Setting the default in else would also be slightly better (only touching sp->acceptance_radius once).",
          "path": "src/modules/navigator/mission_block.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "dagar",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR fixes a logic error where triplet.acceptance_radius stayed 0.0 whenever a mission item's param2 used the default, causing Auto FlightTasks to see an incorrect (zero) acceptance radius. The change populates the triplet with the system default NAV_ACC_RAD unless param2 is explicitly non-zero, correcting the inconsistent state and resulting behavior."
  },
  {
    "title": "VTOL fix back transition navigation path for final MC stretch",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10628",
    "number": 10628,
    "created_at": "2018-10-02T21:26:30Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "sanderux",
      "body": "Fixes https://github.com/PX4/Firmware/issues/10539\n\nInvalidates the previous setpoint (back transition itself).\n\nAlso skips the do_need_move_to_land as this step is always required and the variable acceptance radius could make it skip the final meters and make it start descent directly if the vtol_land waypoint is too close",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2018-10-03T07:56:14Z",
          "body": "@bresch Could you please review?",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:16:45Z",
          "body": "Dropped do_need_move_to_land() is likely breaking FW.\r\n\r\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:19:06Z",
          "body": " * fixes https://github.com/PX4/Firmware/issues/10590",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:24:02Z",
          "body": "Could we please clarify the actual (intended) requirements with all of this mission logic? It's quite convoluted.\r\n\r\n### Intended Behaviour\r\n\r\n * When executing a landing mission item a multicopter should first move to the landing position at the current altitude. If already within the acceptance radius then start executing the landing immediately. \r\n",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-10-07T18:26:16Z",
          "body": "@dagar better?",
          "type": "issue_comment"
        },
        {
          "author": "RomanBapst",
          "created_at": "2018-10-16T09:09:42Z",
          "body": "@dagar Can we bring this in now? From what I understand changes to the navigator logic in this [PR](https://github.com/PX4/Firmware/pull/8749) have changed the behavior for VTOL doing back-transitions.\r\n At the moment I could not think of a better fix and even if I wanted to try it would involve a lot of time going through the navigator logic which has reached quite some level of complexity.\r\nSo unless you have a better idea I think we should merge this.",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-16T12:18:46Z",
          "body": "Why does it make sense to mark the current position setpoint invalid, but not publish the updated triplet? ",
          "type": "issue_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-10-17T15:18:28Z",
          "body": "Waiting for @RomanBapst for a better method",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:17:10Z",
          "body": "Comment explaining why?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 8,
          "type": "review_comment"
        },
        {
          "author": "dagar",
          "created_at": "2018-10-03T14:18:01Z",
          "body": "Regular FW implications?",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "sanderux",
          "created_at": "2018-10-03T21:24:54Z",
          "body": "The acceptance radius on a vtol_land is assigned dynamically based on ground speed. It does this to estimate the distance where it should start the back transition.\r\n\r\nFor a fixed wing the default acceptance radius is used. The do_need_move_to_land would result in skipping the workitem that sets the intermediate waypoint to navigate towards the land site before commencing landing. It would only be skipped if the fixed wing was already withing the acceptance radius of the land waypoint when it got to that waypoint. Even if this would happen (which would be very odd) and we remove this condition it would only result in setting the nav item and directly accepting it as done.\r\n\r\nI do not see how this could affect a fixed wing mission in reality. Let me know if you think it can.",
          "path": "src/modules/navigator/mission.cpp",
          "position": 1,
          "type": "review_comment"
        }
      ],
      "reviews": [
        {
          "author": "RomanBapst",
          "created_at": "",
          "body": "",
          "state": "APPROVED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly targets incorrect VTOL back-transition navigation behavior (boundary/acceptance-radius logic and stale setpoint use) which are logic errors causing wrong flight-path decisions. However reviewers flag that removing do_need_move_to_land may break fixed-wing behavior and that the updated setpoint triplet isn't published, so while it addresses a real logic bug the change appears incomplete/risky."
  },
  {
    "title": "[WIP] navigator initialization and mode change improvements",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/10611",
    "number": 10611,
    "created_at": "2018-09-30T18:52:58Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": " - safely initialize every MissionBlock's _mission_item\n - allow position setpoint triplets with no valid position setpoint to be published\n   - this ensures that the position controllers don't accidentally use an old position setpoint \n - move loiter and takeoff reposition handling into each class (full position setpoint triplet isn't needed)\n - delete dead code\n\n\n**Needs testing**\n\n### Test\n - [ ] takeoff -> hold\n - [ ] reposition usage\n - [ ] switching modes",
      "issue_comments": [
        {
          "author": "dakejahl",
          "created_at": "2018-10-05T17:38:05Z",
          "body": "SITL test's worked fine, real world test not so much....\r\nhttps://review.px4.io/plot_app?log=f464696e-00bb-48a8-b82f-00e089d2fa98\r\n\r\n1. Issued a `takeoff`\r\n2. After successful takeoff then transition into loiter, changed to `position`\r\n3. Flew it forward a bit, no issues\r\n4. Issued `return` \r\n5. Quad begin to roll to reposition...kept rolling and then went inverted and smashed into the ground\r\n\r\nThis is flying todays `master` with `pr-navigator-robust` pulled on top of that.",
          "type": "issue_comment"
        },
        {
          "author": "dakejahl",
          "created_at": "2018-10-09T21:05:39Z",
          "body": "FYI @dagar I flew this again but this time using an RC setup.... Definitely not safe to fly! haha\r\n\r\nhttps://review.px4.io/plot_app?log=0d5f3f53-d3cc-4946-b125-cfeb4881ac8a\r\n\r\nedit: hardfaults as it starts to roll to move towards home...\r\n\r\n![selection_001](https://user-images.githubusercontent.com/37091262/46699087-ff824480-cbd5-11e8-97ec-47c6a420236c.png)\r\n\r\nSanity check.... SITL works fines, no local changes in navigator",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-07-10T17:37:08Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-07-24T18:56:34Z",
          "body": "Closing as stale.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2019-10-23T09:12:32Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "stale[bot]",
          "created_at": "2020-01-22T18:30:46Z",
          "body": "This issue has been automatically marked as stale because it has not had recent activity. Thank you for your contributions.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2020-01-22T20:15:53Z",
          "body": "The majority of the changes here eventually ended up in master.",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": [
        {
          "author": "dakejahl",
          "created_at": "",
          "body": ":hankey: ",
          "state": "CHANGES_REQUESTED",
          "type": "review"
        }
      ]
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR targets logic-level bugs: it initializes MissionBlock mission items to avoid use of uninitialized/stale data and changes how position setpoint triplets and repositioning are published so controllers don't pick up old setpoints (an incorrect state/data-flow bug). Real-world test comments show the WIP caused unsafe behavior initially, but the author notes the majority of these changes were later merged to master, indicating the intent and scope were to fix logic errors (hence medium confidence)."
  },
  {
    "title": "Use RTL when offboard is lost",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/3404",
    "number": 3404,
    "created_at": "2015-12-30T23:42:13Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "AndreasAntener",
      "body": "This contains 2 updates:\n- option to go to RTL when offboard is lost. Parameter allows to set a timeout to wait in LOITER before entering RTL\n- jump to the proper RTL phase when engaged inside acceptance radius of home (instead of climbing up first)\n",
      "issue_comments": [
        {
          "author": "AndreasAntener",
          "created_at": "2015-12-31T11:14:57Z",
          "body": "Updated and SITL tested\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T13:36:32Z",
          "body": "@julianoes thanks, updated\nSITL tested. I think an outdoor test to verify RTL would be good. The offboard timeout to RTL is extensively simulation tested.\n",
          "type": "issue_comment"
        },
        {
          "author": "mhkabir",
          "created_at": "2016-03-05T14:03:09Z",
          "body": "@AndreasAntener, can we have an option to just land if offboard is lost? I think it would be fairly easy to add it to this PR. \n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T14:11:10Z",
          "body": "@mhkabir that's the default if you have no RC connected. It will only RTL if you set this new param\n",
          "type": "issue_comment"
        },
        {
          "author": "mhkabir",
          "created_at": "2016-03-05T14:12:40Z",
          "body": "What if RC is connected? I think it drops back into the previous mode then? \n\nI just wanted it to land instead of that. \n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-03-05T14:14:06Z",
          "body": "In that case it goes to POSCTL: https://github.com/PX4/Firmware/pull/3404/files#diff-20f2c9d76df9330422532b87ab964f86R812\nDo you want to make a PR against this with a param to choose between the two?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2016-05-12T06:37:04Z",
          "body": "@AndreasAntener Because of the inherent dangers I'd prefer if this would support switching between HOLD (loiter), LAND and RTL.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-05-12T13:04:44Z",
          "body": "Ok, I can do that. Same style as for DL and RC loss I guess.\nActually we're currently also using a 4th option: MANUAL. Especially useful for testing takeoff/landing stuff where you want to it to stop controlling 10cm above ground.\n",
          "type": "issue_comment"
        },
        {
          "author": "AndreasAntener",
          "created_at": "2016-05-27T13:25:12Z",
          "body": "New one incoming, split RTL and offboard lost functionality\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [
        {
          "author": "julianoes",
          "created_at": "2016-02-15T13:03:55Z",
          "body": "Personally, I'd prefer a param name like `COM_OFFB_RTL` but up to you.\n",
          "path": "src/modules/commander/commander_params.c",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-15T13:05:18Z",
          "body": "nitpick: You could just use `1e6f` instead of `(float)1e6`, right?\n",
          "path": "src/modules/commander/commander.cpp",
          "position": 1,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-15T13:10:37Z",
          "body": "These changes lake correct, I'm only a little confused that they are part of this PR.\n",
          "path": "src/modules/navigator/rtl.cpp",
          "position": 24,
          "type": "review_comment"
        },
        {
          "author": "julianoes",
          "created_at": "2016-02-15T13:12:21Z",
          "body": "Scary change but it seems right from what I see.\n",
          "path": "src/modules/navigator/rtl.cpp",
          "position": 38,
          "type": "review_comment"
        }
      ],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes mode/state transitions when offboard is lost (allowing configurable RTL after a loiter timeout and correct fallback to POSCTL/other modes) and fixes incorrect RTL phase selection when inside the home acceptance radius (previously climbing unnecessarily). Those are logic errors in mode/state handling and boundary/phase selection, and the PR addresses them."
  },
  {
    "title": "Fmuv1 space",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2080",
    "number": 2080,
    "created_at": "2015-04-24T23:35:50Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "@kd0aij could you test this? Particularly interested in the log - it should work the same as in master (so could have this 8 byte error I haven't traced back yet), but should work with 2 MAVLink instances.\n\nBench-tested on FMUv1 hardware.\n",
      "issue_comments": [
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-25T05:10:23Z",
          "body": "This change set brings FMUv1 from:\n\n```\n             total       used       free    largest\n\nMem:        181456     158384      23072      22672\n```\n\nto\n\n```\n             total       used       free    largest\n\nMem:        181456     153968      27488      27136\n```\n\nwithout any loss of functionality.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-25T06:17:24Z",
          "body": "Passes testing on FMUv1 and FMUv2.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-25T06:18:20Z",
          "body": "Output of top:\n\n```\nProcesses: 20 total, 2 running, 18 sleeping\nCPU usage: 41.69% tasks, 0.48% sched, 57.83% idle\nUptime: 61.275s total, 36.269s idle\n\n PID COMMAND                   CPU(ms) CPU(%)  USED/STACK PRIO(BASE) STATE \n   0 Idle Task                   36269 57.827     0/    0   0 (  0)  READY \n   1 hpwork                       1446  2.476   748/ 1792 192 (192)  w:sig \n   2 lpwork                        165  0.239   356/ 1792  50 ( 50)  READY \n   3 init                         1445  0.000  1324/ 2992 100 (100)  w:sem \n   6 nshterm                         0  0.000   560/ 1496  70 ( 70)  w:sem \n 142 top                           365  2.236  1156/ 1696 100 (100)  RUN   \n  63 dataman                        22  0.000   668/ 1792 100 (100)  w:sem \n  85 sensors_task                 1680  2.795  1292/ 1992 250 (250)  w:sem \n  87 commander                     333  0.399  2756/ 3392 215 (215)  w:sig \n  88 commander_low_prio            156  0.000   692/ 1992  50 ( 50)  w:sem \n  90 px4io                        1014  1.757   852/ 1792 240 (240)  w:sem \n 100 mavlink_if0                   472  0.718  1844/ 2392 100 (100)  w:sig \n 101 mavlink_rcv_if0                 4  0.000   780/ 1792 175 (175)  w:sem \n 109 sdlog2                       3273  5.591  1852/ 2992  70 ( 70)  w:sig \n 111 gps                           149  0.479   700/ 1496 220 (220)  w:sem \n 124 ekf_att_pos_estimator       12823 22.444  3476/ 7496 215 (215)  w:sem \n 126 mc_att_control                625  1.038  1060/ 1496 250 (250)  w:sem \n 136 mc_pos_control                416  0.718  1012/ 1496 250 (250)  w:sem \n 138 land_detector                 108  0.159   484/  992 100 (100)  w:sig \n 140 navigator                     460  0.641   860/ 1696 120 (120)  w:sem          \n```\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2015-04-25T14:02:18Z",
          "body": "with 2 mavlink instances:\n\n```\nProcesses: 21 total, 3 running, 18 sleeping\nCPU usage: 37.68% tasks, 0.54% sched, 61.78% idle\nUptime: 2058.952s total, 1325.763s idle\n\n PID COMMAND                   CPU(ms) CPU(%)  USED/STACK PRIO(BASE) STATE \n   0 Idle Task                 1325763 61.780     0/    0   0 (  0)  READY \n   1 hpwork                      43956  2.072   676/ 1792 240 (192)  w:sem \n   2 lpwork                       6610  0.306   364/ 1792  50 ( 50)  w:sig \n   3 init                          249  0.000  1460/ 2992 100 (100)  w:sem \n 198 top                            64  2.225  1164/ 1696 100 (100)  RUN   \n  75 dataman                       279  0.000   612/ 1792 100 (100)  w:sem \n  89 sensors_task                43186  2.072  1260/ 1992 250 (250)  w:sem \n  91 commander                    7329  0.306  2836/ 3392 215 (215)  w:sig \n  92 commander_low_prio            131  0.000   876/ 1992  50 ( 50)  w:sem \n  94 px4io                       32757  1.611   876/ 1792 240 (240)  w:sem \n 147 mavlink_if0                 27572  1.304  1844/ 2392 100 (100)  w:sig \n 148 mavlink_rcv_if0               134  0.000   780/ 1792 175 (175)  w:sem \n 111 sdlog2                      26906  1.304  1844/ 2992  70 ( 70)  w:sig \n 113 gps                          3497  0.153   740/ 1496 220 (220)  w:sig \n 125 ekf_att_pos_estimator      392557 19.186  3700/ 7496 215 (215)  w:sem \n 132 mc_att_control              18925  0.920   996/ 1496 250 (250)  w:sem \n 135 mc_pos_control              12791  0.537  1116/ 1496 250 (250)  w:sem \n 140 land_detector                3487  0.153   468/  992 100 (100)  w:sig \n 142 navigator                   22313  1.074   900/ 1696 120 (120)  w:sem \n 150 mavlink_if1                 88663  4.451  1908/ 2392 100 (100)  w:sig \n 151 mavlink_rcv_if1               267  0.000   944/ 1792 175 (175)  w:sem \n```\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2015-04-25T14:50:23Z",
          "body": "flight performance nominal in manual mode, but no log file generated. contents of msgs_2015_04_25_14_35_31.txt:\n\n```\nsettings autosaved\n[ekf] ref: LA 39.7501,LO -105.0975,ALT 1692.43\nhome: 39.7501216, -105.0975292, 1694.87\nARMED by RC\nhome: 39.7501293, -105.0975340, 1691.70\n[cmd] arming state: ARMED\nIN AIR MODE\nLANDED MODE\nIN AIR MODE\nDISARMED by RC\n[cmd] arming state: STANDBY\nLANDED MODE\n```\n",
          "type": "issue_comment"
        },
        {
          "author": "davids5",
          "created_at": "2015-04-25T15:45:58Z",
          "body": "I think the stack penetrations of the interrupt stack is 480 bytes (top on nuttx_next has the interrupt stack stats listed for idle)  and the allocations is 1500.  Since we do not nest there is another K that can be recover. \n\nBecause the configuration uses a separate interrupt stack. You really only need about 8 bytes of margin beyond the fully loaded system used values. So there are some gains that could reaped there.\n\nIf call time stack checking is enabled then this increases to an overly conservative 264 bytes. \nThe reason for the 264 byte margin is: It wants to see 64 bytes of head room plus 136 for the FP context and sets the limit at 64. But in reality because the separate interrupt stack we will never stack the full CPU and FP context on the user stack AND there is a and 64 bytes in where limit it set (R10 is 64 bytes from the bottom of the stack)  it is overly conservative.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-25T17:36:41Z",
          "body": "@kd0aij Would you mind re-testing? I checked that sdlog2 works now. Please also make sure to run make distclean and make archives to get the full benefit.\n",
          "type": "issue_comment"
        },
        {
          "author": "kd0aij",
          "created_at": "2015-04-25T19:21:47Z",
          "body": "sdlog2 now working, log: http://dash.oznet.ch/view/gvn9ZVSM4PtYZSSStXD4sJ\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-26T12:34:39Z",
          "body": "Applied on master.\n",
          "type": "issue_comment"
        },
        {
          "author": "coveralls",
          "created_at": "2016-12-20T02:24:43Z",
          "body": "\n[![Coverage Status](https://coveralls.io/builds/9352764/badge)](https://coveralls.io/builds/9352764)\n\nChanges Unknown when pulling **573bfe85a6e0069a35aa6df12b0cf648942bca95 on fmuv1_space** into ** on master**.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes memory/stack layout for FMUv1 so that two MAVLink instances and sdlog2 can run; testers reported missing log files before the change and confirmed sdlog2 works after. This addresses incorrect runtime behavior caused by insufficient/incorrect resource allocation (a logic/state error), and was validated on hardware and merged to master."
  },
  {
    "title": "Parameter meta data fixes",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2035",
    "number": 2035,
    "created_at": "2015-04-15T18:31:17Z",
    "merged": true,
    "merged_at": "2015-04-15T19:12:44Z",
    "state": "closed",
    "conversation": {
      "author": "DonLakeFlyer",
      "body": "We now have decent group names for everything. Fixed parser for missing defines. I'm going to call it good from my side.\n\nStill need lots of work with units and short description. But I'll leave that up to the firmware folks to clean up.\n",
      "issue_comments": [
        {
          "author": "DonLakeFlyer",
          "created_at": "2015-04-15T18:31:59Z",
          "body": "@LorenzMeier The QGC parameter xml parser is still kind of fragile. Can you ping me if you see pulls go by with param changes in them so I can review the meta data?\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-15T18:36:26Z",
          "body": "Yes, will ping you. Thanks for the cleanup!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR description explicitly says it 'Fixed parser for missing defines' and corrects parameter grouping/metadata — these are changes to program behavior (parsing logic and grouping) that address incorrect handling of parameters. However, no code or tests are shown here, so confirmation is limited to the author's stated fixes rather than verified implementation details."
  },
  {
    "title": "Store parameter xml size in .px4 file",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2029",
    "number": 2029,
    "created_at": "2015-04-15T02:18:04Z",
    "merged": true,
    "merged_at": "2015-04-15T07:35:29Z",
    "state": "closed",
    "conversation": {
      "author": "DonLakeFlyer",
      "body": "This is needed in order to decompress in QGroundControl\n",
      "issue_comments": [
        {
          "author": "DonLakeFlyer",
          "created_at": "2015-04-15T06:08:18Z",
          "body": "Hold off on merging this. I have some parameter meta data fixes to go in here as well.\n",
          "type": "issue_comment"
        },
        {
          "author": "DonLakeFlyer",
          "created_at": "2015-04-15T06:28:31Z",
          "body": "Ok. I've cleaned up the parameter meta data that QGC is complaining about. Specific problems:\n- If the param is float or int then the default/min/max values must be float or int. No \"1.0\" value for an int.\n- Float values don't end in \"f'. Floats are just 0.0 not 0.0f. This breaks string conversion.\n\nEventually this will all get better when I switch the firmware to generate param c++ code from xml. This way the parser will validate the xml.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-15T07:35:27Z",
          "body": "Thanks!\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "Yes — the PR changes runtime data handling (storing the parameter XML size in the .px4 file) so QGroundControl can decompress correctly, and it fixes parameter metadata inconsistencies (type-mismatched default/min/max values and improper float formatting) that caused incorrect parsing/string conversion. Those are behavioral/logic issues rather than mere style changes."
  },
  {
    "title": "GF range warning limit mavlink critical messages",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2028",
    "number": 2028,
    "created_at": "2015-04-14T22:46:26Z",
    "merged": true,
    "merged_at": "2015-04-18T07:53:48Z",
    "state": "closed",
    "conversation": {
      "author": "dagar",
      "body": "This changes the geofence range warning to only send a mavlink critical message when your distance outside the max horizontal/vertical has increased instead of every time it's checked (quite annoying).\n",
      "issue_comments": [
        {
          "author": "dagar",
          "created_at": "2015-04-15T00:20:16Z",
          "body": "On second thought, maybe this is still too much? Maybe it should be any change in distance and a couple seconds.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-15T07:34:32Z",
          "body": "@dagar An additional throttling based on time might make sense, but is only required if you can't set the distance to a higher value. If you make it 30-50m then it should sound only every few seconds, even for fast vehicles. And given that an increase is a pretty significant issue, it being annoying probably makes sense.\n",
          "type": "issue_comment"
        },
        {
          "author": "dagar",
          "created_at": "2015-04-17T23:13:16Z",
          "body": "@LorenzMeier Now I'm thinking just a time based delay would best cover all scenarios. I chose 3 seconds.\n\nI flew this and it worked well for me slowing flying a hex in a small area.\n",
          "type": "issue_comment"
        },
        {
          "author": "LorenzMeier",
          "created_at": "2015-04-18T07:53:42Z",
          "body": "cool, thanks! Looking forward to the RTL part next ;-).\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR changes the geofence warning logic to stop emitting a MAVLink critical message on every check and instead only when the out-of-bounds distance increases (with an added time-based throttle). That corrects an incorrect/undesired behavior (spamming critical messages) by altering the conditional/throttling logic, which is a logic error in the original implementation."
  },
  {
    "title": "navigator: Get rid of audio tag in strings and use appropriate priority ...",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2023",
    "number": 2023,
    "created_at": "2015-04-14T11:25:41Z",
    "merged": true,
    "merged_at": "2015-04-14T13:44:45Z",
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "...to get audio out when needed in the GCS.\n\n@tumbili Please review and let me know what you think.\n",
      "issue_comments": [],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR title and brief description indicate changing how audio is emitted by removing an audio tag embedded in strings and using an appropriate priority mechanism so the GCS produces audio when required. That addresses incorrect behavior (audio not being output or triggered improperly), which is a logic bug in program behavior. Because no diffs, tests, or review comments are provided, the assessment is not certain, hence medium confidence."
  },
  {
    "title": "MS5611 reliability",
    "url": "https://github.com/PX4/PX4-Autopilot/pull/2011",
    "number": 2011,
    "created_at": "2015-04-10T23:36:19Z",
    "merged": false,
    "merged_at": null,
    "state": "closed",
    "conversation": {
      "author": "LorenzMeier",
      "body": "This fixes reliability issues found in the reset logic in #2007. Likely not going to improve / affect operation on Pixhawk, but helpful for anyone operating via I2C.\n",
      "issue_comments": [
        {
          "author": "bansiesta",
          "created_at": "2015-05-25T16:27:50Z",
          "body": "Reviewed, can be merged in my opinion.\n",
          "type": "issue_comment"
        }
      ],
      "review_comments": [],
      "reviews": []
    },
    "isLogicError": true,
    "logicErrorDescription": "The PR explicitly states it fixes reliability issues in the reset logic for the MS5611 sensor, which is a behavioral/state handling problem (logic error). The change is intended to correct incorrect or unreliable device reset behavior (especially over I2C), and reviewer feedback indicates it can be merged, supporting that it addresses a real logic bug."
  }
]